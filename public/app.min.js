function config(e,t,o,n){e.when("/login",{controller:"loginController",templateUrl:"views/login.html"}).when("/",{controller:"homeController",templateUrl:"views/home.html"}).when("/user",{controller:"userController",templateUrl:"views/login.html"}).when("/events",{controller:"eventsController",templateUrl:"views/events.html",reloadOnSearch:!1}).when("/events/:id",{controller:"eventController",templateUrl:"views/event.html"}).when("/settings/profile",{controller:"profileController",templateUrl:"views/profile.html"}).when("/settings/users",{controller:"usersController",templateUrl:"views/users.html"}).otherwise({redirectTo:"/login"}),t.theme("default").primaryPalette("light-blue").accentPalette("orange"),t.theme("success-toast"),t.theme("error-toast"),o.interceptors.push("notAllowedInterceptor"),n.setKeyPrefix("nd-")}config.$inject=["$routeProvider","$mdThemingProvider","$httpProvider","$localStorageProvider"];var app=angular.module("gui",["ngMaterial","ngRoute","ngMessages","nvd3","ngStorage","ngMap","gridster"]);app.config(config),app.filter("nospace",function(){return function(e){return e?e.replace(/ /g,""):""}}),app.run(["user","$localStorage","$location","$rootScope","$log",function(e,t,o,n,r){n.$on("$locationChangeStart",function(e){void 0==t.token&&(r.info("no token found, redirecting to /login"),o.path("/login"))})}]),app.factory("notAllowedInterceptor",["$log","$localStorage","$location","$injector","$q",function(e,t,o,n,r){var i={responseError:function(n){return 401==n.status&&(e.error("You are not allowed to access, redirecting to /login"),delete t.token,o.path("/login")),r.reject(n)}};return i}]),app.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),app.constant("CATEGORIES",["any","Recon.Scanning","Attempt.Login","Availability.DoS","Availibility.DDoS"]),app.constant("PROTOCOLS",["tcp","dns","udp"]),app.constant("TYPES",["barchart","piechart","top","sum"]),app.constant("PIECHART",{options:{chart:{type:"pieChart",height:375,x:function(e){return e.key[0]},y:function(e){return e.x},showLabels:!0,donut:!0,padAngle:0,cornerRadius:1,transitionDuration:500,labelThreshold:0,legend:{margin:{top:5,right:0,bottom:-15,left:0}},legendPosition:"top",tooltipContent:function(e,t,o,n,r){return console.log(e),console.log(o),console.log(n),console.log(r),"Olalala!"},pie:{dispatch:{elementClick:function(e){var t=new Date;console.log(e),t.setTime(t.getTime()-864e5),t.setHours(0),t.setMinutes(0),window.location="#/events?filter&date="+t.getTime()+"&from="+(new Date).getHours()+":"+(new Date).getMinutes()+"&category="+e.data.key[0]}},labelType:"percent",labelsOutside:!1}}}}),app.value("AREA",{options:{chart:{type:"multiBarChart",height:450,margin:{top:30,right:20,bottom:100,left:65},x:function(e){return e.x},y:function(e){return Number(e.Count)},useVoronoi:!1,clipEdge:!0,duration:100,useInteractiveGuideline:!1,tooltipContent:function(e,t,o,n,r){return"Ha"},xAxis:{showMaxMin:!1,tickFormat:function(e){return d3.time.format("%m/%d %H:%M")(new Date(e))},rotateLabels:-45},yAxis:{showMaxMin:!1,tickFormat:function(e){return d3.format("s")(e)},axisLabel:"Events Count",axisLabelDistance:-20},multibar:{dispatch:{elementClick:function(e){var t=new Date(e.data.x);console.log(e);var o=t.getHours(),n=t.getMinutes();t.setHours(0),t.setMinutes(0),window.location="#/events?filter&date="+t.getTime()+"&from="+("0"+o).slice(-2)+":"+("0"+n).slice(-2)+"&category="+e.data.key+"&dir=1"}}}}}}),app.constant("MENU",[{title:"Events",link:"#/events"},{title:"Settings",items:[{title:"My profile",link:"#/settings/profile"},{title:"Users",link:"#/settings/users"}]}]),app.controller("eventController",["$scope","$routeParams","$http","api",function(e,t,o,n){e.id=t,e.showPlain=!0,e.geo=[],e.back=function(){window.history.back()},n.get("id/"+t.id).success(function(t){e.data=t,void 0!=e.data.Source&&void 0!=e.data.Target&&e.data.Source[0].IP4&&e.data.Target[0].IP4?(o.get("http://freegeoip.net/json/"+e.data.Target[0].IP4[0]).success(function(t){t.type="Target",e.geo.push(t)}),o.get("http://freegeoip.net/json/"+e.data.Source[0].IP4[0]).success(function(t){t.type="Source",e.geo.push(t)})):void 0==e.data.Source||void 0==e.data.Source[0].IP4?o.get("http://freegeoip.net/json/"+e.data.Target[0].IP4[0]).success(function(t){t.type="Target",e.geo.push(t)}):o.get("http://freegeoip.net/json/"+e.data.Source[0].IP4[0]).success(function(t){t.type="Source",e.geo.push(t)})})}]),app.controller("eventsController",["$scope","$http","$location","api","$route",function(e,t,o,n,r){if(e.filter={category:"",src_ip:"",trt_ip:"",desc:"",flows_from:"",flows_to:"",items:100},e.query={from:"12:00",to:"",date:new Date,description:"",category:"",orderby:"DetectTime",dir:-1,dir_raw:!0,limit:100,srcip:"",dstip:""},e.orderBy=["DetectTime","Category","Description","FlowCount"],e.searchText="",e.data=[],e.loadbtn="Load",e.nextButton="Load next 100 items",e.activeFilter=o.search().filter,e.dirVal="Descending",e.reset=function(){o.search({}),r.reload()},e.getQuery=function(t,o){console.log(t);var n=new Date;n.setDate(n.getDate()-7);var r="0"+n.getMinutes(),i="0"+n.getHours(),a={from:i.substr(-2)+":"+r.substr(-2),date:n,limit:100,orderby:"DetectTime",dir:1};"src"==o?a.srcip=t:a.dstip=t,e.loadItems(a)},e.switchDir=function(t){t==-1||t||void 0==t?(e.dirVal="Descending",e.query.dir=-1):(e.dirVal="Ascending",e.query.dir=1)},e.loadNext=function(t){if(e.nextButton="Loading...",o.search().filter){var r=angular.copy(e.query);if(r.from=new Date(t),r.dir=1,r.to){var i=r.to.split(":"),a=new Date(r.date);a.setHours(a.getHours()+i[0]),a.setMinutes(i[1])}else var a=null;r.to=a,n.get("query",r,!0).success(function(t){e.remaining=t.pop();for(item in t)e.data.push(t[item]);e.nextButton="Load next 100 items"}).error(function(t,o){e.nextButton="Load next 100 items"})}else r={to:new Date(t),dir:-1},n.get("query",r,!0).success(function(t){e.remaining=t.pop();for(item in t)e.data.push(t[item]);e.nextButton="Load next 100 items"}).error(function(t,o){e.nextButton="Load next 100 items"})},e.loadItems=function(t){e.loadbtn="Loading...";var r=t.from.split(":"),i=new Date(t.date);i.setHours(r[0]),i.setMinutes(r[1]);var a=angular.copy(t.date);if(o.search("filter",!0),o.search("from",t.from),o.search("date",a.getTime()),o.search("limit",t.limit),o.search("orderby",t.orderby),o.search("dir",t.dir),t.to){var s=t.to.split(":"),c=new Date(t.date);c.setHours(s[0]),c.setMinutes(s[1]),o.search("to",t.to)}else var c=null;""!=t.description?o.search("description",t.description):t.description=null,""!=t.category?o.search("category",t.category):t.category=null,""!=t.srcip?o.search("srcip",t.srcip):(o.search("srcip",null),t.srcip=null),""!=t.dstip?o.search("dstip",t.dstip):(o.search("dstip",null),t.dstip=null);var l={from:i,to:c,category:t.category,description:t.description,limit:t.limit,orderby:t.orderby,dir:t.dir,srcip:t.srcip,dstip:t.dstip};n.get("query",l,!0).success(function(t){e.remaining=t.pop(),e.data=t,e.loadbtn="Load"}).error(function(){e.loadbtn="Load"})},e.events=function(t){var o=[];""!=e.filter.src_ip&&("Source"in t&&"IP4"in t.Source[0]&&t.Source[0].IP4[0].toLowerCase().indexOf(e.filter.src_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.trt_ip&&("Target"in t&&"IP4"in t.Target[0]&&t.Target[0].IP4[0].toLowerCase().indexOf(e.filter.trt_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.category&&(t.Category[0].toLowerCase().indexOf(e.filter.category.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.desc&&(t.Description.toLowerCase().indexOf(e.filter.desc.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.flows_from&&(t.FlowCount>Number(e.filter.flows_from)?o.push(1):o.push(0)),""!=e.filter.flows_to&&(t.FlowCount<Number(e.filter.flows_to)?o.push(1):o.push(0));for(var n=1,r=0;r<o.length;r++)n*=o[r];return 1==n},o.search().filter){e.switchDir(o.search().dir);var i=angular.copy(o.search());i.date=new Date(Number(i.date)),e.query=i,e.loadItems(e.query)}else n.get("100").success(function(t){e.data=t})}]),app.directive("validateHours",function(){var e=[],t=[];return{require:"ngModel",link:function(o,n,r,i){i.$validators.time=function(o,n){return"query.from"==r.ngModel&&n?t=n.split(":"):n&&(e=n.split(":")),2!=e.length&&2!=t.length||!(e[0]<t[0]||e[0]<=t[0]&&e[1]<t[1]||e[0]<0||e[0]>23||e[1]<0||e[1]>59||t[0]<0||t[0]>23||t[1]<0||t[1]>59)}}}}),app.controller("homeController",["$scope","user","$timeout","$interval","$log","$localStorage","$route","$mdDialog","dashboard",function(e,t,o,n,r,i,a,s,c){e.dashboards=c.getAll(),e.dashboardSettings=c.settings(),e.activeGrid=!1,e.refresh_interval=e.dashboardSettings.interval;var l=void 0;e.refresh_enabled=angular.isDefined(l),e.openMenu=function(e,t){originatorEv=t,e(t)},e.addItem=function(){e.$broadcast("addItem")},e.enableGrid=function(){console.log("Enable grid"),e.$broadcast("enableGrid"),e.activeGrid=!e.activeGrid},e.$on("requestRedraw",function(e){e.stopPropagation(),o(function(){window.dispatchEvent(new Event("resize"))},100)}),e.clearCache=function(){r.debug("deleting timestamp"),delete i.timestamp,a.reload()},e.setInterval=function(){angular.isDefined(l)?(n.cancel(l),l=void 0,console.log("broadcast failed")):l=n(function(){console.log("broadcast"),e.$broadcast("refreshData")},1e3*e.refresh_interval),e.refresh_enabled=angular.isDefined(l)},e.selectedDashboard=c.active(),e.editDashboard=function(t,o){e.backupDashboards=angular.copy(e.dashboards),s.show({controller:"editDashboardController",templateUrl:"partials/addDashboard.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0}).then(function(t){c.save(),e.refresh_interval=e.dashboardSettings.interval},function(){e.dashboards=e.backupDashboards,console.log(e.backupDashboards),e.backupDashboards={},console.log("reverting")})},e.$on("switchDashboard",function(t,o){delete i.timestamp,c["switch"](o),e.selectedDashboard=c.active(),e.$broadcast("reloadDashboard")})}]),app.controller("box",["$scope","$log","$mdDialog","PROTOCOLS","TYPES","CATEGORIES","PIECHART","AREA","api","user","$mdMedia","$localStorage","$timeout","dashboard",function(e,t,o,n,r,i,a,s,c,l,u,d,p,h){function g(t){t=angular.isDefined(t)?t:0,e.box.config.begintime=function(){var o=new Date,n=60*(Number(t)+Number(e.box.config.period))*60*1e3,r=o.getTime()-n;return Math.floor(r/1e3)}(),e.box.config.endtime=function(){var e=new Date;return e.setTime(e.getTime()-60*Number(t)*60*1e3),Math.floor(e/1e3)}()}function f(){if(g(e.dashboard.settings.timeshift),"piechart"==e.box.type||"barchart"==e.box.type){if("piechart"==e.box.type&&(e.box.options=a.options),"barchart"==e.box.type&&(e.box.options=angular.copy(s.options),e.box.selector?(e.box.options.chart.yAxis.axisLabel="Flow Count",e.box.options.chart.y=function(e){return Number(e.FlowCount)}):e.box.options.chart.yAxis.axisLabel="Events Count"),e.box.config.type=e.box.type,m>300){var t=angular.copy(e.box.config);"custom"==e.box.config.metric&&(t.metric=t.custom_metric);for(item in t)""==t[item]&&(t[item]=null);c.get("agg",t,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t,e.$emit("requestRedraw")})}}else"top"==e.box.type&&m>300?c.get("top",e.box.config,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t}):"sum"==e.box.type&&m>300&&c.get("count",e.box.config,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t})}g(e.dashboard.settings.timeshift),e.box.loading=!0,e.openMenu=function(e,t){originatorEv=t,e(t)},e.backupModel={},e.protocol=n,e.types=r,e.categories=i,e.edit=function(t){e.editMode=!0,e.backupModel=angular.copy(t)},e.save=function(){h.save(),e.backupModel={},e.box.config.type=e.box.type,e.editMode=!1,m=310,f()},e.cancel=function(t){e.box=angular.copy(e.backupModel),e.backupModel={}},e.top=function(){g(e.box.settings.timeshift),c.get("top",e.box.config,!0).success(function(t){console.log(t),e.box.data=t})};var m=(new Date-new Date(d.timestamp))/1e3;isNaN(m)&&(m=310),m<300?e.box.loading=!1:e.box.loading=!0,e.$on("gridster-item-initialized",function(t){"piechart"!=e.box.type&&"barchart"!=e.box.type||p(function(){e.$emit("requestRedraw")},500)}),f(),e.$on("refreshData",function(){m=310,f()}),e.$on("saveUser",function(){h.save()}),e.$on("gridster-item-resized",function(e){p(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},100)}),e.showEdit=function(t,n){e.backupModel=angular.copy(e.box),o.show({controller:"editBoxController",templateUrl:"partials/edit.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0,locals:{box:e.box}}).then(function(t){e.save()},function(){e.box=angular.copy(e.backupModel),e.backupModel={}})}}]),app.controller("grid",["$scope","$timeout","$log","$route","user","dashboard",function(e,t,o,n,r,i){e.opt={outerMargin:!1,columns:8,pushing:!0,rowHeight:170,colWidth:"auto",floating:!0,swapping:!0,mobileBreakPoint:933,draggable:{enabled:!1},resizable:{enabled:!1,handles:["n","e","s","w","se","sw"],stop:function(t,o,n){e.$emit("requestRedraw")}}},e.dashboard=i.get(),e.items=e.dashboard.items,e.$on("enableGrid",function(){1==e.opt.resizable.enabled&&e.$broadcast("saveUser"),e.opt.resizable.enabled=!e.opt.resizable.enabled,e.opt.draggable.enabled=!e.opt.draggable.enabled}),e.remove=function(t){e.items.splice(e.items.indexOf(t),1);e.$broadcast("saveUser")},e.$on("addItem",function(){var t={title:"New box",loading:!1,sizeX:1,sizeY:1,content:"",config:{period:0}};e.items.push(t)}),e.$on("reloadDashboard",function(){e.dashboard=i.get(),e.items=e.dashboard.items,console.log(e.dashboard),e.$emit("requestRedraw")})}]),app.controller("editBoxController",["$scope","$mdDialog","box","PROTOCOLS","TYPES","CATEGORIES",function(e,t,o,n,r,i){e.box=o,e.backupModel=angular.copy(o),e.categories=i,e.protocols=n,e.types=r,e.saveAndClose=function(){t.hide()},e.answer=function(e){t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()},e.changeSelector=function(e){}}]),app.controller("addDashboardController",["$scope","$mdDialog","dashboard",function(e,t,o){e.editDashboard=!1,e.saveAndClose=function(e){t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()}}]),app.controller("editDashboardController",["$scope","$rootScope","$mdDialog","dashboard",function(e,t,o,n){e.db=n.settings(),e.editDashboard=!0,e.saveAndClose=function(e){n.update(e),o.hide()},e.deleteDashboard=function(){n["delete"](),t.$broadcast("switchDashboard",0),n.save(),o.hide()},e.cancel=function(e){console.log("Cancelling"),o.cancel()}}]),app.controller("loginController",["$scope","$location","$log","user",function(e,t,o,n){e.title="Login to Nemea Dashboard",e.loginBtn="Login",e.submit=function(o){e.loginBtn="Authenticating...",e.loginBtnDisabled=!0,n.auth(o).success(function(e){t.path("/")}).error(function(t){e.error_mes=t,e.loginBtn="Login",e.loginBtnDisabled=!1})};var r=Trianglify({width:window.innerWidth,height:window.innerHeight,x_colors:"GnBu",y_colors:"GnBu",cell_size:50});console.log(r),document.getElementById("login").appendChild(r.canvas())}]),app.controller("profileController",["$scope","$log","$localStorage","user","dashboard",function(e,t,o,n,r){e.user=n.get(),e.save_btn="Save",e.editUser=function(i){e.save_btn="Processing...",i.settings=r.clean(),n.put(i,!0).success(function(t){o.token=t.jwt,e.err_msg="",e.user=angular.copy(n.get()),e.save_btn="Save"}).error(function(o){e.save_btn="Save",console.log(o),t.error(o.error),e.user.password="",e.err_msg=o.error})}}]),app.controller("usersController",["$scope","api","user","$mdDialog",function(e,t,o,n){o.get(!0).success(function(t){e.people=t}),e.myUsername=function(){var e=o.get();return e.username},e.deleteUser=function(t){console.log(t),o["delete"](t).success(function(t){console.log(t),o.get(!0).success(function(t){e.users=t})})},e.addUser=function(t){e.addUserBox=!0,n.show({controller:"addUserController",templateUrl:"partials/addUser.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0}).then(function(t){console.log(t),o.post(t).success(function(t){console.log(t),o.get(!0).success(function(t){e.users=t})})},function(){})}}]),app.controller("addUserController",["$scope","$mdDialog",function(e,t){e.user={username:"",name:"",surname:"",password:"",settings:[{settings:{title:"Basic",timeshift:"0",interval:"60"},items:[{loading:!1,row:0,config:{period:"24",type:"piechart",metric:"category"},sizeX:4,sizeY:3,col:0,title:"24h shares",type:"piechart",content:"Click the menu icon to select edit"}]}]},e.saveAndClose=function(e){console.log(e),t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()}}]),app.directive("gridsterDynamicHeight",["$timeout",function(e){function t(e,t,o){e.$watch(function(){return t[0].scrollHeight},function(t,o){var n=270,r=n*e.item.sizeY;if(t>r){var i=Math.floor(t/n);e.item.sizeY=i}})}var o={scope:{item:"="},link:t,restrict:"A"};return o}]),app.service("api",["$http","$log","$mdToast","$localStorage","PIECHART","CONFIG",function(e,t,o,n,r,i){var a=i.host+":"+i.port+"/"+i.version+"/events/";this.auth=function(){return n.token},this.config=function(){e.get("http://benefizio.liberouter.org:5555/config").success(function(e){this.addr=e.host+":"+e.port+e.events,n.config=e,alert(e)})},this.get=function(r,i,s,c){return e({url:a+r,method:"GET",params:i,headers:{Authorization:this.auth()}}).success(function(e){return s&&o.show(o.simple().textContent("Data successully loaded").position("top right").hideDelay(3e3).theme("success-toast")),c&&(n.timestamp=new Date),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot load data").position("top right").hideDelay(3e3).theme("error-toast"))})},this.post=function(n,r,i){return e.post(a+n,JSON.stringify(r)).success(function(e){return i&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot fetch data").position("top right").hideDelay(3e3).theme("error-toast"))})},this.put=function(n,r,i){return e.put(a+n,JSON.stringify(r)).success(function(e){return i&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot fetch data").position("top right").hideDelay(3e3).theme("error-toast"))})}}]),app.service("dashboard",["$log","$localStorage","user",function(e,t,o){var n,r=0,i=(t.dashboard,t.dashboard[r]);this.getAll=function(){return t.dashboard},this.get=function(){return t.dashboard[r]},this.settings=function(){return t.dashboard[r].settings},this.active=function(e){return angular.isDefined(e)&&(r=e),r},this.update=function(e){angular.isUndefined(e)?i.settings=0:i.settings=e},this.clean=function(){for(var e=angular.copy(t.dashboard),o=0;o<e.length;o++)for(var n=0;n<e[o].items.length;n++)delete e[o].items[n].data,delete e[o].items[n].options;return e},this.save=function(){var t={settings:this.clean()};return o.put(t).success(function(e){}).error(function(t){e.error(t)})},this.add=function(e){var o={settings:e,items:[{title:"New box",loading:!1,sizeX:1,sizeY:1,content:"Click the menu icon to select edit",config:{period:"0"}}]};return t.dashboard.push(o),t.dashboard.length-1},this["delete"]=function(){return n=t.dashboard.splice(t.dashboard.indexOf(i),1),r=0,n},this["switch"]=function(e){return i=t.dashboard[e],r=e,i},this.reset=function(){r=0,i=t.dashboard[r]}}]),app.directive("sidebarMenu",function(){return{scope:{section:"="},templateUrl:"partials/sidebar-menu.html",controller:["$scope","$mdSidenav","$mdDialog","$location","MENU","user","dashboard",function(e,t,o,n,r,i,a){e.menu=r,e.dashboards=a.getAll(),e.selectedDashboard=a.active(),e.isActive=function(e){return"#"+n.path()==e},e.enable=!0,e.toggleItem=function(){e.toggleBtn="toggled"},e.closeLeft=function(){t("left").toggle()},e.logout=function(){a.reset(),i.logout()},e.addDashboard=function(t){console.log("Adding new dashboard"),o.show({controller:"addDashboardController",templateUrl:"partials/addDashboard.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0}).then(function(t){var o=a.add(t);a.save(),e.$emit("switchDashboard",o),e.selectedDashboard=a.active(o)},function(){})},e.switchDashboard=function(t){e.selectedDashboard=a.active(t),e.$emit("switchDashboard",t)},e.$on("switchDashboard",function(){console.log("switching"),e.selectedDashboard=a.active()})}]}}),app.directive("topbarMenu",function(){return{scope:{section:"="},templateUrl:"partials/topbar-menu.html",controller:["$scope","$mdSidenav",function(e,t){e.toggleLeft=function(){t("left").toggle()}}]}}),app.directive("boxes",function(){return{scope:{section:"="},templateUrl:"partials/boxes.html"}}),app.service("user",["$localStorage","$http","$mdToast","$location","$log","CONFIG",function(e,t,o,n,r,i){var a=i.host+":"+i.port+"/"+i.version+"/users/";this.config=function(){return e.dashboard},this.jwt=function(){var t=e.token,o=t.split(".")[1],n=o.replace("-","+").replace("_","/");return JSON.parse(window.atob(n))},this.auth=function(o){return console.log(a),t.post(a+"auth",angular.toJson(o)).success(function(t){e.token=t.jwt,delete e.dashboard,e.dashboard=t.settings}).error(function(e,t){return console.log(e),console.log(t),e})},this.put=function(n,i){return t({url:a,method:"PUT",data:angular.toJson(n),headers:{Authorization:e.token}}).success(function(e){return i&&o.show(o.simple().textContent("User settings updated").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(e,t){return r.error("Something went wrong sending user data"),o.show(o.simple().textContent("Something went wrong").position("top right").hideDelay(3e3).theme("error-toast")),console.log(e),e})},this.logout=function(){e.token;return t({url:a+"logout",method:"DELETE",headers:{Authorization:e.token}}).success(function(t){n.path("/login"),delete e.token,delete e.dashboard,delete e.timestamp,o.show(o.simple().textContent("Logout successfull").position("top right").hideDelay(3e3))}).error(function(t,r){n.path("/login"),delete e.token,delete e.dashboard,delete e.timestamp,o.show(o.simple().textContent("Logout failed on server side, but you are logged out").position("top right").hideDelay(3e3))})},this.get=function(n){var r=e.token;return n?t({url:a,method:"GET",headers:{Authorization:r}}).success(function(e){return console.log(e),e}).error(function(e,t){o.show(o.simplet().textContent("Cannot fetch users from database").position("top right").hideDelay(3e3).theme("error-toast"))}):this.jwt()},this.post=function(n){var r=e.token;return t({url:a,method:"POST",data:angular.toJson(n),headers:{Authorization:r}}).success(function(e){return e}).error(function(e,t){o.show(o.simplet().textContent("Cannot create user").position("top right").hideDelay(3e3).theme("error-toast"))})},this["delete"]=function(n){var r=e.token;return console.log(n),t({url:a,method:"DELETE",params:{userId:n},headers:{Authorization:r}}).success(function(e){return e}).error(function(e,t){o.show(o.simplet().textContent("Cannot delete user").position("top right").hideDelay(3e3).theme("error-toast"))})}}]),app.filter("idea",function(){return function(e){var t={};return angular.forEach(e,function(e,o){"_id"!=o&&(e.$date?(console.log(e.$date),t[o]=new Date(e.$date).toISOString().slice(0,19)+"Z"):t[o]=e)}),t}}),app.filter("json2html",["$sce","$filter",function(e,t){return function(o){var n="";return angular.forEach(o,function(e,o){"_id"!=o&&(n+="<div>","object"==typeof e?("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=n+'<div class="sub">'+t("json2html")(e)+"</div>"):("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=e>1e12?n+"<span>"+t("date")(e,"yyyy/MM/dd H:mm:ss")+"</span>":n+"<span>"+e+"</span>"),n+="</div>")}),e.trustAs("html",n)}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
