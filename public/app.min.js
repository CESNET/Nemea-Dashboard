function config(e,t,o,n){e.when("/login",{controller:"loginController",templateUrl:"views/login.html"}).when("/",{controller:"homeController",templateUrl:"views/home.html"}).when("/user",{controller:"userController",templateUrl:"views/login.html"}).when("/events",{controller:"eventsController",templateUrl:"views/events.html",reloadOnSearch:!1}).when("/events/:id",{controller:"eventController",templateUrl:"views/event.html"}).when("/settings/profile",{controller:"profileController",templateUrl:"views/profile.html"}).when("/settings/users",{controller:"usersController",templateUrl:"views/users.html"}).otherwise({redirectTo:"/login"}),t.theme("default").primaryPalette("light-blue").accentPalette("orange"),t.theme("success-toast"),t.theme("error-toast"),o.interceptors.push("notAllowedInterceptor"),n.setKeyPrefix("nd-")}config.$inject=["$routeProvider","$mdThemingProvider","$httpProvider","$localStorageProvider"];var app=angular.module("gui",["ngMaterial","ngRoute","ngMessages","nvd3","ngStorage","ngMap","gridster"]);app.config(config),app.filter("nospace",function(){return function(e){return e?e.replace(/ /g,""):""}}),app.run(["user","$localStorage","$location","$rootScope","$log",function(e,t,o,n,r){n.$on("$locationChangeStart",function(e){void 0==t.token&&(r.info("no token found, redirecting to /login"),o.path("/login"))})}]),app.factory("notAllowedInterceptor",["$log","$localStorage","$location","$injector","$q",function(e,t,o,n,r){var i={responseError:function(n){return 401==n.status&&(e.error("You are not allowed to access, redirecting to /login"),delete t.token,o.path("/login")),r.reject(n)}};return i}]),app.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),app.constant("CATEGORIES",["any","Recon.Scanning","Attempt.Login","Availability.DoS","Availibility.DDoS"]),app.constant("PROTOCOLS",["tcp","dns","udp"]),app.constant("TYPES",["barchart","piechart","top","sum"]),app.constant("PIECHART",{options:{chart:{type:"pieChart",height:375,x:function(e){return e.key[0]},y:function(e){return e.x},showLabels:!0,donut:!0,padAngle:0,cornerRadius:1,transitionDuration:500,labelThreshold:0,legend:{margin:{top:5,right:0,bottom:-15,left:0}},legendPosition:"top",tooltipContent:function(e,t,o,n,r){return console.log(e),console.log(o),console.log(n),console.log(r),"Olalala!"},pie:{dispatch:{elementClick:function(e){var t=new Date;console.log(e),t.setTime(t.getTime()-864e5),t.setHours(0),t.setMinutes(0),window.location="#/events?filter&date="+t.getTime()+"&from="+(new Date).getHours()+":"+(new Date).getMinutes()+"&category="+e.data.key[0]}},labelType:"percent",labelsOutside:!1}}}}),app.value("AREA",{options:{chart:{type:"multiBarChart",height:450,margin:{top:30,right:20,bottom:100,left:65},x:function(e){return e.x},y:function(e){return Number(e.Count)},useVoronoi:!1,clipEdge:!0,duration:100,useInteractiveGuideline:!1,tooltipContent:function(e,t,o,n,r){return"Ha"},xAxis:{showMaxMin:!1,tickFormat:function(e){return d3.time.format("%m/%d %H:%M")(new Date(e))},rotateLabels:-45},yAxis:{showMaxMin:!1,tickFormat:function(e){return d3.format("s")(e)},axisLabel:"Events Count",axisLabelDistance:-20},multibar:{dispatch:{elementClick:function(e){var t=new Date(e.data.x);console.log(e);var o=t.getHours(),n=t.getMinutes();t.setHours(0),t.setMinutes(0),window.location="#/events?filter&date="+t.getTime()+"&from="+("0"+o).slice(-2)+":"+("0"+n).slice(-2)+"&category="+e.data.key+"&dir=1"}}}}}}),app.constant("MENU",[{title:"Events",link:"#/events"},{title:"Settings",items:[{title:"My profile",link:"#/settings/profile"},{title:"Users",link:"#/settings/users"}]}]),app.controller("eventController",["$scope","$routeParams","$http","api",function(e,t,o,n){e.id=t,e.showPlain=!0,e.geo=[],e.back=function(){window.history.back()},n.get("id/"+t.id).success(function(t){e.data=t,void 0!=e.data.Source&&void 0!=e.data.Target&&e.data.Source[0].IP4&&e.data.Target[0].IP4?(o.get("http://freegeoip.net/json/"+e.data.Target[0].IP4[0]).success(function(t){t.type="Target",e.geo.push(t)}),o.get("http://freegeoip.net/json/"+e.data.Source[0].IP4[0]).success(function(t){t.type="Source",e.geo.push(t)})):void 0==e.data.Source||void 0==e.data.Source[0].IP4?o.get("http://freegeoip.net/json/"+e.data.Target[0].IP4[0]).success(function(t){t.type="Target",e.geo.push(t)}):o.get("http://freegeoip.net/json/"+e.data.Source[0].IP4[0]).success(function(t){t.type="Source",e.geo.push(t)})})}]),app.controller("eventsController",["$scope","$http","$location","api","$route",function(e,t,o,n,r){if(e.filter={category:"",src_ip:"",trt_ip:"",desc:"",flows_from:"",flows_to:"",items:100},e.query={from:"12:00",to:"",date:new Date,description:"",category:"",orderby:"DetectTime",dir:1,limit:100,srcip:"",dstip:""},e.orderBy=["DetectTime","Category","Description","FlowCount"],e.searchText="",e.data=[],e.loadbtn="Load",e.nextButton="Load next 100 items",e.activeFilter=o.search().filter,e.reset=function(){o.search({}),r.reload()},e.getQuery=function(t,o){console.log(t);var n=new Date;n.setDate(n.getDate()-7);var r="0"+n.getMinutes(),i="0"+n.getHours(),a={from:i.substr(-2)+":"+r.substr(-2),date:n,limit:100,orderby:"DetectTime",dir:1};"src"==o?a.srcip=t:a.dstip=t,e.loadItems(a)},e.switchDir=function(t){-1==t||t?(e.dirVal="Descending",e.query.dir=-1):(e.dirVal="Ascending",e.query.dir=1)},e.switchDir(o.search().dir),e.loadNext=function(t){if(e.nextButton="Loading...",o.search().filter){var r=angular.copy(e.query);if(r.from=new Date(t),r.dir=1,r.to){var i=r.to.split(":"),a=new Date(r.date);a.setHours(a.getHours()+i[0]),a.setMinutes(i[1])}else var a=null;r.to=a,n.get("query",r,!0).success(function(t){e.remaining=t.pop();for(item in t)e.data.push(t[item]);e.nextButton="Load next 100 items"}).error(function(t,o){e.nextButton="Load next 100 items"})}else r={to:new Date(t),dir:-1},n.get("query",r,!0).success(function(t){e.remaining=t.pop();for(item in t)e.data.push(t[item]);e.nextButton="Load next 100 items"}).error(function(t,o){e.nextButton="Load next 100 items"})},e.loadItems=function(t){e.loadbtn="Loading...";var r=t.from.split(":"),i=new Date(t.date);console.log(t),i.setHours(r[0]),i.setMinutes(r[1]);var a=angular.copy(t.date);if(console.log("copying date"),o.search("filter",!0),o.search("from",t.from),o.search("date",a.getTime()),o.search("limit",t.limit),o.search("orderby",t.orderby),o.search("dir",t.dir),t.to){var s=t.to.split(":"),c=new Date(t.date);c.setHours(s[0]),c.setMinutes(s[1]),o.search("to",t.to)}else var c=null;""!=t.description?o.search("description",t.description):t.description=null,""!=t.category?o.search("category",t.category):t.category=null,""!=t.srcip?o.search("srcip",t.srcip):(o.search("srcip",null),t.srcip=null),""!=t.dstip?o.search("dstip",t.dstip):(o.search("dstip",null),t.dstip=null);var l={from:i,to:c,category:t.category,description:t.description,limit:t.limit,orderby:t.orderby,dir:t.dir,srcip:t.srcip,dstip:t.dstip};n.get("query",l,!0).success(function(t){e.remaining=t.pop(),e.data=t,e.loadbtn="Load"}).error(function(){e.loadbtn="Load"})},o.search().filter){var i=angular.copy(o.search());i.date=new Date(Number(i.date)),e.query=i,e.loadItems(e.query)}else n.get("100").success(function(t){e.data=t});e.events=function(t){var o=[];""!=e.filter.src_ip&&("Source"in t&&"IP4"in t.Source[0]&&t.Source[0].IP4[0].toLowerCase().indexOf(e.filter.src_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.trt_ip&&("Target"in t&&"IP4"in t.Target[0]&&t.Target[0].IP4[0].toLowerCase().indexOf(e.filter.trt_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.category&&(t.Category[0].toLowerCase().indexOf(e.filter.category.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.desc&&(t.Description.toLowerCase().indexOf(e.filter.desc.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.flows_from&&(t.FlowCount>Number(e.filter.flows_from)?o.push(1):o.push(0)),""!=e.filter.flows_to&&(t.FlowCount<Number(e.filter.flows_to)?o.push(1):o.push(0));for(var n=1,r=0;r<o.length;r++)n*=o[r];return 1==n?!0:!1}}]),app.directive("validateHours",function(){var e=[],t=[];return{require:"ngModel",link:function(o,n,r,i){i.$validators.time=function(o,n){return"query.from"==r.ngModel&&n?t=n.split(":"):n&&(e=n.split(":")),2!=e.length&&2!=t.length||!(e[0]<t[0]||e[0]<=t[0]&&e[1]<t[1]||e[0]<0||e[0]>23||e[1]<0||e[1]>59||t[0]<0||t[0]>23||t[1]<0||t[1]>59)?!0:!1}}}}),app.controller("homeController",["$scope","user","$timeout","$interval","$log","$localStorage","$route","$mdDialog","dashboard",function(e,t,o,n,r,i,a,s,c){e.dashboards=c.getAll(),e.dashboardSettings=c.settings(),e.activeGrid=!1,e.refresh_interval=e.dashboardSettings.interval;var l=void 0;e.refresh_enabled=angular.isDefined(l),e.openMenu=function(e,t){originatorEv=t,e(t)},e.addItem=function(){e.$broadcast("addItem")},e.enableGrid=function(){console.log("Enable grid"),e.$broadcast("enableGrid"),e.activeGrid=!e.activeGrid},e.$on("requestRedraw",function(e){e.stopPropagation(),o(function(){window.dispatchEvent(new Event("resize"))},100)}),e.clearCache=function(){r.debug("deleting timestamp"),delete i.timestamp,a.reload()},e.setInterval=function(){angular.isDefined(l)?(n.cancel(l),l=void 0,console.log("broadcast failed")):l=n(function(){console.log("broadcast"),e.$broadcast("refreshData")},1e3*e.refresh_interval),e.refresh_enabled=angular.isDefined(l)},e.selectedDashboard=c.active(),e.editDashboard=function(t,o){e.backupDashboards=angular.copy(e.dashboards),s.show({controller:"editDashboardController",templateUrl:"partials/addDashboard.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0}).then(function(t){c.save(),e.refresh_interval=e.dashboardSettings.interval},function(){e.dashboards=e.backupDashboards,console.log(e.backupDashboards),e.backupDashboards={},console.log("reverting")})},e.$on("switchDashboard",function(t,o){delete i.timestamp,c["switch"](o),e.selectedDashboard=c.active(),e.$broadcast("reloadDashboard")})}]),app.controller("box",["$scope","$log","$mdDialog","PROTOCOLS","TYPES","CATEGORIES","PIECHART","AREA","api","user","$mdMedia","$localStorage","$timeout","dashboard",function(e,t,o,n,r,i,a,s,c,l,u,d,p,h){function g(t){t=angular.isDefined(t)?t:0,e.box.config.begintime=function(){var o=new Date,n=60*(Number(t)+Number(e.box.config.period))*60*1e3,r=o.getTime()-n;return Math.floor(r/1e3)}(),e.box.config.endtime=function(){var e=new Date;return e.setTime(e.getTime()-60*Number(t)*60*1e3),Math.floor(e/1e3)}()}function f(){if(g(e.dashboard.settings.timeshift),"piechart"==e.box.type||"barchart"==e.box.type){if("piechart"==e.box.type&&(e.box.options=a.options),"barchart"==e.box.type&&(e.box.options=angular.copy(s.options),e.box.selector?(e.box.options.chart.yAxis.axisLabel="Flow Count",e.box.options.chart.y=function(e){return Number(e.FlowCount)}):e.box.options.chart.yAxis.axisLabel="Events Count"),e.box.config.type=e.box.type,m>300){var t=angular.copy(e.box.config);"custom"==e.box.config.metric&&(t.metric=t.custom_metric);for(item in t)""==t[item]&&(t[item]=null);c.get("agg",t,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t,e.$emit("requestRedraw")})}}else"top"==e.box.type&&m>300?c.get("top",e.box.config,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t}):"sum"==e.box.type&&m>300&&c.get("count",e.box.config,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t})}g(e.dashboard.settings.timeshift),e.box.loading=!0,e.openMenu=function(e,t){originatorEv=t,e(t)},e.backupModel={},e.protocol=n,e.types=r,e.categories=i,e.edit=function(t){e.editMode=!0,e.backupModel=angular.copy(t)},e.save=function(){h.save(),e.backupModel={},e.box.config.type=e.box.type,e.editMode=!1,m=310,f()},e.cancel=function(t){e.box=angular.copy(e.backupModel),e.backupModel={}},e.top=function(){g(e.box.settings.timeshift),c.get("top",e.box.config,!0).success(function(t){console.log(t),e.box.data=t})};var m=(new Date-new Date(d.timestamp))/1e3;isNaN(m)&&(m=310),300>m?e.box.loading=!1:e.box.loading=!0,e.$on("gridster-item-initialized",function(t){("piechart"==e.box.type||"barchart"==e.box.type)&&p(function(){e.$emit("requestRedraw")},500)}),f(),e.$on("refreshData",function(){m=310,f()}),e.$on("saveUser",function(){h.save()}),e.$on("gridster-item-resized",function(e){p(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},100)}),e.showEdit=function(t,n){e.backupModel=angular.copy(e.box),o.show({controller:"editBoxController",templateUrl:"partials/edit.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0,locals:{box:e.box}}).then(function(t){e.save()},function(){e.box=angular.copy(e.backupModel),e.backupModel={}})}}]),app.controller("grid",["$scope","$timeout","$log","$route","user","dashboard",function(e,t,o,n,r,i){e.opt={outerMargin:!1,columns:8,pushing:!0,rowHeight:170,colWidth:"auto",floating:!0,swapping:!0,mobileBreakPoint:933,draggable:{enabled:!1},resizable:{enabled:!1,handles:["n","e","s","w","se","sw"],stop:function(t,o,n){e.$emit("requestRedraw")}}},e.dashboard=i.get(),e.items=e.dashboard.items,e.$on("enableGrid",function(){1==e.opt.resizable.enabled&&e.$broadcast("saveUser"),e.opt.resizable.enabled=!e.opt.resizable.enabled,e.opt.draggable.enabled=!e.opt.draggable.enabled}),e.remove=function(t){e.items.splice(e.items.indexOf(t),1);e.$broadcast("saveUser")},e.$on("addItem",function(){var t={title:"New box",loading:!1,sizeX:1,sizeY:1,content:"",config:{period:0}};e.items.push(t)}),e.$on("reloadDashboard",function(){e.dashboard=i.get(),e.items=e.dashboard.items,console.log(e.dashboard),e.$emit("requestRedraw")})}]),app.controller("editBoxController",["$scope","$mdDialog","box","PROTOCOLS","TYPES","CATEGORIES",function(e,t,o,n,r,i){e.box=o,e.backupModel=angular.copy(o),e.categories=i,e.protocols=n,e.types=r,e.saveAndClose=function(){t.hide()},e.answer=function(e){t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()},e.changeSelector=function(e){}}]),app.controller("addDashboardController",["$scope","$mdDialog","dashboard",function(e,t,o){e.editDashboard=!1,e.saveAndClose=function(e){t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()}}]),app.controller("editDashboardController",["$scope","$rootScope","$mdDialog","dashboard",function(e,t,o,n){e.db=n.settings(),e.editDashboard=!0,e.saveAndClose=function(e){n.update(e),o.hide()},e.deleteDashboard=function(){n["delete"](),t.$broadcast("switchDashboard",0),n.save(),o.hide()},e.cancel=function(e){console.log("Cancelling"),o.cancel()}}]),app.controller("loginController",["$scope","$location","$log","user",function(e,t,o,n){e.title="Login to Nemea Dashboard",e.loginBtn="Login",e.submit=function(o){e.loginBtn="Authenticating...",e.loginBtnDisabled=!0,n.auth(o).success(function(e){t.path("/")}).error(function(t){e.error_mes=t,e.loginBtn="Login",e.loginBtnDisabled=!1})};var r=Trianglify({width:window.innerWidth,height:window.innerHeight,x_colors:"GnBu",y_colors:"GnBu",cell_size:50});console.log(r),document.getElementById("login").appendChild(r.canvas())}]),app.controller("profileController",["$scope","$log","$localStorage","user","dashboard",function(e,t,o,n,r){e.user=n.get(),e.save_btn="Save",e.editUser=function(i){e.save_btn="Processing...",i.settings=r.clean(),n.put(i,!0).success(function(t){o.token=t.jwt,e.err_msg="",e.user=angular.copy(n.get()),e.save_btn="Save"}).error(function(o){e.save_btn="Save",console.log(o),t.error(o.error),e.user.password="",e.err_msg=o.error})}}]),app.controller("usersController",["$scope","api","user","$mdDialog",function(e,t,o,n){o.get(!0).success(function(t){e.people=t}),e.myUsername=function(){var e=o.get();return e.username},e.deleteUser=function(t){console.log(t),o["delete"](t).success(function(t){console.log(t),o.get(!0).success(function(t){e.users=t})})},e.addUser=function(t){e.addUserBox=!0,n.show({controller:"addUserController",templateUrl:"partials/addUser.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0}).then(function(t){console.log(t),o.post(t).success(function(t){console.log(t),o.get(!0).success(function(t){e.users=t})})},function(){})}}]),app.controller("addUserController",["$scope","$mdDialog",function(e,t){e.user={username:"",name:"",surname:"",password:"",settings:[{settings:{title:"Basic",timeshift:"0",interval:"60"},items:[{loading:!1,row:0,config:{period:"24",type:"piechart",metric:"category"},sizeX:4,sizeY:3,col:0,title:"24h shares",type:"piechart",content:"Click the menu icon to select edit"}]}]},e.saveAndClose=function(e){console.log(e),t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()}}]),app.filter("idea",function(){return function(e){var t={};return angular.forEach(e,function(e,o){"_id"!=o&&(e.$date?(console.log(e.$date),t[o]=new Date(e.$date).toISOString().slice(0,19)+"Z"):t[o]=e)}),t}}),app.filter("json2html",["$sce","$filter",function(e,t){return function(o){var n="";return angular.forEach(o,function(e,o){"_id"!=o&&(n+="<div>","object"==typeof e?("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=n+'<div class="sub">'+t("json2html")(e)+"</div>"):("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=e>1e12?n+"<span>"+t("date")(e,"yyyy/MM/dd H:mm:ss")+"</span>":n+"<span>"+e+"</span>"),n+="</div>")}),e.trustAs("html",n)}}]),app.directive("gridsterDynamicHeight",["$timeout",function(e){function t(e,t,o){e.$watch(function(){return t[0].scrollHeight},function(t,o){var n=270,r=n*e.item.sizeY;if(t>r){var i=Math.floor(t/n);e.item.sizeY=i}})}var o={scope:{item:"="},link:t,restrict:"A"};return o}]),app.service("api",["$http","$log","$mdToast","$localStorage","PIECHART","CONFIG",function(e,t,o,n,r,i){var a=i.host+":"+i.port+"/"+i.version+"/events/";this.auth=function(){return n.token},this.config=function(){e.get("http://benefizio.liberouter.org:5555/config").success(function(e){this.addr=e.host+":"+e.port+e.events,n.config=e,alert(e)})},this.get=function(r,i,s,c){return e({url:a+r,method:"GET",params:i,headers:{Authorization:this.auth()}}).success(function(e){return s&&o.show(o.simple().textContent("Data successully loaded").position("top right").hideDelay(3e3).theme("success-toast")),c&&(n.timestamp=new Date),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot load data").position("top right").hideDelay(3e3).theme("error-toast"))})},this.post=function(n,r,i){return e.post(a+n,JSON.stringify(r)).success(function(e){return i&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot fetch data").position("top right").hideDelay(3e3).theme("error-toast"))})},this.put=function(n,r,i){return e.put(a+n,JSON.stringify(r)).success(function(e){return i&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot fetch data").position("top right").hideDelay(3e3).theme("error-toast"))})}}]),app.service("dashboard",["$log","$localStorage","user",function(e,t,o){var n,r=0,i=(t.dashboard,t.dashboard[r]);this.getAll=function(){return t.dashboard},this.get=function(){return t.dashboard[r]},this.settings=function(){return t.dashboard[r].settings},this.active=function(e){return angular.isDefined(e)&&(r=e),r},this.update=function(e){angular.isUndefined(e)?i.settings=0:i.settings=e},this.clean=function(){for(var e=angular.copy(t.dashboard),o=0;o<e.length;o++)for(var n=0;n<e[o].items.length;n++)delete e[o].items[n].data,delete e[o].items[n].options;return e},this.save=function(){var t={settings:this.clean()};return o.put(t).success(function(e){}).error(function(t){e.error(t)})},this.add=function(e){var o={settings:e,items:[{title:"New box",loading:!1,sizeX:1,sizeY:1,content:"Click the menu icon to select edit",config:{period:"0"}}]};return t.dashboard.push(o),t.dashboard.length-1},this["delete"]=function(){return n=t.dashboard.splice(t.dashboard.indexOf(i),1),r=0,n},this["switch"]=function(e){return i=t.dashboard[e],r=e,i},this.reset=function(){r=0,i=t.dashboard[r]}}]),app.directive("sidebarMenu",function(){return{scope:{section:"="},templateUrl:"partials/sidebar-menu.html",controller:["$scope","$mdSidenav","$mdDialog","$location","MENU","user","dashboard",function(e,t,o,n,r,i,a){e.menu=r,e.dashboards=a.getAll(),e.selectedDashboard=a.active(),e.isActive=function(e){return"#"+n.path()==e},e.enable=!0,e.toggleItem=function(){e.toggleBtn="toggled"},e.closeLeft=function(){t("left").toggle()},e.logout=function(){a.reset(),i.logout()},e.addDashboard=function(t){console.log("Adding new dashboard"),o.show({controller:"addDashboardController",templateUrl:"partials/addDashboard.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0}).then(function(t){var o=a.add(t);a.save(),e.$emit("switchDashboard",o),e.selectedDashboard=a.active(o)},function(){})},e.switchDashboard=function(t){e.selectedDashboard=a.active(t),e.$emit("switchDashboard",t)},e.$on("switchDashboard",function(){console.log("switching"),e.selectedDashboard=a.active()})}]}}),app.directive("topbarMenu",function(){return{scope:{section:"="},templateUrl:"partials/topbar-menu.html",controller:["$scope","$mdSidenav",function(e,t){e.toggleLeft=function(){t("left").toggle()}}]}}),app.directive("boxes",function(){return{scope:{section:"="},templateUrl:"partials/boxes.html"}}),app.service("user",["$localStorage","$http","$mdToast","$location","$log","CONFIG",function(e,t,o,n,r,i){var a=i.host+":"+i.port+"/"+i.version+"/users/";this.config=function(){return e.dashboard},this.jwt=function(){var t=e.token,o=t.split(".")[1],n=o.replace("-","+").replace("_","/");return JSON.parse(window.atob(n))},this.auth=function(o){return console.log(a),t.post(a+"auth",angular.toJson(o)).success(function(t){e.token=t.jwt,delete e.dashboard,e.dashboard=t.settings}).error(function(e,t){return console.log(e),console.log(t),e})},this.put=function(n,i){return t({url:a,method:"PUT",data:angular.toJson(n),headers:{Authorization:e.token}}).success(function(e){return i&&o.show(o.simple().textContent("User settings updated").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(e,t){return r.error("Something went wrong sending user data"),o.show(o.simple().textContent("Something went wrong").position("top right").hideDelay(3e3).theme("error-toast")),console.log(e),e})},this.logout=function(){e.token;return t({url:a+"logout",method:"DELETE",headers:{Authorization:e.token}}).success(function(t){n.path("/login"),delete e.token,delete e.dashboard,delete e.timestamp,o.show(o.simple().textContent("Logout successfull").position("top right").hideDelay(3e3))}).error(function(t,r){n.path("/login"),delete e.token,delete e.dashboard,delete e.timestamp,o.show(o.simple().textContent("Logout failed on server side, but you are logged out").position("top right").hideDelay(3e3))})},this.get=function(n){var r=e.token;return n?t({url:a,method:"GET",headers:{Authorization:r}}).success(function(e){return console.log(e),e}).error(function(e,t){o.show(o.simplet().textContent("Cannot fetch users from database").position("top right").hideDelay(3e3).theme("error-toast"))}):this.jwt()},this.post=function(n){var r=e.token;return t({url:a,method:"POST",data:angular.toJson(n),headers:{Authorization:r}}).success(function(e){return e}).error(function(e,t){o.show(o.simplet().textContent("Cannot create user").position("top right").hideDelay(3e3).theme("error-toast"))})},this["delete"]=function(n){var r=e.token;return console.log(n),t({url:a,method:"DELETE",params:{userId:n},headers:{Authorization:r}}).success(function(e){return e}).error(function(e,t){o.show(o.simplet().textContent("Cannot delete user").position("top right").hideDelay(3e3).theme("error-toast"))})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImpzL2FwcC5taW4uanMiLCJjb25zdGFudHMuanMiLCJjb250cm9sbGVycy9ldmVudENvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9ldmVudHNDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvaG9tZUNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9sb2dpbkNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9wcm9maWxlQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3VzZXJzQ29udHJvbGxlci5qcyIsImZpbHRlcnMvaWRlYS5qcyIsImZpbHRlcnMvanNvbjJodG1sLmpzIiwiZGlyZWN0aXZlcy9ncmlkc3RlckR5bmFtaWNIZWlnaHQuanMiLCJzZXJ2aWNlcy9hcGkuanMiLCJzZXJ2aWNlcy9kYXNoYm9hcmQuanMiLCJzZXJ2aWNlcy9tZW51LmpzIiwic2VydmljZXMvdXNlci5qcyJdLCJuYW1lcyI6WyJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRtZFRoZW1pbmdQcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCIkbG9jYWxTdG9yYWdlUHJvdmlkZXIiLCJ3aGVuIiwiY29udHJvbGxlciIsInRlbXBsYXRlVXJsIiwicmVsb2FkT25TZWFyY2giLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwidGhlbWUiLCJwcmltYXJ5UGFsZXR0ZSIsImFjY2VudFBhbGV0dGUiLCJpbnRlcmNlcHRvcnMiLCJwdXNoIiwic2V0S2V5UHJlZml4IiwiJGluamVjdCIsImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmaWx0ZXIiLCJ2YWx1ZSIsInJlcGxhY2UiLCJydW4iLCJ1c2VyIiwiJGxvY2FsU3RvcmFnZSIsIiRsb2NhdGlvbiIsIiRyb290U2NvcGUiLCIkbG9nIiwiJG9uIiwiZXZlbnQiLCJ1bmRlZmluZWQiLCJpbmZvIiwicGF0aCIsImZhY3RvcnkiLCIkaW5qZWN0b3IiLCIkcSIsIm5vdEFsbG93ZWRJbnRlcmNlcHRvciIsInJlc3BvbnNlRXJyb3IiLCJyZXNwb25zZSIsInN0YXR1cyIsImVycm9yIiwicmVqZWN0IiwiY29uc3RhbnQiLCJsb2dpblN1Y2Nlc3MiLCJsb2dpbkZhaWxlZCIsImxvZ291dFN1Y2Nlc3MiLCJzZXNzaW9uVGltZW91dCIsIm5vdEF1dGhlbnRpY2F0ZWQiLCJub3RBdXRob3JpemVkIiwib3B0aW9ucyIsImNoYXJ0IiwidHlwZSIsImhlaWdodCIsIngiLCJkIiwia2V5IiwieSIsInNob3dMYWJlbHMiLCJkb251dCIsInBhZEFuZ2xlIiwiY29ybmVyUmFkaXVzIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwibGFiZWxUaHJlc2hvbGQiLCJsZWdlbmQiLCJtYXJnaW4iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJsZWdlbmRQb3NpdGlvbiIsInRvb2x0aXBDb250ZW50IiwiZSIsImdyYXBoIiwiY29uc29sZSIsImxvZyIsInBpZSIsImRpc3BhdGNoIiwiZWxlbWVudENsaWNrIiwiZGF0ZSIsIkRhdGUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInNldEhvdXJzIiwic2V0TWludXRlcyIsIndpbmRvdyIsImxvY2F0aW9uIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZGF0YSIsImxhYmVsVHlwZSIsImxhYmVsc091dHNpZGUiLCJOdW1iZXIiLCJDb3VudCIsInVzZVZvcm9ub2kiLCJjbGlwRWRnZSIsImR1cmF0aW9uIiwidXNlSW50ZXJhY3RpdmVHdWlkZWxpbmUiLCJ4QXhpcyIsInNob3dNYXhNaW4iLCJ0aWNrRm9ybWF0IiwiZDMiLCJ0aW1lIiwiZm9ybWF0Iiwicm90YXRlTGFiZWxzIiwieUF4aXMiLCJheGlzTGFiZWwiLCJheGlzTGFiZWxEaXN0YW5jZSIsIm11bHRpYmFyIiwiaG91cnMiLCJtaW51dGVzIiwic2xpY2UiLCJ0aXRsZSIsImxpbmsiLCJpdGVtcyIsIiRzY29wZSIsIiRyb3V0ZVBhcmFtcyIsIiRodHRwIiwiYXBpIiwiaWQiLCJzaG93UGxhaW4iLCJnZW8iLCJiYWNrIiwiaGlzdG9yeSIsImdldCIsInN1Y2Nlc3MiLCJTb3VyY2UiLCJUYXJnZXQiLCJJUDQiLCIkcm91dGUiLCJjYXRlZ29yeSIsInNyY19pcCIsInRydF9pcCIsImRlc2MiLCJmbG93c19mcm9tIiwiZmxvd3NfdG8iLCJxdWVyeSIsImZyb20iLCJ0byIsImRlc2NyaXB0aW9uIiwib3JkZXJieSIsImRpciIsImxpbWl0Iiwic3JjaXAiLCJkc3RpcCIsIm9yZGVyQnkiLCJzZWFyY2hUZXh0IiwibG9hZGJ0biIsIm5leHRCdXR0b24iLCJhY3RpdmVGaWx0ZXIiLCJzZWFyY2giLCJyZXNldCIsInJlbG9hZCIsImdldFF1ZXJ5IiwiaXAiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInN1YnN0ciIsImxvYWRJdGVtcyIsInN3aXRjaERpciIsInZhbCIsImRpclZhbCIsImxvYWROZXh0IiwiY29weSIsInNwbGl0IiwidG9fZGF0ZSIsInJlbWFpbmluZyIsInBvcCIsIml0ZW0iLCJlcnIiLCJtc2ciLCJmcm9tX2RhdGUiLCJ1bml4X2RhdGUiLCJzZW5kIiwidG1wX3F1ZXJ5IiwiZXZlbnRzIiwicmVzIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiQ2F0ZWdvcnkiLCJEZXNjcmlwdGlvbiIsIkZsb3dDb3VudCIsImxvZ2ljdmFsdWUiLCJpIiwibGVuZ3RoIiwiZGlyZWN0aXZlIiwicmVxdWlyZSIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwiY3RybCIsIiR2YWxpZGF0b3JzIiwibW9kZWxWYWx1ZSIsInZpZXdWYWx1ZSIsIm5nTW9kZWwiLCIkdGltZW91dCIsIiRpbnRlcnZhbCIsIiRtZERpYWxvZyIsImRhc2hib2FyZCIsImRhc2hib2FyZHMiLCJnZXRBbGwiLCJkYXNoYm9hcmRTZXR0aW5ncyIsInNldHRpbmdzIiwiYWN0aXZlR3JpZCIsInJlZnJlc2hfaW50ZXJ2YWwiLCJpbnRlcnZhbCIsInJlZnJlc2giLCJyZWZyZXNoX2VuYWJsZWQiLCJpc0RlZmluZWQiLCJvcGVuTWVudSIsIiRtZE9wZW5NZW51IiwiZXYiLCJvcmlnaW5hdG9yRXYiLCJhZGRJdGVtIiwiJGJyb2FkY2FzdCIsImVuYWJsZUdyaWQiLCJzdG9wUHJvcGFnYXRpb24iLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJjbGVhckNhY2hlIiwiZGVidWciLCJzZXRJbnRlcnZhbCIsImNhbmNlbCIsInNlbGVjdGVkRGFzaGJvYXJkIiwiYWN0aXZlIiwiZWRpdERhc2hib2FyZCIsImluZGV4IiwiYmFja3VwRGFzaGJvYXJkcyIsInNob3ciLCJwYXJlbnQiLCJkb2N1bWVudCIsImJvZHkiLCJ0YXJnZXRFdmVudCIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJmdWxsc2NyZWVuIiwidGhlbiIsImFuc3dlciIsInNhdmUiLCJQUk9UT0NPTFMiLCJUWVBFUyIsIkNBVEVHT1JJRVMiLCJQSUVDSEFSVCIsIkFSRUEiLCIkbWRNZWRpYSIsInRpbWVTaGlmdCIsIm9mZnNldCIsImJveCIsImJlZ2ludGltZSIsIm5vdyIsInNoaWZ0X3RpbWUiLCJwZXJpb2QiLCJzaGlmdGVkIiwiTWF0aCIsImZsb29yIiwiZW5kdGltZSIsImdldERhdGEiLCJ0aW1lc2hpZnQiLCJzZWxlY3RvciIsImNhY2hlX3RpbWUiLCJtZXRyaWMiLCJjdXN0b21fbWV0cmljIiwibG9hZGluZyIsIiRlbWl0IiwiYmFja3VwTW9kZWwiLCJwcm90b2NvbCIsInR5cGVzIiwiY2F0ZWdvcmllcyIsImVkaXQiLCJlZGl0TW9kZSIsImlzTmFOIiwiZ3JpZHN0ZXIiLCJzaG93RWRpdCIsImxvY2FscyIsIm9wdCIsIm91dGVyTWFyZ2luIiwiY29sdW1ucyIsInB1c2hpbmciLCJyb3dIZWlnaHQiLCJjb2xXaWR0aCIsImZsb2F0aW5nIiwic3dhcHBpbmciLCJtb2JpbGVCcmVha1BvaW50IiwiZHJhZ2dhYmxlIiwiZW5hYmxlZCIsInJlc2l6YWJsZSIsImhhbmRsZXMiLCJzdG9wIiwiJGVsZW1lbnQiLCJ3aWRnZXQiLCJyZW1vdmUiLCJzcGxpY2UiLCJzaXplWCIsInNpemVZIiwiY29udGVudCIsInByb3RvY29scyIsInNhdmVBbmRDbG9zZSIsImhpZGUiLCJjaGFuZ2VTZWxlY3RvciIsInNlbCIsImRiIiwidXBkYXRlIiwiZGVsZXRlRGFzaGJvYXJkIiwibG9naW5CdG4iLCJzdWJtaXQiLCJjcmVkIiwibG9naW5CdG5EaXNhYmxlZCIsImF1dGgiLCJlcnJvcl9tZXMiLCJwYXR0ZXJuIiwiVHJpYW5nbGlmeSIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwieF9jb2xvcnMiLCJ5X2NvbG9ycyIsImNlbGxfc2l6ZSIsImdldEVsZW1lbnRCeUlkIiwiYXBwZW5kQ2hpbGQiLCJjYW52YXMiLCJzYXZlX2J0biIsImVkaXRVc2VyIiwidXNlcl9kYXRhIiwiY2xlYW4iLCJwdXQiLCJlcnJfbXNnIiwicGFzc3dvcmQiLCJwZW9wbGUiLCJteVVzZXJuYW1lIiwidG1wIiwiZGVsZXRlVXNlciIsInVzZXJfaWQiLCJ1c2VycyIsImFkZFVzZXIiLCJhZGRVc2VyQm94IiwicG9zdCIsInVzZXJuYW1lIiwibmFtZSIsInN1cm5hbWUiLCJyb3ciLCJjb2wiLCJpbnB1dCIsImZvckVhY2giLCJ0b0lTT1N0cmluZyIsIiRzY2UiLCIkZmlsdGVyIiwiaHRtbCIsInRydXN0QXMiLCIkd2F0Y2giLCJzY3JvbGxIZWlnaHQiLCJuZXdWYWwiLCJvbGRWYWwiLCJyb3dIZWlnaHRPcHRpb24iLCJkaXYiLCJyZXN0cmljdCIsInNlcnZpY2UiLCIkbWRUb2FzdCIsIkNPTkZJRyIsImFkZHIiLCJ0aGlzIiwiaG9zdCIsInBvcnQiLCJhbGVydCIsInVybCIsInBhcmFtcyIsImNhY2hlIiwibWV0aG9kIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJzaW1wbGUiLCJ0ZXh0Q29udGVudCIsInBvc2l0aW9uIiwiaGlkZURlbGF5IiwiSlNPTiIsInN0cmluZ2lmeSIsImJhY2t1cCIsInVwZGF0ZWREYXNoYm9hcmQiLCJpc1VuZGVmaW5lZCIsImoiLCJhZGQiLCJuZXdEYXNoYm9hcmQiLCJ0bXBEYXNoYm9hcmQiLCJzZWN0aW9uIiwiJG1kU2lkZW5hdiIsIk1FTlUiLCJtZW51IiwiaXNBY3RpdmUiLCJjdXJyZW50IiwiZW5hYmxlIiwidG9nZ2xlSXRlbSIsInRvZ2dsZUJ0biIsImNsb3NlTGVmdCIsInRvZ2dsZSIsImxvZ291dCIsImFkZERhc2hib2FyZCIsIm5ld0luZGV4Iiwic3dpdGNoRGFzaGJvYXJkIiwidG9nZ2xlTGVmdCIsImp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwiYmFzZTY0IiwicGFyc2UiLCJhdG9iIiwidG9Kc29uIiwiYWxsdXNlcnMiLCJkYXRhX3JhdyIsInNpbXBsZXQiLCJ1c2VyRGF0YSIsInVzZXJJZCJdLCJtYXBwaW5ncyI6IkFBSUEsUUFBQUEsUUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUgsRUFDQUksS0FBQSxVQUNBQyxXQUFBLGtCQUNBQyxZQUFBLHFCQUVBRixLQUFBLEtBQ0FDLFdBQUEsaUJBQ0FDLFlBQUEsb0JBRUFGLEtBQUEsU0FDQUMsV0FBQSxpQkFDQUMsWUFBQSxxQkFFQUYsS0FBQSxXQUNBQyxXQUFBLG1CQUNBQyxZQUFBLG9CQUNBQyxnQkFBQSxJQUVBSCxLQUFBLGVBQ0FDLFdBQUEsa0JBQ0FDLFlBQUEscUJBRUFGLEtBQUEscUJBQ0FDLFdBQUEsb0JBQ0FDLFlBQUEsdUJBRUFGLEtBQUEsbUJBQ0FDLFdBQUEsa0JBQ0FDLFlBQUEscUJBRUFFLFdBQ0FDLFdBQUEsV0FHQVIsRUFBQVMsTUFBQSxXQUFBQyxlQUFBLGNBQUFDLGNBQUEsVUFFQVgsRUFBQVMsTUFBQSxpQkFDQVQsRUFBQVMsTUFBQSxlQUVBUixFQUFBVyxhQUFBQyxLQUFBLHlCQUNBWCxFQUNBWSxhQUFBLE9DN0NBaEIsT0FBT2lCLFNBQVcsaUJBQWtCLHFCQUFzQixnQkFBaUIsd0JERDNFLElBQUFDLEtBQUFDLFFBQUFDLE9BQUEsT0FBQSxhQUFBLFVBQUEsYUFBQSxPQUFBLFlBQUEsUUFBQSxZQUVBRixLQUFBbEIsT0FBQUEsUUF5REFrQixJQUFBRyxPQUFBLFVBQUEsV0FDQSxNQUFBLFVBQUFDLEdBQ0EsTUFBQUEsR0FBQUEsRUFBQUMsUUFBQSxLQUFB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QUNBckMsWUFBQSxzQkFDQUMsU0FBQSxhQUNBQyxVQUFBLEtBQ0F6VyxNQUFBIiwiZmlsZSI6ImpzL2FwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2d1aScsIFsnbmdNYXRlcmlhbCcsICduZ1JvdXRlJywgJ25nTWVzc2FnZXMnLCAnbnZkMycsICduZ1N0b3JhZ2UnLCAnbmdNYXAnLCAnZ3JpZHN0ZXInXSk7XG5cbmFwcC5jb25maWcoY29uZmlnKTtcblxuZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyLCAkbWRUaGVtaW5nUHJvdmlkZXIsICRodHRwUHJvdmlkZXIsICRsb2NhbFN0b3JhZ2VQcm92aWRlcikge1xuXHQkcm91dGVQcm92aWRlclxuXHRcdC53aGVuKCcvbG9naW4nLCB7XG5cdFx0XHRjb250cm9sbGVyOiAnbG9naW5Db250cm9sbGVyJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAndmlld3MvbG9naW4uaHRtbCcsXG5cdFx0fSlcblx0XHQud2hlbignLycsIHtcblx0XHRcdGNvbnRyb2xsZXI6ICdob21lQ29udHJvbGxlcicsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2hvbWUuaHRtbCcsXG5cdFx0fSlcblx0XHQud2hlbignL3VzZXInLCB7XG5cdFx0XHRjb250cm9sbGVyOiAndXNlckNvbnRyb2xsZXInLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9sb2dpbi5odG1sJyxcblx0XHR9KVxuICAgICAgICAud2hlbignL2V2ZW50cycsIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgOiAnZXZlbnRzQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6ICd2aWV3cy9ldmVudHMuaHRtbCcsXG4gICAgICAgICAgICByZWxvYWRPblNlYXJjaCA6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvZXZlbnRzLzppZCcsIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdldmVudENvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiAndmlld3MvZXZlbnQuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9zZXR0aW5ncy9wcm9maWxlJywge1xuICAgICAgICAgICAgY29udHJvbGxlciA6ICdwcm9maWxlQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6ICd2aWV3cy9wcm9maWxlLmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvc2V0dGluZ3MvdXNlcnMnLCB7XG4gICAgICAgICAgICBjb250cm9sbGVyIDogJ3VzZXJzQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6ICd2aWV3cy91c2Vycy5odG1sJ1xuICAgICAgICB9KVxuXHRcdC5vdGhlcndpc2Uoe1xuXHRcdFx0cmVkaXJlY3RUbzogJy9sb2dpbidcblx0XHR9KTtcblxuICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpLnByaW1hcnlQYWxldHRlKCdsaWdodC1ibHVlJykuYWNjZW50UGFsZXR0ZSgnb3JhbmdlJyk7XG5cbiAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ3N1Y2Nlc3MtdG9hc3QnKTtcbiAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2Vycm9yLXRvYXN0Jyk7XG5cbiAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdub3RBbGxvd2VkSW50ZXJjZXB0b3InKTtcbiAgICAkbG9jYWxTdG9yYWdlUHJvdmlkZXJcbiAgICAgICAgLnNldEtleVByZWZpeCgnbmQtJyk7XG5cdC8vIGxvY2FsU3RvcmFnZVNlcnZpY2VQcm92aWRlclxuXHQvLyBcdC5zZXRQcmVmaXgoJ25lbWVhLWRhc2hib2FyZCcpXG5cdC8vIFx0Ly9QUk9EVUNUSU9OXG5cdC8vIFx0Ly8uc2V0U3RvcmFnZUNvb2tpZURvbWFpbih3aW5kb3cubG9jYXRpb24pXG5cdC8vIFx0Ly9ERVZcblx0Ly8gXHQuc2V0U3RvcmFnZUNvb2tpZURvbWFpbignJylcblx0Ly8gXHQ7XG5cbi8vXHQkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG59O1xuXG4vL3Rha2UgYWxsIHdoaXRlc3BhY2Ugb3V0IG9mIHN0cmluZ1xuYXBwLmZpbHRlcignbm9zcGFjZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICghdmFsdWUpID8gJycgOiB2YWx1ZS5yZXBsYWNlKC8gL2csICcnKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbi8vIEFsd2F5cyBjaGVjayBmb3IgYSBKV1RcbmFwcC5ydW4oZnVuY3Rpb24odXNlciwgJGxvY2FsU3RvcmFnZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCAkbG9nKSB7XG5cdCRyb290U2NvcGUuJG9uKFwiJGxvY2F0aW9uQ2hhbmdlU3RhcnRcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKCRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRsb2cuaW5mbyhcIm5vIHRva2VuIGZvdW5kLCByZWRpcmVjdGluZyB0byAvbG9naW5cIilcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xuICAgICAgICB9XG4gICAgfSlcbn0pXG5cbi8vIEhUVFAgaW50ZXJjZXB0b3IgaW5qZWN0ZWQgaW4gY29uZmlnXG5hcHAuZmFjdG9yeSgnbm90QWxsb3dlZEludGVyY2VwdG9yJywgZnVuY3Rpb24oJGxvZywgJGxvY2FsU3RvcmFnZSwgJGxvY2F0aW9uLCAkaW5qZWN0b3IsICRxKSB7XG4gICAgdmFyIG5vdEFsbG93ZWRJbnRlcmNlcHRvciA9IHtcbiAgICAgICAgLy8gSW50ZXJjZXB0ICRodHRwIGVycm9yc1xuICAgICAgICByZXNwb25zZUVycm9yIDogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciA0MDEgZXJyb3JcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gNDAxKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5lcnJvcignWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MsIHJlZGlyZWN0aW5nIHRvIC9sb2dpbicpO1xuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBleGlzaXRpbmcgSldUIGZyb20gbG9jYWxTdG9yYWdlIFxuICAgICAgICAgICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl07XG4gICAgICAgICAgICAgICAgLy8gUmVkaXJlY3QgdG8gbG9naW5cbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXR1cm4gcHJvbWlzZSBzbyB3ZSBjYW4gaGFuZGxlIHRoZSBlcnJvciBmdXJ0aGVyXG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm90QWxsb3dlZEludGVyY2VwdG9yO1xufSlcbiIsIlxuY29uZmlnLiRpbmplY3QgPSBbXCIkcm91dGVQcm92aWRlclwiLCBcIiRtZFRoZW1pbmdQcm92aWRlclwiLCBcIiRodHRwUHJvdmlkZXJcIiwgXCIkbG9jYWxTdG9yYWdlUHJvdmlkZXJcIl07dmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdndWknLCBbJ25nTWF0ZXJpYWwnLCAnbmdSb3V0ZScsICduZ01lc3NhZ2VzJywgJ252ZDMnLCAnbmdTdG9yYWdlJywgJ25nTWFwJywgJ2dyaWRzdGVyJ10pO1xuXG5hcHAuY29uZmlnKGNvbmZpZyk7XG5cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlciwgJG1kVGhlbWluZ1Byb3ZpZGVyLCAkaHR0cFByb3ZpZGVyLCAkbG9jYWxTdG9yYWdlUHJvdmlkZXIpIHtcblx0JHJvdXRlUHJvdmlkZXJcblx0XHQud2hlbignL2xvZ2luJywge1xuXHRcdFx0Y29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlcicsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luLmh0bWwnLFxuXHRcdH0pXG5cdFx0LndoZW4oJy8nLCB7XG5cdFx0XHRjb250cm9sbGVyOiAnaG9tZUNvbnRyb2xsZXInLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9ob21lLmh0bWwnLFxuXHRcdH0pXG5cdFx0LndoZW4oJy91c2VyJywge1xuXHRcdFx0Y29udHJvbGxlcjogJ3VzZXJDb250cm9sbGVyJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAndmlld3MvbG9naW4uaHRtbCcsXG5cdFx0fSlcbiAgICAgICAgLndoZW4oJy9ldmVudHMnLCB7XG4gICAgICAgICAgICBjb250cm9sbGVyIDogJ2V2ZW50c0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiAndmlld3MvZXZlbnRzLmh0bWwnLFxuICAgICAgICAgICAgcmVsb2FkT25TZWFyY2ggOiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2V2ZW50cy86aWQnLCB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnZXZlbnRDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogJ3ZpZXdzL2V2ZW50Lmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvc2V0dGluZ3MvcHJvZmlsZScsIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgOiAncHJvZmlsZUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiAndmlld3MvcHJvZmlsZS5odG1sJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL3NldHRpbmdzL3VzZXJzJywge1xuICAgICAgICAgICAgY29udHJvbGxlciA6ICd1c2Vyc0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiAndmlld3MvdXNlcnMuaHRtbCdcbiAgICAgICAgfSlcblx0XHQub3RoZXJ3aXNlKHtcblx0XHRcdHJlZGlyZWN0VG86ICcvbG9naW4nXG5cdFx0fSk7XG5cbiAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKS5wcmltYXJ5UGFsZXR0ZSgnbGlnaHQtYmx1ZScpLmFjY2VudFBhbGV0dGUoJ29yYW5nZScpO1xuXG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdzdWNjZXNzLXRvYXN0Jyk7XG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdlcnJvci10b2FzdCcpO1xuXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnbm90QWxsb3dlZEludGVyY2VwdG9yJyk7XG4gICAgJGxvY2FsU3RvcmFnZVByb3ZpZGVyXG4gICAgICAgIC5zZXRLZXlQcmVmaXgoJ25kLScpO1xuXHQvLyBsb2NhbFN0b3JhZ2VTZXJ2aWNlUHJvdmlkZXJcblx0Ly8gXHQuc2V0UHJlZml4KCduZW1lYS1kYXNoYm9hcmQnKVxuXHQvLyBcdC8vUFJPRFVDVElPTlxuXHQvLyBcdC8vLnNldFN0b3JhZ2VDb29raWVEb21haW4od2luZG93LmxvY2F0aW9uKVxuXHQvLyBcdC8vREVWXG5cdC8vIFx0LnNldFN0b3JhZ2VDb29raWVEb21haW4oJycpXG5cdC8vIFx0O1xuXG4vL1x0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xufTtcblxuLy90YWtlIGFsbCB3aGl0ZXNwYWNlIG91dCBvZiBzdHJpbmdcbmFwcC5maWx0ZXIoJ25vc3BhY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoIXZhbHVlKSA/ICcnIDogdmFsdWUucmVwbGFjZSgvIC9nLCAnJyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4vLyBBbHdheXMgY2hlY2sgZm9yIGEgSldUXG5hcHAucnVuKFtcInVzZXJcIiwgXCIkbG9jYWxTdG9yYWdlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvb3RTY29wZVwiLCBcIiRsb2dcIiwgZnVuY3Rpb24odXNlciwgJGxvY2FsU3RvcmFnZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCAkbG9nKSB7XG5cdCRyb290U2NvcGUuJG9uKFwiJGxvY2F0aW9uQ2hhbmdlU3RhcnRcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKCRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRsb2cuaW5mbyhcIm5vIHRva2VuIGZvdW5kLCByZWRpcmVjdGluZyB0byAvbG9naW5cIilcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xuICAgICAgICB9XG4gICAgfSlcbn1dKVxuXG4vLyBIVFRQIGludGVyY2VwdG9yIGluamVjdGVkIGluIGNvbmZpZ1xuYXBwLmZhY3RvcnkoJ25vdEFsbG93ZWRJbnRlcmNlcHRvcicsIFtcIiRsb2dcIiwgXCIkbG9jYWxTdG9yYWdlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJGluamVjdG9yXCIsIFwiJHFcIiwgZnVuY3Rpb24oJGxvZywgJGxvY2FsU3RvcmFnZSwgJGxvY2F0aW9uLCAkaW5qZWN0b3IsICRxKSB7XG4gICAgdmFyIG5vdEFsbG93ZWRJbnRlcmNlcHRvciA9IHtcbiAgICAgICAgLy8gSW50ZXJjZXB0ICRodHRwIGVycm9yc1xuICAgICAgICByZXNwb25zZUVycm9yIDogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciA0MDEgZXJyb3JcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gNDAxKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5lcnJvcignWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MsIHJlZGlyZWN0aW5nIHRvIC9sb2dpbicpO1xuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBleGlzaXRpbmcgSldUIGZyb20gbG9jYWxTdG9yYWdlIFxuICAgICAgICAgICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl07XG4gICAgICAgICAgICAgICAgLy8gUmVkaXJlY3QgdG8gbG9naW5cbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXR1cm4gcHJvbWlzZSBzbyB3ZSBjYW4gaGFuZGxlIHRoZSBlcnJvciBmdXJ0aGVyXG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm90QWxsb3dlZEludGVyY2VwdG9yO1xufV0pXG5cbmFwcC5jb25zdGFudCgnQVVUSF9FVkVOVFMnLCB7XG4gIGxvZ2luU3VjY2VzczogJ2F1dGgtbG9naW4tc3VjY2VzcycsXG4gIGxvZ2luRmFpbGVkOiAnYXV0aC1sb2dpbi1mYWlsZWQnLFxuICBsb2dvdXRTdWNjZXNzOiAnYXV0aC1sb2dvdXQtc3VjY2VzcycsXG4gIHNlc3Npb25UaW1lb3V0OiAnYXV0aC1zZXNzaW9uLXRpbWVvdXQnLFxuICBub3RBdXRoZW50aWNhdGVkOiAnYXV0aC1ub3QtYXV0aGVudGljYXRlZCcsXG4gIG5vdEF1dGhvcml6ZWQ6ICdhdXRoLW5vdC1hdXRob3JpemVkJ1xufSk7XG5cbmFwcC5jb25zdGFudCgnQ0FURUdPUklFUycsIFsgXCJhbnlcIiwgXCJSZWNvbi5TY2FubmluZ1wiLCBcIkF0dGVtcHQuTG9naW5cIiwgXCJBdmFpbGFiaWxpdHkuRG9TXCIsIFwiQXZhaWxpYmlsaXR5LkREb1NcIl0pO1xuYXBwLmNvbnN0YW50KCdQUk9UT0NPTFMnLCBbIFwidGNwXCIsIFwiZG5zXCIsIFwidWRwXCIgXSk7XG5hcHAuY29uc3RhbnQoJ1RZUEVTJywgW1wiYmFyY2hhcnRcIiwgXCJwaWVjaGFydFwiLCBcInRvcFwiLCBcInN1bVwiXSlcblxuYXBwLmNvbnN0YW50KCdQSUVDSEFSVCcsIHsgXG4gICAgb3B0aW9uczoge1xuICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgdHlwZTogJ3BpZUNoYXJ0JyxcbiAgICAgICAgICAgIGhlaWdodDogMzc1LFxuICAgICAgICAgICAgLy9oZWlnaHQ6IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbnZkMycpLm9mZnNldEhlaWdodCk7IHJldHVybiBOdW1iZXIoNDI1KX0sXG4gICAgICAgICAgICB4OiBmdW5jdGlvbihkKXtyZXR1cm4gZC5rZXlbMF07fSxcbiAgICAgICAgICAgIHk6IGZ1bmN0aW9uKGQpe3JldHVybiBkLng7fSxcbiAgICAgICAgICAgIHNob3dMYWJlbHM6IHRydWUsXG4gICAgICAgICAgICBkb251dCA6IHRydWUsXG4gICAgICAgICAgICBwYWRBbmdsZSA6IDAuMDAsXG4gICAgICAgICAgICBjb3JuZXJSYWRpdXMgOiAxLFxuICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiA1MDAsXG4gICAgICAgICAgICBsYWJlbFRocmVzaG9sZDogMCxcbiAgICAgICAgICAgIC8vY29sb3I6IFsnYmx1ZScsICdncmVlbicsICd5ZWxsb3cnXSxcbiAgICAgICAgICAgIC8vY29sb3I6IFtcIiM0YWM0ZjNcIiwgXCIjOTZkNmJkXCIsIFwiIzBhNTk5ZFwiLCBcIiM4YmEyYzBcIiwgXCIjZjdmY2ZkXCIsXCIjZTVmNWY5XCIsXCIjY2NlY2U2XCIsXCIjOTlkOGM5XCIsXCIjNjZjMmE0XCIsXCIjNDFhZTc2XCIsXCIjMjM4YjQ1XCIsXCIjMDA2ZDJjXCIsXCIjMDA0NDFiXCJdLFxuICAgICAgICAgICAgLy9jb2xvcjogW1wiIzIxOTZGM1wiLCBcIiMwMDk2ODhcIiwgIFwiIzY3M0FCN1wiLCAgXCIjRkY5ODAwXCJdLCBcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIG1hcmdpbjoge1xuICAgICAgICAgICAgICAgICAgICB0b3A6IDUsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IC0xNSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdlbmRQb3NpdGlvbiA6IFwidG9wXCIsXG4gICAgICAgICAgICB0b29sdGlwQ29udGVudCA6IGZ1bmN0aW9uKGtleSwgeCwgeSwgZSwgZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhncmFwaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnT2xhbGFsYSEnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGllIDoge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vY2hhcnRDbGljazogZnVuY3Rpb24oZSkge2NvbnNvbGUubG9nKGUpfSxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudENsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gMTAwMCo2MCo2MCoyNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlLnNldEhvdXJzKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5zZXRNaW51dGVzKDApXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnIy9ldmVudHM/ZmlsdGVyJmRhdGU9JyArIGRhdGUuZ2V0VGltZSgpICsgJyZmcm9tPScgKyBuZXcgRGF0ZSgpLmdldEhvdXJzKCkgKyAnOicgKyBuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKSArICcmY2F0ZWdvcnk9JyArIGUuZGF0YS5rZXlbMF19LFxuICAgICAgICAgICAgICAgICAgICAvL2VsZW1lbnREYmxDbGljazogZnVuY3Rpb24oZSkge2NvbnNvbGUubG9nKFwiZWxlbWVudCBkb3VibGUgY2xpY2tcIil9LFxuICAgICAgICAgICAgICAgICAgICAvL2VsZW1lbnRNb3VzZW92ZXI6IGZ1bmN0aW9uKGUpIHtjb25zb2xlLmxvZyhcImVsZW1lbnQgbW91c2VvdmVyXCIpfSxcbiAgICAgICAgICAgICAgICAgICAgLy9lbGVtZW50TW91c2VvdXQ6IGZ1bmN0aW9uKGUpIHtjb25zb2xlLmxvZyhcImVsZW1lbnQgbW91c2Ugb3V0XCIpfSAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxUeXBlIDogXCJwZXJjZW50XCIsXG4gICAgICAgICAgICAgICAgbGFiZWxzT3V0c2lkZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIC8vc3RhcnRBbmdsZSA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc3RhcnRBbmdsZS8yIC1NYXRoLlBJLzIgfSxcbiAgICAgICAgICAgICAgICAvL2VuZEFuZ2xlIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5lbmRBbmdsZS8yIC1NYXRoLlBJLzIgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cblxuYXBwLnZhbHVlKCdBUkVBJywge1xuICAgIG9wdGlvbnMgOiB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnbXVsdGlCYXJDaGFydCcsXG4gICAgICAgICAgICBoZWlnaHQ6IDQ1MCxcbiAgICAgICAgICAgIG1hcmdpbiA6IHtcbiAgICAgICAgICAgICAgICB0b3A6IDMwLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAyMCxcbiAgICAgICAgICAgICAgICBib3R0b206IDEwMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiA2NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHg6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueCB9LFxuICAgICAgICAgICAgeTogZnVuY3Rpb24oZCkgeyByZXR1cm4gTnVtYmVyKGQuQ291bnQpIH0sXG4gICAgICAgICAgICB1c2VWb3Jvbm9pOiBmYWxzZSxcbiAgICAgICAgICAgIGNsaXBFZGdlOiB0cnVlLFxuICAgICAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgIHVzZUludGVyYWN0aXZlR3VpZGVsaW5lOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXBDb250ZW50IDogZnVuY3Rpb24oa2V5LCB4LCB5LCBlLCBncmFwaCkge3JldHVybihcIkhhXCIpO30sXG4gICAgICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgICAgIHNob3dNYXhNaW46IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpY2tGb3JtYXQ6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLnRpbWUuZm9ybWF0KCclbS8lZCAlSDolTScpKG5ldyBEYXRlKGQpKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcm90YXRlTGFiZWxzIDogLTQ1LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICAgICAgc2hvd01heE1pbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGlja0Zvcm1hdDogZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkMy5mb3JtYXQoJ3MnKShkKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNMYWJlbCA6IFwiRXZlbnRzIENvdW50XCIsXG4gICAgICAgICAgICAgICAgYXhpc0xhYmVsRGlzdGFuY2UgOiAtMjBcbiAgICAgICAgICAgIH0sICBcbiAgICAgICAgICAgIG11bHRpYmFyOiB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2ggOiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRDbGljazogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShlLmRhdGEueCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUuc2V0SG91cnMoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlLnNldE1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnIy9ldmVudHM/ZmlsdGVyJmRhdGU9JyArIGRhdGUuZ2V0VGltZSgpICsgJyZmcm9tPScgKyAoXCIwXCIgKyBob3Vycykuc2xpY2UoLTIpICsgJzonICsgKFwiMFwiICsgbWludXRlcykuc2xpY2UoLTIpICsgJyZjYXRlZ29yeT0nICsgZS5kYXRhLmtleSArICcmZGlyPTEnO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5cblxuYXBwLmNvbnN0YW50KFwiTUVOVVwiLCBbXG5cdC8qe1xuXHRcdFwidGl0bGVcIiA6IFwiRGFzaGJvYXJkXCIsXG4gICAgICAgIFwibGlua1wiIDogXCIjL1wiXG5cdFx0XCJpdGVtc1wiIDogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIlVzZXJzXCIsXG5cdFx0XHRcdFwibGlua1wiXHQ6IFwidXNlclwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIk15IHByb2ZpbGVcIlxuXHRcdFx0fVxuXHRcdF1cblx0fSwqL1xuXHR7XG5cdFx0XCJ0aXRsZVwiIDogXCJFdmVudHNcIixcblx0XHRcImxpbmtcIiBcdDogXCIjL2V2ZW50c1wiXG5cdH0sXG5cdC8qe1xuXHRcdFwidGl0bGVcIiA6IFwiQW5hbHl0aWNzMjNcIixcblx0XHRcIml0ZW1zXCIgOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwidGl0bGVcIiA6IFwiVXNlcnNcIixcblx0XHRcdFx0XCJsaW5rXCIgXHQ6IFwic2V0dGluZ3NcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ0aXRsZVwiIDogXCJNeSBwcm9maWxlXCIsXG5cdFx0XHRcdFwibGlua1wiXHQ6IFwicHJvZmlsZVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIk15IHByb2ZpbGVcIixcblx0XHRcdFx0XCJsaW5rXCJcdDogXCJwcm9maWxlXCJcblx0XHRcdH1cblx0XHRdXG5cblx0fSxcblx0e1xuXHRcdFwidGl0bGVcIiA6IFwiQW5hbHl0aWNzMTIzXCIsXG5cdFx0XCJsaW5rXCIgXHQ6IFwibG9naW5cIlxuXHR9LCovXG5cdHtcblx0XHRcInRpdGxlXCIgOiBcIlNldHRpbmdzXCIsXG5cdFx0XCJpdGVtc1wiIDogW1xuICAgICAgICAgICAge1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIk15IHByb2ZpbGVcIixcblx0XHRcdFx0XCJsaW5rXCJcdDogXCIjL3NldHRpbmdzL3Byb2ZpbGVcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ0aXRsZVwiIDogXCJVc2Vyc1wiLFxuXHRcdFx0XHRcImxpbmtcIiBcdDogXCIjL3NldHRpbmdzL3VzZXJzXCJcblx0XHRcdH0sXG5cdFx0XVxuXHR9XG5dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2V2ZW50Q29udHJvbGxlcicsIFtcIiRzY29wZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiYXBpXCIsIGZ1bmN0aW9uKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgYXBpKSB7XG5cbiAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zO1xuICAgICAgICAkc2NvcGUuc2hvd1BsYWluID0gdHJ1ZTtcblxuICAgICAgICAkc2NvcGUuZ2VvID0gW107XG5cbiAgICAgICAgJHNjb3BlLmJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKVxuICAgICAgICB9XG5cbiAgICAgICAgYXBpLmdldCgnaWQvJyArICRyb3V0ZVBhcmFtc1snaWQnXSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgICAgIC8vdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcblxuICAgICAgICAgICAgaWYgKCgkc2NvcGUuZGF0YS5Tb3VyY2UgIT0gdW5kZWZpbmVkICYmICRzY29wZS5kYXRhLlRhcmdldCAhPSB1bmRlZmluZWQpICYmIFxuICAgICAgICAgICAgICAgICgkc2NvcGUuZGF0YS5Tb3VyY2VbMF0uSVA0ICYmICRzY29wZS5kYXRhLlRhcmdldFswXS5JUDQpKSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCdodHRwOi8vZnJlZWdlb2lwLm5ldC9qc29uLycgKyAkc2NvcGUuZGF0YS5UYXJnZXRbMF0uSVA0WzBdKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbJ3R5cGUnXSA9IFwiVGFyZ2V0XCI7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZW8ucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgLy92YXIgbGF0bG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhkYXRhLmxhdGl0dWRlLCBkYXRhLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vYm91bmRzLmV4dGVuZChsYXRsbmcpO1xuXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJ2h0dHA6Ly9mcmVlZ2VvaXAubmV0L2pzb24vJyArICRzY29wZS5kYXRhLlNvdXJjZVswXS5JUDRbMF0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhWyd0eXBlJ10gPSBcIlNvdXJjZVwiO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2VvLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGxhdGxuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoZGF0YS5sYXRpdHVkZSwgZGF0YS5sb25naXR1ZGUpO1xuICAgICAgICAgICAgICAgICAgICAvL2JvdW5kcy5leHRlbmQobGF0bG5nKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJHNjb3BlLmRhdGEuU291cmNlID09IHVuZGVmaW5lZCB8fCAkc2NvcGUuZGF0YS5Tb3VyY2VbMF0uSVA0ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnaHR0cDovL2ZyZWVnZW9pcC5uZXQvanNvbi8nICsgJHNjb3BlLmRhdGEuVGFyZ2V0WzBdLklQNFswXSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbJ3R5cGUnXSA9IFwiVGFyZ2V0XCI7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZW8ucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJ2h0dHA6Ly9mcmVlZ2VvaXAubmV0L2pzb24vJyArICRzY29wZS5kYXRhLlNvdXJjZVswXS5JUDRbMF0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhWyd0eXBlJ10gPSBcIlNvdXJjZVwiO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2VvLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgXG5cbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2V2ZW50c0NvbnRyb2xsZXInLCBbXCIkc2NvcGVcIiwgXCIkaHR0cFwiLCBcIiRsb2NhdGlvblwiLCBcImFwaVwiLCBcIiRyb3V0ZVwiLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9jYXRpb24sIGFwaSwgJHJvdXRlKSB7XG4gICAgJHNjb3BlLmZpbHRlciA9IHtcbiAgICAgICAgXCJjYXRlZ29yeVwiIDogXCJcIiwgICAgLy8gQ2F0ZWdvcnlcbiAgICAgICAgXCJzcmNfaXBcIiA6IFwiXCIsICAgICAgLy8gU291cmNlIElQXG4gICAgICAgIFwidHJ0X2lwXCIgOiBcIlwiLCAgICAgIC8vIFRhcmdldCBJUFxuICAgICAgICBcImRlc2NcIiA6IFwiXCIsICAgICAgICAvLyBEZXNjcmlwdGlvblxuICAgICAgICBcImZsb3dzX2Zyb21cIiA6IFwiXCIsICAvLyBGbG93Q291bnRcbiAgICAgICAgXCJmbG93c190b1wiIDogXCJcIiwgICAgLy8gRmxvd0NvdW50XG4gICAgICAgIFwiaXRlbXNcIiA6IDEwMCwgICAgICAvLyBMaW1pdCBudW1iZXIgb2YgZGlzcGxheWVkIGl0ZW1zXG4gICAgfTtcbiAgICAkc2NvcGUucXVlcnkgPSB7XG4gICAgICAgIFwiZnJvbVwiIDogXCIxMjowMFwiLFxuICAgICAgICBcInRvXCIgOiBcIlwiLFxuICAgICAgICBcImRhdGVcIiA6IG5ldyBEYXRlKCksXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIiA6IFwiXCIsXG4gICAgICAgIFwiY2F0ZWdvcnlcIiA6IFwiXCIsXG4gICAgICAgIFwib3JkZXJieVwiIDogXCJEZXRlY3RUaW1lXCIsXG4gICAgICAgIFwiZGlyXCIgOiAxLFxuICAgICAgICBcImxpbWl0XCIgOiAxMDAsXG4gICAgICAgIFwic3JjaXBcIiA6IFwiXCIsXG4gICAgICAgIFwiZHN0aXBcIiA6IFwiXCJcbiAgICB9XG5cbiAgICAkc2NvcGUub3JkZXJCeSA9IFtcIkRldGVjdFRpbWVcIiwgXCJDYXRlZ29yeVwiLCBcIkRlc2NyaXB0aW9uXCIsIFwiRmxvd0NvdW50XCJdO1xuICAgICRzY29wZS5zZWFyY2hUZXh0ID0gXCJcIjtcblxuICAgICRzY29wZS5kYXRhID0gW107XG4gICAgJHNjb3BlLmxvYWRidG4gPSBcIkxvYWRcIjtcbiAgICAkc2NvcGUubmV4dEJ1dHRvbiA9IFwiTG9hZCBuZXh0IDEwMCBpdGVtc1wiO1xuICAgICRzY29wZS5hY3RpdmVGaWx0ZXIgPSAkbG9jYXRpb24uc2VhcmNoKCkuZmlsdGVyO1xuXG4gICAgLy8gUkVTRVQgZXZlcnl0aGluZyBpbmNsdWRpbmcgVVJMIHBhcmFtZXRlcnMgYW5kIHJlbG9hZFxuICAgICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKHt9KTtcbiAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgIH1cblxuICAgICRzY29wZS5nZXRRdWVyeSA9IGZ1bmN0aW9uKGlwLCBwYXRoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGlwKTtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSA3KTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSBcIjBcIiArIGRhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICB2YXIgaG91cnMgPSBcIjBcIiArIGRhdGUuZ2V0SG91cnMoKTtcblxuICAgICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgZnJvbSA6IGhvdXJzLnN1YnN0cigtMikgKyAnOicgKyBtaW51dGVzLnN1YnN0cigtMiksIFxuICAgICAgICAgICAgICAgIGRhdGUgOiBkYXRlLFxuICAgICAgICAgICAgICAgIGxpbWl0IDogMTAwLFxuICAgICAgICAgICAgICAgIG9yZGVyYnkgOiBcIkRldGVjdFRpbWVcIixcbiAgICAgICAgICAgICAgICBkaXIgOiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICBpZiAocGF0aCA9PSBcInNyY1wiKSB7XG4gICAgICAgICAgIHF1ZXJ5W1wic3JjaXBcIl0gPSBpcDsgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBxdWVyeVtcImRzdGlwXCJdID0gaXA7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUubG9hZEl0ZW1zKHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAkc2NvcGUuc3dpdGNoRGlyID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT0gLTEgfHwgdmFsKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGlyVmFsID0gXCJEZXNjZW5kaW5nXCI7XG4gICAgICAgICAgICAkc2NvcGUucXVlcnkuZGlyID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZGlyVmFsID0gXCJBc2NlbmRpbmdcIjtcbiAgICAgICAgICAgICRzY29wZS5xdWVyeS5kaXIgPSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLnN3aXRjaERpcigkbG9jYXRpb24uc2VhcmNoKCkuZGlyKTtcblxuICAgICRzY29wZS5sb2FkTmV4dCA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICAgICAgJHNjb3BlLm5leHRCdXR0b24gPSBcIkxvYWRpbmcuLi5cIjtcblxuICAgICAgICBpZiAoJGxvY2F0aW9uLnNlYXJjaCgpLmZpbHRlcikge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5xdWVyeSk7XG4gICAgICAgICAgICBxdWVyeS5mcm9tID0gbmV3IERhdGUodGltZSk7XG4gICAgICAgICAgICBxdWVyeS5kaXIgPSAxO1xuXG4gICAgICAgICAgICBpZiAocXVlcnkudG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgdG8gPSBxdWVyeS50by5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIHZhciB0b19kYXRlID0gbmV3IERhdGUocXVlcnkuZGF0ZSk7XG4gICAgICAgICAgICAgICAgdG9fZGF0ZS5zZXRIb3Vycyh0b19kYXRlLmdldEhvdXJzKCkgKyB0b1swXSk7XG4gICAgICAgICAgICAgICAgdG9fZGF0ZS5zZXRNaW51dGVzKHRvWzFdKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9fZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHF1ZXJ5LnRvID0gdG9fZGF0ZTtcblxuXG4gICAgICAgICAgICBhcGkuZ2V0KCdxdWVyeScsIHF1ZXJ5LCB0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtYWluaW5nID0gZGF0YS5wb3AoKTtcblxuICAgICAgICAgICAgICAgIGZvcihpdGVtIGluIGRhdGEpIHsgICAgXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhLnB1c2goZGF0YVtpdGVtXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5leHRCdXR0b24gPSBcIkxvYWQgbmV4dCAxMDAgaXRlbXNcIjtcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGVyciwgbXNnKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV4dEJ1dHRvbiA9IFwiTG9hZCBuZXh0IDEwMCBpdGVtc1wiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBxdWVyeSA9IHtcbiAgICAgICAgICAgICAgICBcInRvXCIgOiBuZXcgRGF0ZSh0aW1lKSxcbiAgICAgICAgICAgICAgICBcImRpclwiIDogLTFcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBpLmdldCgncXVlcnknLCBxdWVyeSwgdHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlbWFpbmluZyA9IGRhdGEucG9wKCk7XG4gICAgICAgICAgICAgICAgZm9yKGl0ZW0gaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YS5wdXNoKGRhdGFbaXRlbV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUubmV4dEJ1dHRvbiA9IFwiTG9hZCBuZXh0IDEwMCBpdGVtc1wiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIsIG1zZykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5leHRCdXR0b24gPSBcIkxvYWQgbmV4dCAxMDAgaXRlbXNcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUubG9hZEl0ZW1zID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgICAgICAgJHNjb3BlLmxvYWRidG4gPSBcIkxvYWRpbmcuLi5cIjtcbiAgICAgICAgdmFyIGZyb20gPSBxdWVyeS5mcm9tLnNwbGl0KCc6Jyk7XG4gICAgICAgIHZhciBmcm9tX2RhdGUgPSBuZXcgRGF0ZShxdWVyeS5kYXRlKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhxdWVyeSlcbiAgICAgICAgXG4gICAgICAgIGZyb21fZGF0ZS5zZXRIb3Vycyhmcm9tWzBdKTtcbiAgICAgICAgZnJvbV9kYXRlLnNldE1pbnV0ZXMoZnJvbVsxXSk7XG5cbiAgICAgICAgdmFyIHVuaXhfZGF0ZSA9IGFuZ3VsYXIuY29weShxdWVyeS5kYXRlKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb3B5aW5nIGRhdGVcIik7XG4gICAgICAgIFxuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdmaWx0ZXInLCB0cnVlKTtcbiAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnZnJvbScsIHF1ZXJ5LmZyb20pO1xuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdkYXRlJywgdW5peF9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2xpbWl0JywgcXVlcnkubGltaXQpO1xuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdvcmRlcmJ5JywgcXVlcnkub3JkZXJieSk7XG4gICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2RpcicsIHF1ZXJ5LmRpcik7XG4gICAgICAgXG5cbiAgICAgICAgaWYgKHF1ZXJ5LnRvKSB7XG4gICAgICAgICAgICB2YXIgdG8gPSBxdWVyeS50by5zcGxpdCgnOicpO1xuICAgICAgICAgICAgdmFyIHRvX2RhdGUgPSBuZXcgRGF0ZShxdWVyeS5kYXRlKTtcbiAgICAgICAgICAgIHRvX2RhdGUuc2V0SG91cnModG9bMF0pO1xuICAgICAgICAgICAgdG9fZGF0ZS5zZXRNaW51dGVzKHRvWzFdKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3RvJywgcXVlcnkudG8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRvX2RhdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5LmRlc2NyaXB0aW9uICE9IFwiXCIpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2Rlc2NyaXB0aW9uJywgcXVlcnkuZGVzY3JpcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXVlcnkuZGVzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5LmNhdGVnb3J5ICE9IFwiXCIpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2NhdGVnb3J5JywgcXVlcnkuY2F0ZWdvcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXVlcnkuY2F0ZWdvcnkgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5LnNyY2lwICE9IFwiXCIpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3NyY2lwJywgcXVlcnkuc3JjaXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaChcInNyY2lwXCIsIG51bGwpO1xuICAgICAgICAgICAgcXVlcnkuc3JjaXAgPSBudWxsO1xuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChxdWVyeS5kc3RpcCAhPSBcIlwiKSB7XG4gICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdkc3RpcCcsIHF1ZXJ5LmRzdGlwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goXCJkc3RpcFwiLCBudWxsKTtcbiAgICAgICAgICAgIHF1ZXJ5LmRzdGlwID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZW5kID0ge1xuICAgICAgICAgICAgXCJmcm9tXCIgOiBmcm9tX2RhdGUsXG4gICAgICAgICAgICBcInRvXCIgOiB0b19kYXRlLFxuICAgICAgICAgICAgXCJjYXRlZ29yeVwiIDogcXVlcnkuY2F0ZWdvcnksXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCIgOiBxdWVyeS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIFwibGltaXRcIiA6IHF1ZXJ5LmxpbWl0LFxuICAgICAgICAgICAgXCJvcmRlcmJ5XCIgOiBxdWVyeS5vcmRlcmJ5LFxuICAgICAgICAgICAgXCJkaXJcIiA6IHF1ZXJ5LmRpcixcbiAgICAgICAgICAgIFwic3JjaXBcIiA6IHF1ZXJ5LnNyY2lwLFxuICAgICAgICAgICAgXCJkc3RpcFwiIDogcXVlcnkuZHN0aXBcbiAgICAgICAgfVxuICAgICAgICBhcGkuZ2V0KCdxdWVyeScsIHNlbmQsIHRydWUpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0JHNjb3BlLnJlbWFpbmluZyA9IGRhdGEucG9wKCk7Ly9bZGF0YS5sZW5ndGggLSAxXSlcblx0XHRcdCRzY29wZS5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICRzY29wZS5sb2FkYnRuID0gXCJMb2FkXCJcblx0ICAgIH0pLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRidG4gPSBcIkxvYWRcIjsgICAgXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBpZiAoJGxvY2F0aW9uLnNlYXJjaCgpLmZpbHRlcikge1xuICAgICAgICAvLyBRdWVyeSBmaWx0ZXIgaXMgc2V0LCBhcHBseSBpdFxuICAgICAgICBcbiAgICAgICAgdmFyIHRtcF9xdWVyeSA9IGFuZ3VsYXIuY29weSgkbG9jYXRpb24uc2VhcmNoKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlyc3QgY29udmVydCBVTklYIFRpbWVzdGFtcCB0byBEYXRlXG4gICAgICAgIHRtcF9xdWVyeVsnZGF0ZSddID0gbmV3IERhdGUoTnVtYmVyKHRtcF9xdWVyeVsnZGF0ZSddKSk7XG4gICAgICAgIFxuICAgICAgICAkc2NvcGUucXVlcnkgPSB0bXBfcXVlcnk7XG4gICAgICAgIFxuICAgICAgICAvLyBGZXRjaCBpdGVtc1xuICAgICAgICAkc2NvcGUubG9hZEl0ZW1zKCRzY29wZS5xdWVyeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmV0Y2ggMTAwIHJlY2VudCBldmVudHNcbiAgICAgICAgYXBpLmdldChcIjEwMFwiKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmV2ZW50cyA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBpZiAoJHNjb3BlLmZpbHRlci5zcmNfaXAgIT0gXCJcIil7XG4gICAgICAgICAgICBpZiAoXCJTb3VyY2VcIiBpbiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiSVA0XCIgaW4gaXRlbS5Tb3VyY2VbMF0gJiYgXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uU291cmNlWzBdLklQNFswXS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHNjb3BlLmZpbHRlci5zcmNfaXAudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHNjb3BlLmZpbHRlci50cnRfaXAgIT0gXCJcIil7XG4gICAgICAgICAgICBpZiAoXCJUYXJnZXRcIiBpbiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiSVA0XCIgaW4gaXRlbS5UYXJnZXRbMF0gJiYgXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uVGFyZ2V0WzBdLklQNFswXS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHNjb3BlLmZpbHRlci50cnRfaXAudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzY29wZS5maWx0ZXIuY2F0ZWdvcnkgIT0gXCJcIikge1xuICAgICAgICAgICAgaWYgKGl0ZW0uQ2F0ZWdvcnlbMF0udG9Mb3dlckNhc2UoKS5pbmRleE9mKCRzY29wZS5maWx0ZXIuY2F0ZWdvcnkudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkc2NvcGUuZmlsdGVyLmRlc2MgIT0gXCJcIikge1xuICAgICAgICAgICAgaWYgKGl0ZW0uRGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKS5pbmRleE9mKCRzY29wZS5maWx0ZXIuZGVzYy50b0xvd2VyQ2FzZSgpKSA+IC0xKVxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKDEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRzY29wZS5maWx0ZXIuZmxvd3NfZnJvbSAhPSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5GbG93Q291bnQgPiBOdW1iZXIoJHNjb3BlLmZpbHRlci5mbG93c19mcm9tKSlcbiAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkc2NvcGUuZmlsdGVyLmZsb3dzX3RvICE9IFwiXCIpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLkZsb3dDb3VudCA8IE51bWJlcigkc2NvcGUuZmlsdGVyLmZsb3dzX3RvKSlcbiAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2dpY3ZhbHVlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxvZ2ljdmFsdWUgPSBsb2dpY3ZhbHVlICogcmVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dpY3ZhbHVlID09IDEgPyB0cnVlIDogZmFsc2U7XG5cbiAgICB9XG5cbn1dKTtcblxuYXBwLmRpcmVjdGl2ZSgndmFsaWRhdGVIb3VycycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB0byA9IFtdO1xuICAgIHZhciBmcm9tID0gW107XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgICAgICAgIGN0cmwuJHZhbGlkYXRvcnMudGltZSA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChhdHRycy5uZ01vZGVsID09IFwicXVlcnkuZnJvbVwiICYmIHZpZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gdmlld1ZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2aWV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSB2aWV3VmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG8ubGVuZ3RoID09IDIgfHwgZnJvbS5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgIGlmICh0b1swXSA8IGZyb21bMF0gfHwgKHRvWzBdIDw9IGZyb21bMF0gJiYgdG9bMV0gPCBmcm9tWzFdKSB8fFxuICAgICAgICAgICAgICAgICAgICB0b1swXSA8IDAgfHwgdG9bMF0gPiAyMyB8fCB0b1sxXSA8IDAgfHwgdG9bMV0gPiA1OSB8fCBmcm9tWzBdIDwgMCB8fCBmcm9tWzBdID4gMjMgfHwgZnJvbVsxXSA8IDAgfHwgZnJvbVsxXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmFwcC5jb250cm9sbGVyKCdob21lQ29udHJvbGxlcicsIFtcIiRzY29wZVwiLCBcInVzZXJcIiwgXCIkdGltZW91dFwiLCBcIiRpbnRlcnZhbFwiLCBcIiRsb2dcIiwgXCIkbG9jYWxTdG9yYWdlXCIsIFwiJHJvdXRlXCIsIFwiJG1kRGlhbG9nXCIsIFwiZGFzaGJvYXJkXCIsIGZ1bmN0aW9uKCRzY29wZSwgdXNlciwgJHRpbWVvdXQsICRpbnRlcnZhbCwgJGxvZywgJGxvY2FsU3RvcmFnZSwgJHJvdXRlLCAkbWREaWFsb2csIGRhc2hib2FyZCkge1xuICAgIFxuICAgICRzY29wZS5kYXNoYm9hcmRzID0gZGFzaGJvYXJkLmdldEFsbCgpO1xuICAgICRzY29wZS5kYXNoYm9hcmRTZXR0aW5ncyA9IGRhc2hib2FyZC5zZXR0aW5ncygpO1xuXG4gICAgJHNjb3BlLmFjdGl2ZUdyaWQgPSBmYWxzZTtcbiAgICAkc2NvcGUucmVmcmVzaF9pbnRlcnZhbCA9ICRzY29wZS5kYXNoYm9hcmRTZXR0aW5ncy5pbnRlcnZhbDtcbiAgICBcbiAgICAvLyBTdG9yZSBpbnRlcnZhbCBJRFxuICAgIHZhciByZWZyZXNoID0gdW5kZWZpbmVkO1xuICAgICRzY29wZS5yZWZyZXNoX2VuYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChyZWZyZXNoKTtcblxuICAgICRzY29wZS5vcGVuTWVudSA9IGZ1bmN0aW9uKCRtZE9wZW5NZW51LCBldikge1xuICAgICAgICBvcmlnaW5hdG9yRXYgPSBldjtcbiAgICAgICAgJG1kT3Blbk1lbnUoZXYpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuYWRkSXRlbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnYWRkSXRlbScpO1xuICAgIH1cblxuICAgICRzY29wZS5lbmFibGVHcmlkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFbmFibGUgZ3JpZCcpXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdlbmFibGVHcmlkJyk7XG4gICAgICAgICRzY29wZS5hY3RpdmVHcmlkID0gISRzY29wZS5hY3RpdmVHcmlkO1xuICAgIH1cbiAgICAkc2NvcGUuJG9uKCdyZXF1ZXN0UmVkcmF3JywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZXF1ZXN0IGFjY2VwdGVkXCIpO1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkbG9nLmRlYnVnKFwiZGVsZXRpbmcgdGltZXN0YW1wXCIpXG4gICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlWyd0aW1lc3RhbXAnXTtcbiAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgIH1cblxuICAgICRzY29wZS5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQocmVmcmVzaCkpIHtcbiAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocmVmcmVzaCk7XG4gICAgICAgICAgICByZWZyZXNoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb2FkY2FzdCBmYWlsZWQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVmcmVzaCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5jbGVhckNhY2hlKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb2FkY2FzdCcpXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3JlZnJlc2hEYXRhJyk7XG4gICAgICAgICAgICB9LCAkc2NvcGUucmVmcmVzaF9pbnRlcnZhbCoxMDAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5yZWZyZXNoX2VuYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChyZWZyZXNoKVxuXG4gICAgfVxuXG4gICAgXG5cbiAgICAkc2NvcGUuc2VsZWN0ZWREYXNoYm9hcmQgPSBkYXNoYm9hcmQuYWN0aXZlKCk7XG5cbiAgICAkc2NvcGUuZWRpdERhc2hib2FyZCA9IGZ1bmN0aW9uKGV2LCBpbmRleCkge1xuICAgICAgICAvLyBNYWtlIGEgYmFja3VwIGNvcHkgb2YgY3VycmVudCBkYXNoYm9hcmRzXG4gICAgICAgICRzY29wZS5iYWNrdXBEYXNoYm9hcmRzID0gYW5ndWxhci5jb3B5KCRzY29wZS5kYXNoYm9hcmRzKTtcblxuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBcImVkaXREYXNoYm9hcmRDb250cm9sbGVyXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkZERhc2hib2FyZC5odG1sJyxcbiAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHRydWUsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGFuc3dlcikge1xuICAgICAgICAgICAgZGFzaGJvYXJkLnNhdmUoKTtcbiAgICAgICAgICAgICRzY29wZS5yZWZyZXNoX2ludGVydmFsID0gJHNjb3BlLmRhc2hib2FyZFNldHRpbmdzLmludGVydmFsO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXNoYm9hcmRzID0gJHNjb3BlLmJhY2t1cERhc2hib2FyZHM7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuYmFja3VwRGFzaGJvYXJkcyk7XG4gICAgICAgICAgICAkc2NvcGUuYmFja3VwRGFzaGJvYXJkcyA9IHt9O1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUuZGFzaGJvYXJkcylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmV2ZXJ0aW5nXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qJHNjb3BlLiRvbignYWRkRGFzaGJvYXJkJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBZGRpbmcgbmV3IGRhc2hib2FyZFwiKTtcbiAgICAgICAgY29uc29sZS5sb2coZXYpO1xuXG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhZGREYXNoYm9hcmRDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYWRkRGFzaGJvYXJkLmh0bWwnLFxuICAgICAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG4gICAgICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOnRydWUsXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgICAgIC8vdmFyIG5ld0luZGV4ID0gZGFzaGJvYXJkLmFkZChhbnN3ZXIpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhuZXdJbmRleClcbiAgICAgICAgICAgIGRhc2hib2FyZC5zYXZlKCk7XG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc3dpdGNoRGFzaGJvYXJkJywgbmV3SW5kZXgpO1xuICAgICAgICAgICAgLypkYXNoYm9hcmQuc3dpdGNoKG5ld0luZGV4KTtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhc2hib2FyZCA9IG5ld0luZGV4O1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3JlbG9hZERhc2hib2FyZCcpOyAqXG4gICAgICAgIH0sIGZ1bmN0aW9uKCkgeyAvLyBjYW5jZWxcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH0pOyovXG5cbiAgICAkc2NvcGUuJG9uKCdzd2l0Y2hEYXNoYm9hcmQnLCBmdW5jdGlvbihldiwgaW5kZXgpIHtcbiAgICAgICAgZGVsZXRlICRsb2NhbFN0b3JhZ2VbJ3RpbWVzdGFtcCddO1xuICAgICAgICBkYXNoYm9hcmQuc3dpdGNoKGluZGV4KVxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWREYXNoYm9hcmQgPSBkYXNoYm9hcmQuYWN0aXZlKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coKVxuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgncmVsb2FkRGFzaGJvYXJkJyk7XG4gICAgfSk7XG4gICAgXG5cblxufV0pO1xuXG5hcHAuY29udHJvbGxlcignYm94JywgW1wiJHNjb3BlXCIsIFwiJGxvZ1wiLCBcIiRtZERpYWxvZ1wiLCBcIlBST1RPQ09MU1wiLCBcIlRZUEVTXCIsIFwiQ0FURUdPUklFU1wiLCBcIlBJRUNIQVJUXCIsIFwiQVJFQVwiLCBcImFwaVwiLCBcInVzZXJcIiwgXCIkbWRNZWRpYVwiLCBcIiRsb2NhbFN0b3JhZ2VcIiwgXCIkdGltZW91dFwiLCBcImRhc2hib2FyZFwiLCBmdW5jdGlvbigkc2NvcGUsICRsb2csICRtZERpYWxvZywgUFJPVE9DT0xTLCBUWVBFUywgQ0FURUdPUklFUywgUElFQ0hBUlQsIEFSRUEsIGFwaSwgdXNlciwgJG1kTWVkaWEsICRsb2NhbFN0b3JhZ2UsICR0aW1lb3V0LCBkYXNoYm9hcmQpe1xuICAgIFxuICAgIGZ1bmN0aW9uIHRpbWVTaGlmdChvZmZzZXQpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhvZmZzZXQpXG4gICAgICAgIG9mZnNldCA9IGFuZ3VsYXIuaXNEZWZpbmVkKG9mZnNldCkgPyBvZmZzZXQgOiAwO1xuICAgICAgICAkc2NvcGUuYm94LmNvbmZpZy5iZWdpbnRpbWUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc2hpZnRfdGltZSA9IChOdW1iZXIob2Zmc2V0KSArIE51bWJlcigkc2NvcGUuYm94LmNvbmZpZy5wZXJpb2QpKSo2MCo2MCoxMDAwO1xuICAgICAgICAgICAgdmFyIHNoaWZ0ZWQgPSBub3cuZ2V0VGltZSgpIC0gc2hpZnRfdGltZTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHNoaWZ0ZWQvMTAwMCk7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgJHNjb3BlLmJveC5jb25maWcuZW5kdGltZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICBub3cuc2V0VGltZShub3cuZ2V0VGltZSgpIC0gTnVtYmVyKG9mZnNldCkqNjAqNjAqMTAwMCk7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihub3cvMTAwMCk7XG4gICAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgdGltZVNoaWZ0KCRzY29wZS5kYXNoYm9hcmQuc2V0dGluZ3MudGltZXNoaWZ0KTtcblxuICAgICRzY29wZS5ib3gubG9hZGluZyA9IHRydWU7XG4gICAgICAgIFxuICAgICRzY29wZS5vcGVuTWVudSA9IGZ1bmN0aW9uKCRtZE9wZW5NZW51LCBldikge1xuICAgICAgICBvcmlnaW5hdG9yRXYgPSBldjtcbiAgICAgICAgJG1kT3Blbk1lbnUoZXYpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuYmFja3VwTW9kZWwgPSB7fTtcblxuICAgICRzY29wZS5wcm90b2NvbCA9IFBST1RPQ09MUztcbiAgICAkc2NvcGUudHlwZXMgPSBUWVBFUztcbiAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IENBVEVHT1JJRVM7XG4gICAgXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEVkaXQgbW9kZSBoYW5kbGluZ1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFRyaWdnZXIgZWRpdGluZyBtb2RlIGFuZCBzYXZlIGN1cnJlbnQgc3RhdGVcbiAgICAkc2NvcGUuZWRpdCA9IGZ1bmN0aW9uKGJveCkge1xuICAgICAgICAkc2NvcGUuZWRpdE1vZGUgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuYmFja3VwTW9kZWwgPSBhbmd1bGFyLmNvcHkoYm94KTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIGNoYW5nZXMgYW5kIGRpc2FibGUgZWRpdCBtb2RlXG4gICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZGFzaGJvYXJkLnNhdmUoKTsgXG5cbiAgICAgICAgJHNjb3BlLmJhY2t1cE1vZGVsID0ge307XG5cbiAgICAgICAgJHNjb3BlLmJveC5jb25maWcudHlwZSA9ICRzY29wZS5ib3gudHlwZTtcbiAgICAgICAgXG4gICAgICAgIC8vIERpc2FibGUgZWRpdCBtb2RlXG4gICAgICAgICRzY29wZS5lZGl0TW9kZSA9IGZhbHNlO1xuXG4gICAgICAgIGNhY2hlX3RpbWUgPSAzMDAgKyAxMDtcblxuICAgICAgICAvLyBHZXQgcmVxdWlyZWQgZGF0YVxuICAgICAgICBnZXREYXRhKCk7XG4gICAgfVxuXG4gICAgLy8gUmV2ZXJ0IHRvIG9yaWdpbmFsIGFuZCBkaXNhYmxlIGVkaXQgbW9kZVxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgJHNjb3BlLmJveCA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYmFja3VwTW9kZWwpO1xuICAgICAgICAkc2NvcGUuYmFja3VwTW9kZWwgPSB7fTtcbiAgICB9XG4gICAgXG4gICAgJHNjb3BlLnRvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aW1lU2hpZnQoJHNjb3BlLmJveC5zZXR0aW5ncy50aW1lc2hpZnQpXG4gICAgICAgIGFwaS5nZXQoJ3RvcCcsICRzY29wZS5ib3guY29uZmlnLCB0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgJHNjb3BlLmJveC5kYXRhID0gZGF0YTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB2YXIgY2FjaGVfdGltZSA9IChuZXcgRGF0ZSgpIC0gbmV3IERhdGUoJGxvY2FsU3RvcmFnZVsndGltZXN0YW1wJ10pKS8xMDAwO1xuICAgIGlmIChpc05hTihjYWNoZV90aW1lKSlcbiAgICAgICAgY2FjaGVfdGltZSA9IDMwMCArIDEwO1xuXG4gICAgLy8gU2hvdyBsb2FkaW5nIGluZGljYXRvclxuICAgIGlmIChjYWNoZV90aW1lIDwgMzAwKSB7XG4gICAgICAgICRzY29wZS5ib3gubG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmJveC5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnRGF0YSBpcyBub3QgY2FjaGVkLCByZWRyYXcnKVxuICAgIH1cblxuICAgICRzY29wZS4kb24oJ2dyaWRzdGVyLWl0ZW0taW5pdGlhbGl6ZWQnLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmICgkc2NvcGUuYm94LnR5cGUgPT0gJ3BpZWNoYXJ0JyB8fCAkc2NvcGUuYm94LnR5cGUgPT0gJ2JhcmNoYXJ0Jykge1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7ICRzY29wZS4kZW1pdCgncmVxdWVzdFJlZHJhdycpO30sIDUwMCk7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICAgICAgdGltZVNoaWZ0KCRzY29wZS5kYXNoYm9hcmQuc2V0dGluZ3MudGltZXNoaWZ0KTtcbiAgICAgICAgaWYgKCRzY29wZS5ib3gudHlwZSA9PSBcInBpZWNoYXJ0XCIgfHwgJHNjb3BlLmJveC50eXBlID09IFwiYmFyY2hhcnRcIikge1xuICAgICAgICAgICAgLy8gVGhlIGJveCBpcyBhIGNoYXJ0XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmJveC50eXBlID09ICdwaWVjaGFydCcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYm94Lm9wdGlvbnMgPSBQSUVDSEFSVC5vcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRzY29wZS5ib3gudHlwZSA9PSAnYmFyY2hhcnQnKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUuYm94LnRpdGxlICsgXCI6IFwiICsgJHNjb3BlLmJveC5zZWxlY3RvcilcbiAgICAgICAgICAgICAgICAkc2NvcGUuYm94Lm9wdGlvbnMgPSBhbmd1bGFyLmNvcHkoQVJFQS5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmJveC5zZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYm94Lm9wdGlvbnMuY2hhcnQueUF4aXMuYXhpc0xhYmVsID0gXCJGbG93IENvdW50XCI7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ib3gub3B0aW9ucy5jaGFydC55ID0gZnVuY3Rpb24oZCkgeyByZXR1cm4gTnVtYmVyKGQuRmxvd0NvdW50KX0gXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJveC5vcHRpb25zLmNoYXJ0LnlBeGlzLmF4aXNMYWJlbCA9IFwiRXZlbnRzIENvdW50XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICBcbiAgICAgICAgICAgICRzY29wZS5ib3guY29uZmlnLnR5cGUgPSAkc2NvcGUuYm94LnR5cGU7XG5cbiAgICAgICAgICAgIGlmIChjYWNoZV90aW1lID4gMzAwKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmJveC5jb25maWcpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYm94LmNvbmZpZy5tZXRyaWMgPT0gXCJjdXN0b21cIikge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeS5tZXRyaWMgPSBxdWVyeS5jdXN0b21fbWV0cmljO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcihpdGVtIGluIHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHF1ZXJ5W2l0ZW1dID09IFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVtpdGVtXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocXVlcnkpXG4gICAgICAgICAgICAgICAgYXBpLmdldCgnYWdnJywgcXVlcnksIGZhbHNlLCB0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJveC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ib3guZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncmVxdWVzdFJlZHJhdycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5ib3gudHlwZSA9PSAndG9wJyAmJiBjYWNoZV90aW1lID4gMzAwKSB7XG4gICAgICAgICAgICBhcGkuZ2V0KCd0b3AnLCAkc2NvcGUuYm94LmNvbmZpZywgZmFsc2UsIHRydWUpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5ib3gubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICRzY29wZS5ib3guZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5ib3gudHlwZSA9PSAnc3VtJyAmJiBjYWNoZV90aW1lID4gMzAwKSB7XG4gICAgICAgICAgICBhcGkuZ2V0KCdjb3VudCcsICRzY29wZS5ib3guY29uZmlnLCBmYWxzZSwgdHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmJveC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmJveC5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0RGF0YSgpO1xuXG5cbiAgICAkc2NvcGUuJG9uKCdyZWZyZXNoRGF0YScsIGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgLy9jb25zb2xlLmxvZygncmVmcmVzaGluZycpOyBcbiAgICAgICAgY2FjaGVfdGltZSA9IDMwMCsxMDsgXG4gICAgICAgIGdldERhdGEoKTtcbiAgICB9KVxuIFxuICAgICRzY29wZS4kb24oJ3NhdmVVc2VyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGRhc2hib2FyZC5zYXZlKCk7IFxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiRvbignZ3JpZHN0ZXItaXRlbS1yZXNpemVkJywgZnVuY3Rpb24oZ3JpZHN0ZXIpIHtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJyZXF1ZXN0IGFjY2VwdGVkXCIpO1xuICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgICB9LCAxMDApO1xuICAgIH0pXG5cblxuICAgICRzY29wZS5zaG93RWRpdCA9IGZ1bmN0aW9uKGV2LCBib3gpIHtcbiAgICAgICAgJHNjb3BlLmJhY2t1cE1vZGVsID0gYW5ndWxhci5jb3B5KCRzY29wZS5ib3gpO1xuXG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdlZGl0Qm94Q29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2VkaXQuaHRtbCcsXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6dHJ1ZSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHRydWUsXG4gICAgICAgICAgICBsb2NhbHM6IHtcbiAgICAgICAgICAgICAgICBib3g6ICRzY29wZS5ib3hcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGFuc3dlcikge1xuICAgICAgICAgICAgJHNjb3BlLnNhdmUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7IC8vIGNhbmNlbFxuICAgICAgICAgICAgJHNjb3BlLmJveCA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYmFja3VwTW9kZWwpO1xuICAgICAgICAgICAgJHNjb3BlLmJhY2t1cE1vZGVsID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgfTtcblxuICBcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2dyaWQnLCBbXCIkc2NvcGVcIiwgXCIkdGltZW91dFwiLCBcIiRsb2dcIiwgXCIkcm91dGVcIiwgXCJ1c2VyXCIsIFwiZGFzaGJvYXJkXCIsIGZ1bmN0aW9uKCRzY29wZSwgJHRpbWVvdXQsICRsb2csICRyb3V0ZSwgdXNlciwgZGFzaGJvYXJkKSB7XG4gICAgJHNjb3BlLm9wdCA9IHtcbiAgICAgICAgb3V0ZXJNYXJnaW46IGZhbHNlLFxuICAgICAgICBjb2x1bW5zOiA4LFxuICAgICAgICBwdXNoaW5nOiB0cnVlLFxuICAgICAgICByb3dIZWlnaHQ6IDE3MCxcbiAgICAgICAgY29sV2lkdGggOiAnYXV0bycsXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxuICAgICAgICBzd2FwcGluZzogdHJ1ZSxcbiAgICAgICAgbW9iaWxlQnJlYWtQb2ludDogOTMzLFxuICAgICAgICBkcmFnZ2FibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICByZXNpemFibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaGFuZGxlczogWyduJywgJ2UnLCAncycsICd3JywgJ3NlJywgJ3N3J10sXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbihldmVudCwgJGVsZW1lbnQsIHdpZGdldCkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZXNpemUgZW5kXCIpO1xuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncmVxdWVzdFJlZHJhdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmRhc2hib2FyZCA9IGRhc2hib2FyZC5nZXQoKTtcbiAgICAkc2NvcGUuaXRlbXMgPSAkc2NvcGUuZGFzaGJvYXJkLml0ZW1zO1xuICAgIC8vY29uc29sZS5sb2coJHNjb3BlLml0ZW1zKTtcblxuICAgICRzY29wZS4kb24oJ2VuYWJsZUdyaWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRzY29wZS5vcHQucmVzaXphYmxlLmVuYWJsZWQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3NhdmVVc2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICRzY29wZS5vcHQucmVzaXphYmxlLmVuYWJsZWQgPSAhJHNjb3BlLm9wdC5yZXNpemFibGUuZW5hYmxlZDsgXG4gICAgICAgICRzY29wZS5vcHQuZHJhZ2dhYmxlLmVuYWJsZWQgPSAhJHNjb3BlLm9wdC5kcmFnZ2FibGUuZW5hYmxlZDsgXG4gICAgfSlcblxuICAgICRzY29wZS5yZW1vdmUgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgdmFyIHRtcCA9ICRzY29wZS5pdGVtcy5zcGxpY2UoJHNjb3BlLml0ZW1zLmluZGV4T2YoYm94KSwgMSk7XG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzYXZlVXNlcicpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuJG9uKCdhZGRJdGVtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICAgICAgXCJ0aXRsZVwiIDogXCJOZXcgYm94XCIsXG4gICAgICAgICAgICBcImxvYWRpbmdcIiA6IGZhbHNlLFxuICAgICAgICAgICAgc2l6ZVg6IDEsXG4gICAgICAgICAgICBzaXplWTogMSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCIsXG4gICAgICAgICAgICBjb25maWcgOiB7XG4gICAgICAgICAgICAgICAgcGVyaW9kIDogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9yb3cgOiByb3csXG4gICAgICAgICAgICAvL2NvbCA6IGNvbFxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLml0ZW1zLnB1c2goaXRlbSlcbiAgICB9KTtcblxuICAgIFxuXG4gICAgJHNjb3BlLiRvbigncmVsb2FkRGFzaGJvYXJkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5kYXNoYm9hcmQgPSBkYXNoYm9hcmQuZ2V0KCk7XG4gICAgICAgICRzY29wZS5pdGVtcyA9ICRzY29wZS5kYXNoYm9hcmQuaXRlbXM7XG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5kYXNoYm9hcmQpO1xuICAgICAgICAkc2NvcGUuJGVtaXQoJ3JlcXVlc3RSZWRyYXcnKVxuICAgIH0pXG5cblxuXG5cbn1dKVxuXG5cbmFwcC5jb250cm9sbGVyKCdlZGl0Qm94Q29udHJvbGxlcicsIFtcIiRzY29wZVwiLCBcIiRtZERpYWxvZ1wiLCBcImJveFwiLCBcIlBST1RPQ09MU1wiLCBcIlRZUEVTXCIsIFwiQ0FURUdPUklFU1wiLCBmdW5jdGlvbigkc2NvcGUsICRtZERpYWxvZywgYm94LCBQUk9UT0NPTFMsIFRZUEVTLCBDQVRFR09SSUVTKSB7XG4gICAgXG4gICAgJHNjb3BlLmJveCA9IGJveDtcbiAgICBcbiAgICAkc2NvcGUuYmFja3VwTW9kZWwgPSBhbmd1bGFyLmNvcHkoYm94KTtcblxuICAgICRzY29wZS5jYXRlZ29yaWVzID0gQ0FURUdPUklFUztcbiAgICAkc2NvcGUucHJvdG9jb2xzID0gUFJPVE9DT0xTO1xuICAgICRzY29wZS50eXBlcyA9IFRZUEVTO1xuXG4gICAgJHNjb3BlLnNhdmVBbmRDbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgIH07XG4gICAgJHNjb3BlLmFuc3dlciA9IGZ1bmN0aW9uKGFuc3dlcikge1xuICAgICAgICAkbWREaWFsb2cuaGlkZShhbnN3ZXIpO1xuICAgIH07XG5cblxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDYW5jZWxsaW5nXCIpO1xuICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmNoYW5nZVNlbGVjdG9yID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgIC8vYW5ndWxhci5mb3JFYWNoKCRzY29wZS5ib3guZGF0YSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAvLyAgICBhbmd1bGFyLmZvckVhY2godmFsdWUudmFsdWVzLCBmdW5jdGlvbih2YWwsIGspIHtcbiAgICAgICAgLy8gICAgICAgIHZhbFsnc2VsZWN0b3InXSA9IHNlbDtcbiAgICAgICAgLy8gICAgfSlcbiAgICAgICAgLy99KVxuICAgICAgICAvLyRzY29wZS4kZW1pdCgncmVxdWVzdFJlZHJhdycpXG5cbiAgICB9XG5cblxufV0pO1xuXG5hcHAuY29udHJvbGxlcignYWRkRGFzaGJvYXJkQ29udHJvbGxlcicsIFtcIiRzY29wZVwiLCBcIiRtZERpYWxvZ1wiLCBcImRhc2hib2FyZFwiLCBmdW5jdGlvbigkc2NvcGUsICRtZERpYWxvZywgZGFzaGJvYXJkKSB7XG4gICAgXG4gICAgJHNjb3BlLmVkaXREYXNoYm9hcmQgPSBmYWxzZTtcbiAgICBcbiAgICAkc2NvcGUuc2F2ZUFuZENsb3NlID0gZnVuY3Rpb24oYW5zd2VyKSB7XG4gICAgICAgIC8vdmFyIG5ld0luZGV4ID0gZGFzaGJvYXJkLmFkZChhbnN3ZXIpO1xuICAgICAgICAvL2Rhc2hib2FyZC5zYXZlKCk7XG4gICAgICAgICRtZERpYWxvZy5oaWRlKGFuc3dlcik7XG4gICAgfTtcblxuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKGJveCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGxpbmdcIik7XG4gICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcbiAgICB9XG5cbn1dKTtcblxuXG5hcHAuY29udHJvbGxlcignZWRpdERhc2hib2FyZENvbnRyb2xsZXInLCBbXCIkc2NvcGVcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJG1kRGlhbG9nXCIsIFwiZGFzaGJvYXJkXCIsIGZ1bmN0aW9uKCRzY29wZSwgJHJvb3RTY29wZSwgJG1kRGlhbG9nLCBkYXNoYm9hcmQpIHtcbiAgICBcbiAgICAvLyBMb2FkIGRhc2hib2FyZCBzZXR0aW5nc1xuICAgICRzY29wZS5kYiA9IGRhc2hib2FyZC5zZXR0aW5ncygpO1xuXG4gICAgLy8gVmFyaWJsZSB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZWRpdGluZyBhbmQgYWRkaW5nIGEgZGFzaGJvYXJkXG4gICAgLy8gV2UgYXJlIHVzaW5nIHRoZSBzYW1lIHBhcnRpYWwgdG8gZGlzcGxheSB3aXRoaW4gZGlhbG9nXG4gICAgJHNjb3BlLmVkaXREYXNoYm9hcmQgPSB0cnVlO1xuXG4gXG4gICAgJHNjb3BlLnNhdmVBbmRDbG9zZSA9IGZ1bmN0aW9uKGFuc3dlcikge1xuICAgICAgICBkYXNoYm9hcmQudXBkYXRlKGFuc3dlcik7XG4gICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgfTtcblxuICAgICRzY29wZS5kZWxldGVEYXNoYm9hcmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZGFzaGJvYXJkLmRlbGV0ZSgpO1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3N3aXRjaERhc2hib2FyZCcsIDApO1xuICAgICAgICBkYXNoYm9hcmQuc2F2ZSgpO1xuICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgIH1cblxuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKGJveCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGxpbmdcIik7XG4gICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcbiAgICB9XG5cbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsIFtcIiRzY29wZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRsb2dcIiwgXCJ1c2VyXCIsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCAkbG9nLCB1c2VyKSB7XG5cdCRzY29wZS50aXRsZSA9IFwiTG9naW4gdG8gTmVtZWEgRGFzaGJvYXJkXCI7XG5cdCRzY29wZS5sb2dpbkJ0biA9IFwiTG9naW5cIjtcbiAgICBcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oY3JlZCkge1xuXHRcdCRzY29wZS5sb2dpbkJ0biA9IFwiQXV0aGVudGljYXRpbmcuLi5cIjtcbiAgICAgICAgJHNjb3BlLmxvZ2luQnRuRGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIHVzZXIuYXV0aChjcmVkKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpOyAgICBcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKG1zZykge1xuICAgICAgICAgICAgJHNjb3BlLmVycm9yX21lcyA9IG1zZztcbiAgICAgICAgICAgICRzY29wZS5sb2dpbkJ0biA9IFwiTG9naW5cIlxuICAgICAgICAgICAgJHNjb3BlLmxvZ2luQnRuRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIHZhciBwYXR0ZXJuID0gVHJpYW5nbGlmeSh7XG4gICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIHhfY29sb3JzOiAnR25CdScsXG4gICAgICAgIHlfY29sb3JzOiAnR25CdScsXG4gICAgICAgIGNlbGxfc2l6ZTogNTBcblxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2cocGF0dGVybik7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dpblwiKS5hcHBlbmRDaGlsZChwYXR0ZXJuLmNhbnZhcygpKVxuXG5cblx0XHRcblx0XHQvKmxvZ2luQXV0aC5mZXRjaFVzZXIodXNlcilcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG5cblx0XHRcdCRsb2cuaW5mbyhkYXRhKTtcblxuXHRcdFx0aWYgKGRhdGFbXCJzdWNjZXNzXCJdID09IHRydWUpIHtcblx0XHRcdFx0Ly8kbG9nLmluZm8oZGF0YSk7XHRcblx0XHRcdFx0JHNjb3BlLmxvZ2luQnRuID0gXCJTdWNjZXNzXCI7XG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcblx0XHRcdFx0bG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ2xvZ2dlZEluJywgdHJ1ZSk7XG5cdFx0XHRcdGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KCdsb2dnZWRJbi5wdycsIHNoYTI1Nl9kaWdlc3QoZGF0YS5wYXNzd29yZCkpO1x0XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0JGxvZy5lcnJvcihcImVycm9yIC0gYmFkIHBhc3N3b3JkXCIpO1xuXHRcdFx0XHQkc2NvcGUuZXJyb3JfbWVzID0gXCJCYWQgcGFzc3dvcmRcIjtcblx0XHRcdFx0JHNjb3BlLmxvZ2luQnRuID0gXCJMb2dpblwiO1xuXHRcdFx0XHRsb2dpbkNvcnJlY3QgPSBmYWxzZTtcblx0XHRcdFx0bG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ2xvZ2dlZEluJywgZmFsc2UpO1x0XG5cdFx0XHR9XG5cdFx0fSk7Ki9cbn1dKTtcblxuXG5cbmFwcC5jb250cm9sbGVyKCdwcm9maWxlQ29udHJvbGxlcicsIFtcIiRzY29wZVwiLCBcIiRsb2dcIiwgXCIkbG9jYWxTdG9yYWdlXCIsIFwidXNlclwiLCBcImRhc2hib2FyZFwiLCBmdW5jdGlvbigkc2NvcGUsICRsb2csICRsb2NhbFN0b3JhZ2UsIHVzZXIsIGRhc2hib2FyZCkge1xuICAgICRzY29wZS51c2VyID0gdXNlci5nZXQoKTtcblxuICAgICRzY29wZS5zYXZlX2J0biA9IFwiU2F2ZVwiO1xuXG4gICAgJHNjb3BlLmVkaXRVc2VyID0gZnVuY3Rpb24odXNlcl9kYXRhKSB7XG4gICAgICAgICRzY29wZS5zYXZlX2J0biA9IFwiUHJvY2Vzc2luZy4uLlwiO1xuXG4gICAgICAgIHVzZXJfZGF0YVtcInNldHRpbmdzXCJdID0gZGFzaGJvYXJkLmNsZWFuKCk7XG5cbiAgICAgICAgdXNlci5wdXQodXNlcl9kYXRhLCB0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXSA9IGRhdGFbXCJqd3RcIl07XG4gICAgICAgICAgICAkc2NvcGUuZXJyX21zZyA9IFwiXCI7XG4gICAgICAgICAgICAkc2NvcGUudXNlciA9IGFuZ3VsYXIuY29weSh1c2VyLmdldCgpKTtcbiAgICAgICAgICAgICRzY29wZS5zYXZlX2J0biA9IFwiU2F2ZVwiO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgJHNjb3BlLnNhdmVfYnRuID0gXCJTYXZlXCI7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICRsb2cuZXJyb3IoZGF0YVtcImVycm9yXCJdKTtcbiAgICAgICAgICAgICRzY29wZS51c2VyLnBhc3N3b3JkID0gXCJcIjtcbiAgICAgICAgICAgICRzY29wZS5lcnJfbXNnID0gZGF0YVtcImVycm9yXCJdO1xuICAgICAgICB9KVxuICAgIH1cbn1dKVxuXG5hcHAuY29udHJvbGxlcigndXNlcnNDb250cm9sbGVyJywgW1wiJHNjb3BlXCIsIFwiYXBpXCIsIFwidXNlclwiLCBcIiRtZERpYWxvZ1wiLCBmdW5jdGlvbigkc2NvcGUsIGFwaSwgdXNlciwgJG1kRGlhbG9nKSB7XG4gICAgXG4gICAgdXNlci5nZXQodHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkKSB7JHNjb3BlLnBlb3BsZSA9IGR9KTtcblxuICAgIC8vJHNjb3BlLnVzZXJzID0gdXNlcnM7XG4gICAgLyouc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgICAgICRzY29wZS51c2VycyA9IGRhdGE7XG4gICAgfSk7Ki9cblxuXG4gICAgJHNjb3BlLm15VXNlcm5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRtcCA9IHVzZXIuZ2V0KCk7XG4gICAgICAgIHJldHVybiB0bXBbJ3VzZXJuYW1lJ107XG4gICAgfVxuXG4gICAgJHNjb3BlLmRlbGV0ZVVzZXIgPSBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHVzZXJfaWQpO1xuICAgICAgICB1c2VyLmRlbGV0ZSh1c2VyX2lkKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgdXNlci5nZXQodHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJzID0gZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgICRzY29wZS5hZGRVc2VyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgJHNjb3BlLmFkZFVzZXJCb3ggPSB0cnVlO1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnYWRkVXNlckNvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9hZGRVc2VyLmh0bWwnLFxuICAgICAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG4gICAgICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOnRydWUsXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiB0cnVlLFxuICAgICAgICAgICAgLypsb2NhbHM6IHtcbiAgICAgICAgICAgICAgICBib3g6ICRzY29wZS5ib3hcbiAgICAgICAgICAgIH0sKi9cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oYW5zd2VyKSB7XG4gICAgICAgICAgICAvLyRzY29wZS5zYXZlKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhbnN3ZXIpXG4gICAgICAgICAgICB1c2VyLnBvc3QoYW5zd2VyKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcblxuICAgICAgICAgICAgICAgIHVzZXIuZ2V0KHRydWUpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnMgPSBkYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7IC8vIGNhbmNlbFxuICAgICAgICAgICAgLy8kc2NvcGUuYm94ID0gYW5ndWxhci5jb3B5KCRzY29wZS5iYWNrdXBNb2RlbCk7XG4gICAgICAgICAgICAvLyRzY29wZS5iYWNrdXBNb2RlbCA9IHt9O1xuICAgICAgICB9KTtcblxuICAgIH1cbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2FkZFVzZXJDb250cm9sbGVyJywgW1wiJHNjb3BlXCIsIFwiJG1kRGlhbG9nXCIsIGZ1bmN0aW9uKCRzY29wZSwgJG1kRGlhbG9nKSB7XG5cbiAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgdXNlcm5hbWUgOiAnJyxcbiAgICAgICAgbmFtZSA6ICcnLFxuICAgICAgICBzdXJuYW1lIDogJycsXG4gICAgICAgIHBhc3N3b3JkIDogJycsXG4gICAgICAgIHNldHRpbmdzIDpbXG5cdFx0e1xuXHRcdFx0XCJzZXR0aW5nc1wiIDoge1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIkJhc2ljXCIsXG5cdFx0XHRcdFwidGltZXNoaWZ0XCIgOiBcIjBcIixcblx0XHRcdFx0XCJpbnRlcnZhbFwiIDogXCI2MFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJpdGVtc1wiIDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJsb2FkaW5nXCIgOiBmYWxzZSxcblx0XHRcdFx0XHRcInJvd1wiIDogMCxcblx0XHRcdFx0XHRcImNvbmZpZ1wiIDoge1xuXHRcdFx0XHRcdFx0XCJwZXJpb2RcIiA6IFwiMjRcIixcblx0XHRcdFx0XHRcdFwidHlwZVwiIDogXCJwaWVjaGFydFwiLFxuXHRcdFx0XHRcdFx0XCJtZXRyaWNcIiA6IFwiY2F0ZWdvcnlcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJzaXplWFwiIDogNCxcblx0XHRcdFx0XHRcInNpemVZXCIgOiAzLFxuXHRcdFx0XHRcdFwiY29sXCIgOiAwLFxuXHRcdFx0XHRcdFwidGl0bGVcIiA6IFwiMjRoIHNoYXJlc1wiLFxuXHRcdFx0XHRcdFwidHlwZVwiIDogXCJwaWVjaGFydFwiLFxuXHRcdFx0XHRcdFwiY29udGVudFwiIDogXCJDbGljayB0aGUgbWVudSBpY29uIHRvIHNlbGVjdCBlZGl0XCJcblx0XHRcdFx0fVxuXHRcdFx0XVxuXHRcdH1cblx0XVxuXHR9XG4gICAgJHNjb3BlLnNhdmVBbmRDbG9zZSA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2codXNlcilcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUodXNlcik7XG4gICAgfTtcblxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDYW5jZWxsaW5nXCIpO1xuICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG4gICAgfVxufV0pXG5cbi8vIEZpbHRlciB0byBjb252ZXJ0IElERUEgZm9ybWF0IGZyb20gTW9uZ29EQiB0byBzdGFuZGFyZGl6ZWQgSURFQSBmb3JtYXRcbmFwcC5maWx0ZXIoJ2lkZWEnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpbnB1dCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPSAnX2lkJykge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVsnJGRhdGUnXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZVsnJGRhdGUnXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc1trZXldID0gbmV3IERhdGUodmFsdWVbJyRkYXRlJ10pLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwxOSkgKyAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufSk7XG5cbmFwcC5maWx0ZXIoJ2pzb24yaHRtbCcsIFtcIiRzY2VcIiwgXCIkZmlsdGVyXCIsIGZ1bmN0aW9uKCRzY2UsICRmaWx0ZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBcIlwiO1xuXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpbnB1dCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPSBcIl9pZFwiKSB7XG4gICAgICAgICAgICBodG1sID0gaHRtbCArIFwiPGRpdj5cIjtcblxuICAgICAgICAgICAgLy8gVGhlIHR1cGxlIGlzIG5lc3RlZFxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgdmFsdWUpID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2Yga2V5KSAhPSAnbnVtYmVyJyAmJiBrZXkgIT0gXCIkZGF0ZVwiKVxuICAgICAgICAgICAgICAgICAgICBodG1sID0gaHRtbCArIFwiPGVtPlwiICsga2V5ICsgXCI8L2VtPjogXCI7XG4gICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwgKyBcIjxkaXYgY2xhc3M9XFxcInN1YlxcXCI+XCIgKyAkZmlsdGVyKCdqc29uMmh0bWwnKSh2YWx1ZSkgKyBcIjwvZGl2PlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBrZXkgIT0gJ251bWJlcicpICYmIGtleSAhPSBcIiRkYXRlXCIpXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sICsgXCI8ZW0+XCIgKyBrZXkgKyBcIjwvZW0+OiBcIjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBpdCBpcyBkYXRlIChJIGtub3csIGl0IGlzIHNvb29vbyBkaXJ0eSlcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPiAxMDAwMDAwMDAwMDAwKVxuICAgICAgICAgICAgICAgICAgICBodG1sID0gaHRtbCArIFwiPHNwYW4+XCIgKyAkZmlsdGVyKCdkYXRlJykodmFsdWUsJ3l5eXkvTU0vZGQgSDptbTpzcycpICsgXCI8L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBodG1sID0gaHRtbCArIFwiPHNwYW4+XCIgKyB2YWx1ZSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbCA9IGh0bWwgKyBcIjwvZGl2PlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gJHNjZS50cnVzdEFzKCdodG1sJywgaHRtbCk7XG4gICAgfSAgICAgXG59XSk7XG5cblxuYXBwLmRpcmVjdGl2ZSgnZ3JpZHN0ZXJEeW5hbWljSGVpZ2h0JywgW1wiJHRpbWVvdXRcIiwgZnVuY3Rpb24gKCR0aW1lb3V0KSB7XG5cbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgaXRlbTogXCI9XCIgLy9ncmlkc3RlciBpdGVtXG4gICAgICAgIH0sXG4gICAgICAgIGxpbms6IGxpbmssXG4gICAgICAgIHJlc3RyaWN0OiAnQSdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudFswXS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7IFxuICAgICAgICAgICAgdmFyIHJvd0hlaWdodE9wdGlvbiA9IDI3MDsgLy8gQ2hhbmdlIHRoaXMgdmFsdWUgd2l0aCB5b3VyIG93biByb3dIZWlnaHQgb3B0aW9uXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcm93SGVpZ2h0T3B0aW9uICogc2NvcGUuaXRlbS5zaXplWTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coc2NvcGUuaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwibmV3VmFsOiBcIiArIG5ld1ZhbCArIFwiICAgICBoZWlnaHQ6IFwiICsgaGVpZ2h0KVxuICAgICAgICAgICAgaWYobmV3VmFsID4gaGVpZ2h0KXtcbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gTWF0aC5mbG9vcihuZXdWYWwgLyByb3dIZWlnaHRPcHRpb24pO1xuICAgICAgICAgICAgICAgIC8vZGl2Kys7XG4gICAgICAgICAgICAgICAgc2NvcGUuaXRlbS5zaXplWSA9IGRpdjsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfVxufV0pO1xuXG5hcHAuc2VydmljZSgnYXBpJywgW1wiJGh0dHBcIiwgXCIkbG9nXCIsIFwiJG1kVG9hc3RcIiwgXCIkbG9jYWxTdG9yYWdlXCIsIFwiUElFQ0hBUlRcIiwgXCJDT05GSUdcIiwgZnVuY3Rpb24oJGh0dHAsICRsb2csICRtZFRvYXN0LCAkbG9jYWxTdG9yYWdlLCBQSUVDSEFSVCwgQ09ORklHKSB7XG5cblx0dmFyIGFkZHIgPSBDT05GSUdbXCJob3N0XCJdICsgXCI6XCIgKyBDT05GSUdbXCJwb3J0XCJdICsgXCIvXCIgKyBDT05GSUdbXCJ2ZXJzaW9uXCJdICsgXCIvZXZlbnRzL1wiO1xuXG4gICAgdGhpcy5hdXRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl07XG4gICAgfVxuXG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJGh0dHAuZ2V0KCdodHRwOi8vYmVuZWZpemlvLmxpYmVyb3V0ZXIub3JnOjU1NTUvY29uZmlnJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmFkZHIgPSBkYXRhLmhvc3QgKyAnOicgKyBkYXRhLnBvcnQgKyBkYXRhLmV2ZW50cztcbiAgICAgICAgICAgICRsb2NhbFN0b3JhZ2VbJ2NvbmZpZyddID0gZGF0YTtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmdldCA9IGZ1bmN0aW9uKHVybCwgcGFyYW1zLCBpbmZvLCBjYWNoZSkge1xuXHRcdHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICB1cmwgOiBhZGRyICsgdXJsLFxuICAgICAgICAgICAgbWV0aG9kIDogXCJHRVRcIixcbiAgICAgICAgICAgIHBhcmFtcyA6IHBhcmFtcyxcbiAgICAgICAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nIDogdGhpcy5hdXRoKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNpbXBsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ0RhdGEgc3VjY2Vzc3VsbHkgbG9hZGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihcInRvcCByaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwic3VjY2Vzcy10b2FzdFwiKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjYWNoZSlcbiAgICAgICAgICAgICAgICAkbG9jYWxTdG9yYWdlWyd0aW1lc3RhbXAnXSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbG9nLmVycm9yKCdDYW5ub3QgZmV0Y2ggZGF0YScpO1xuICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyhcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ0Nhbm5vdCBsb2FkIGRhdGEnKVxuICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAudGhlbWUoXCJlcnJvci10b2FzdFwiKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnBvc3QgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGluZm8pIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoYWRkciArIHVybCwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyhcbiAgICAgICAgICAgICAgICAgICAgICAgICRtZFRvYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNpbXBsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdEYXRhIHN1Y2Nlc3NmdWxseSBsb2FkZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihcInRvcCByaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbWUoXCJzdWNjZXNzLXRvYXN0XCIpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhOyAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXHQkbG9nLmVycm9yKCdDYW5ub3QgZmV0Y2ggZGF0YScpO1xuICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ0Nhbm5vdCBmZXRjaCBkYXRhJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihcInRvcCByaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwiZXJyb3ItdG9hc3RcIilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLnB1dCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgaW5mbykge1xuICAgICAgICByZXR1cm4gJGh0dHAucHV0KGFkZHIgKyB1cmwsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCgnRGF0YSBzdWNjZXNzZnVsbHkgbG9hZGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwic3VjY2Vzcy10b2FzdFwiKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTsgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFx0JGxvZy5lcnJvcignQ2Fubm90IGZldGNoIGRhdGEnKTtcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdDYW5ub3QgZmV0Y2ggZGF0YScpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVtZShcImVycm9yLXRvYXN0XCIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG5cbn1dKTtcblxuXG5cbmFwcC5zZXJ2aWNlKCdkYXNoYm9hcmQnLCBbXCIkbG9nXCIsIFwiJGxvY2FsU3RvcmFnZVwiLCBcInVzZXJcIiwgZnVuY3Rpb24oJGxvZywgJGxvY2FsU3RvcmFnZSwgdXNlcikge1xuXG4gICAgdmFyIHNlbGVjdGVkRGFzaGJvYXJkID0gMDtcbiAgICB2YXIgZGFzaGJvYXJkcyA9ICRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddO1xuICAgIHZhciBhY3RpdmUgPSAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXVtzZWxlY3RlZERhc2hib2FyZF07XG4gICAgdmFyIGJhY2t1cDtcblxuICAgIHRoaXMuZ2V0QWxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXTtcbiAgICB9XG5cbiAgICB0aGlzLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gICRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddW3NlbGVjdGVkRGFzaGJvYXJkXTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAgJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ11bc2VsZWN0ZWREYXNoYm9hcmRdLnNldHRpbmdzO1xuICAgIH1cblxuICAgIHRoaXMuYWN0aXZlID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGluZGV4KSkge1xuICAgICAgICAgICAgc2VsZWN0ZWREYXNoYm9hcmQgPSBpbmRleFxuICAgICAgICB9XG5cbiAgICAgICAgLy9hY3RpdmUgPSAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXVtzZWxlY3RlZERhc2hib2FyZF07XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkRGFzaGJvYXJkO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24odXBkYXRlZERhc2hib2FyZCkge1xuICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh1cGRhdGVkRGFzaGJvYXJkKSlcbiAgICAgICAgICAgIGFjdGl2ZS5zZXR0aW5ncyA9IDA7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFjdGl2ZS5zZXR0aW5ncyA9IHVwZGF0ZWREYXNoYm9hcmQ7XG5cbiAgICAgICAgLy9kYXNoYm9hcmRzID0gJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ107XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNldHRpbmdzID0gYW5ndWxhci5jb3B5KCRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhzZXR0aW5ncylcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbW92ZSBkYXRhIGFuZCBncmFwaCBvcHRpb25zXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0dGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coc2V0dGluZ3NbaV0pO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhzZXR0aW5nc1tpXS5pdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNldHRpbmdzW2ldLml0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNldHRpbmdzW2ldLml0ZW1zW2pdW1wiZGF0YVwiXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2V0dGluZ3NbaV0uaXRlbXNbal1bXCJvcHRpb25zXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNldHRpbmdzO1xuICAgIH1cblxuICAgIHRoaXMuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgIFxuICAgICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgICAgICBcInNldHRpbmdzXCIgOiB0aGlzLmNsZWFuKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY29uc29sZS5sb2cocXVlcnkpXG5cbiAgICAgICAgLy8kbG9nLmluZm8ocXVlcnkpXG4gICAgICAgIHJldHVybiB1c2VyLnB1dChxdWVyeSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAkbG9nLmVycm9yKGRhdGEpXG4gICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMuYWRkID0gZnVuY3Rpb24obmV3RGFzaGJvYXJkKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gc2V0IHVwIGZpcnN0IGl0ZW0gaW4gZGFzaGJvYXJkIFxuICAgICAgICB2YXIgdG1wRGFzaGJvYXJkID0ge1xuICAgICAgICAgICAgc2V0dGluZ3MgOiBuZXdEYXNoYm9hcmQsXG4gICAgICAgICAgICBpdGVtcyA6IFt7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiIDogXCJOZXcgYm94XCIsXG4gICAgICAgICAgICAgICAgXCJsb2FkaW5nXCIgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaXplWDogMSxcbiAgICAgICAgICAgICAgICBzaXplWTogMSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIkNsaWNrIHRoZSBtZW51IGljb24gdG8gc2VsZWN0IGVkaXRcIixcbiAgICAgICAgICAgICAgICBjb25maWcgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmlvZCA6IFwiMFwiXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG5cbiAgICAgICAgJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ10ucHVzaCh0bXBEYXNoYm9hcmQpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXS5sZW5ndGggLSAxKTtcblxuICAgICAgICByZXR1cm4gKCAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXS5sZW5ndGggLSAxKTtcblxuICAgIH1cblxuICAgIHRoaXMuZGVsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGJhY2t1cCA9ICAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXS5zcGxpY2UoICRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddLmluZGV4T2YoYWN0aXZlKSwgMSk7XG4gICAgICAgIHNlbGVjdGVkRGFzaGJvYXJkID0gMDtcblxuICAgICAgICByZXR1cm4gYmFja3VwO1xuICAgIFxuICAgIH1cblxuICAgIHRoaXMuc3dpdGNoID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgYWN0aXZlID0gJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ11baW5kZXhdO1xuICAgICAgICBzZWxlY3RlZERhc2hib2FyZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0ZWREYXNoYm9hcmQgPSAwO1xuICAgICAgICBhY3RpdmUgPSAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXVtzZWxlY3RlZERhc2hib2FyZF1cbiAgICB9XG4gICAgICAgIFxufV0pO1xuXG5hcHAuZGlyZWN0aXZlKFwic2lkZWJhck1lbnVcIiwgZnVuY3Rpb24oKSB7XG5cdHJldHVybiB7XG4gICAgICAgIHNjb3BlOiB7XG5cdFx0XHRzZWN0aW9uOiAnPSdcblx0XHR9LFxuXHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvc2lkZWJhci1tZW51Lmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiBbXCIkc2NvcGVcIiwgXCIkbWRTaWRlbmF2XCIsIFwiJG1kRGlhbG9nXCIsIFwiJGxvY2F0aW9uXCIsIFwiTUVOVVwiLCBcInVzZXJcIiwgXCJkYXNoYm9hcmRcIiwgZnVuY3Rpb24oJHNjb3BlLCAkbWRTaWRlbmF2LCAkbWREaWFsb2csICRsb2NhdGlvbiwgTUVOVSwgdXNlciwgZGFzaGJvYXJkKSB7XG4gICAgICAgICAgICAkc2NvcGUubWVudSA9IE1FTlU7XG5cbiAgICAgICAgICAgICRzY29wZS5kYXNoYm9hcmRzID0gZGFzaGJvYXJkLmdldEFsbCgpO1xuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRGFzaGJvYXJkID0gZGFzaGJvYXJkLmFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAkc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbihjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuKCcjJyArICRsb2NhdGlvbi5wYXRoKCkgPT0gY3VycmVudCk7XG4gICAgICAgICAgICB9ICAgXG5cbiAgICAgICAgICAgICRzY29wZS5lbmFibGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlSXRlbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS50b2dnbGVCdG4gPSBcInRvZ2dsZWRcIjtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgJHNjb3BlLmNsb3NlTGVmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRtZFNpZGVuYXYoJ2xlZnQnKS50b2dnbGUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmQucmVzZXQoKTtcbiAgICAgICAgICAgICAgICB1c2VyLmxvZ291dCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuYWRkRGFzaGJvYXJkID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFkZGluZyBuZXcgZGFzaGJvYXJkXCIpO1xuXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnYWRkRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYWRkRGFzaGJvYXJkLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmdWxsc2NyZWVuOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oYW5zd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJbmRleCA9IGRhc2hib2FyZC5hZGQoYW5zd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhuZXdJbmRleClcbiAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkLnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdzd2l0Y2hEYXNoYm9hcmQnLCBuZXdJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhc2hib2FyZCA9IGRhc2hib2FyZC5hY3RpdmUobmV3SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAvKmRhc2hib2FyZC5zd2l0Y2gobmV3SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWREYXNoYm9hcmQgPSBuZXdJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3JlbG9hZERhc2hib2FyZCcpOyAqL1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgeyAvLyBjYW5jZWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8qZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8kc2NvcGUuJGVtaXQoJ2FkZERhc2hib2FyZCcpO1xuICAgICAgICAgICAgfSovXG5cbiAgICAgICAgICAgICRzY29wZS5zd2l0Y2hEYXNoYm9hcmQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhc2hib2FyZCA9IGRhc2hib2FyZC5hY3RpdmUoaW5kZXgpO1xuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnc3dpdGNoRGFzaGJvYXJkJywgaW5kZXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdzd2l0Y2hEYXNoYm9hcmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN3aXRjaGluZ1wiKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWREYXNoYm9hcmQgPSBkYXNoYm9hcmQuYWN0aXZlKCk7XG4gICAgICAgICAgICB9KVxuICAgIFxuIFxuICAgICAgICB9XVxuXHR9O1xufSk7XG5cbmFwcC5kaXJlY3RpdmUoXCJ0b3BiYXJNZW51XCIsIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4ge1xuXHRcdHNjb3BlOiB7XG5cdFx0XHRzZWN0aW9uOiAnPSdcblx0XHR9LFxuXHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvdG9wYmFyLW1lbnUuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXIgOiBbXCIkc2NvcGVcIiwgXCIkbWRTaWRlbmF2XCIsIGZ1bmN0aW9uKCRzY29wZSwgJG1kU2lkZW5hdikge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZUxlZnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkbWRTaWRlbmF2KCdsZWZ0JykudG9nZ2xlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dXG5cdH07XG59KTtcblxuXG5hcHAuZGlyZWN0aXZlKFwiYm94ZXNcIiwgZnVuY3Rpb24oKSB7XG5cdHJldHVybiB7XG5cdFx0c2NvcGU6IHtcblx0XHRcdHNlY3Rpb246ICc9J1xuXHRcdH0sXG5cdFx0dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9ib3hlcy5odG1sJ1xuXHR9O1xufSk7XG5cblxuXG5hcHAuc2VydmljZSgndXNlcicsIFtcIiRsb2NhbFN0b3JhZ2VcIiwgXCIkaHR0cFwiLCBcIiRtZFRvYXN0XCIsIFwiJGxvY2F0aW9uXCIsIFwiJGxvZ1wiLCBcIkNPTkZJR1wiLCBmdW5jdGlvbigkbG9jYWxTdG9yYWdlLCAkaHR0cCwgJG1kVG9hc3QsICRsb2NhdGlvbiwgJGxvZywgQ09ORklHKXtcbiAgICB2YXIgY2FjaGUgPSBudWxsO1xuXG4gICAgdmFyIGRhc2hib2FyZCA9IFtdO1xuXG5cdHZhciBhZGRyID0gQ09ORklHW1wiaG9zdFwiXSArIFwiOlwiICsgQ09ORklHW1wicG9ydFwiXSArIFwiL1wiICsgQ09ORklHW1widmVyc2lvblwiXSArIFwiL3VzZXJzL1wiO1xuXG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRsb2NhbFN0b3JhZ2VbXCJkYXNoYm9hcmRcIl07XG4gICAgfVxuXG4gICAgdGhpcy5qd3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRva2VuID0gJGxvY2FsU3RvcmFnZVsndG9rZW4nXTtcbiAgICAgICAgdmFyIGJhc2U2NFVybCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsICcrJykucmVwbGFjZSgnXycsICcvJyk7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHdpbmRvdy5hdG9iKGJhc2U2NCkpO1xuICAgIH1cblxuICAgIHRoaXMuYXV0aCA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYWRkcik7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KGFkZHIgKyBcImF1dGhcIiwgYW5ndWxhci50b0pzb24odXNlcikpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXSA9IGRhdGFbXCJqd3RcIl07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRPRE86IGRpZmZlcmVudGlhdGUgYmV0d2VlbiBjb25maWcgYW5kIGp3dCA+PiBkdXBsaWNpdHlcbiAgICAgICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlW1wiZGFzaGJvYXJkXCJdO1xuICAgICAgICAgICAgJGxvY2FsU3RvcmFnZVtcImRhc2hib2FyZFwiXSA9IGRhdGFbXCJzZXR0aW5nc1wiXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycm9yLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXR1cylcbiAgICAgICAgICAgIC8vIExldCBpdCBiZSBoYW5kbGVkIGJ5IGNvbnRyb2xsZXJcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLnB1dCA9IGZ1bmN0aW9uKGRhdGEsIGluZm8pIHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIHVybCA6IGFkZHIsIFxuICAgICAgICAgICAgbWV0aG9kIDogXCJQVVRcIixcbiAgICAgICAgICAgIGRhdGEgOiBhbmd1bGFyLnRvSnNvbihkYXRhKSxcbiAgICAgICAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nIDogJGxvY2FsU3RvcmFnZVtcInRva2VuXCJdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCgnVXNlciBzZXR0aW5ncyB1cGRhdGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwic3VjY2Vzcy10b2FzdFwiKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTsgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihtc2csIHN0YXR1cykge1xuICAgICAgICAgICAgXHQkbG9nLmVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZyBzZW5kaW5nIHVzZXIgZGF0YScpO1xuICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ1NvbWV0aGluZyB3ZW50IHdyb25nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihcInRvcCByaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwiZXJyb3ItdG9hc3RcIilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1zZztcbiAgICAgICAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIC8vIExvZ291dCB1c2VyXG4gICAgLy8gUmVtb3ZlIEpXVCBmcm9tIGxvY2FsU3RvcmFnZSBhbmQgZGVsZXRlIHNlc3Npb24gb24gc2VydmVyXG4gICAgdGhpcy5sb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHVzZXIgPSAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl07XG5cbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIHVybCA6IGFkZHIgKyBcImxvZ291dFwiLFxuICAgICAgICAgICAgbWV0aG9kIDogXCJERUxFVEVcIixcbiAgICAgICAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nIDogJGxvY2FsU3RvcmFnZVtcInRva2VuXCJdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgJGxvY2FsU3RvcmFnZVtcInRva2VuXCJdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlW1wiZGFzaGJvYXJkXCJdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlW1widGltZXN0YW1wXCJdO1xuICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2ltcGxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCgnTG9nb3V0IHN1Y2Nlc3NmdWxsJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihcInRvcCByaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgJGxvY2FsU3RvcmFnZVtcInRva2VuXCJdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlW1wiZGFzaGJvYXJkXCJdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlW1widGltZXN0YW1wXCJdO1xuICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2ltcGxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCgnTG9nb3V0IGZhaWxlZCBvbiBzZXJ2ZXIgc2lkZSwgYnV0IHlvdSBhcmUgbG9nZ2VkIG91dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXQgPSBmdW5jdGlvbihhbGx1c2Vycykge1xuICAgICAgICB2YXIgdXNlciA9ICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhbGx1c2Vycykge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgICAgICB1cmwgOiBhZGRyLFxuICAgICAgICAgICAgICAgIG1ldGhvZCA6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgaGVhZGVycyA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nIDogdXNlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhX3Jhdykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGFfcmF3KVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhX3JhdztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2ltcGxldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoXCJDYW5ub3QgZmV0Y2ggdXNlcnMgZnJvbSBkYXRhYmFzZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbWUoXCJlcnJvci10b2FzdFwiKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuand0KCk7XG4gICAgfVxuXG5cbiAgICB0aGlzLnBvc3QgPSBmdW5jdGlvbih1c2VyRGF0YSkge1xuICAgICAgICB2YXIgdXNlciA9ICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICB1cmwgOiBhZGRyLFxuICAgICAgICAgICAgbWV0aG9kIDogXCJQT1NUXCIsXG4gICAgICAgICAgICBkYXRhIDogYW5ndWxhci50b0pzb24odXNlckRhdGEpLFxuICAgICAgICAgICAgaGVhZGVycyA6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbicgOiB1c2VyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyhcbiAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAuc2ltcGxldCgpXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudChcIkNhbm5vdCBjcmVhdGUgdXNlclwiKVxuICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAudGhlbWUoXCJlcnJvci10b2FzdFwiKVxuICAgICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbih1c2VySWQpIHtcbiAgICAgICAgdmFyIHVzZXIgPSAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl07XG4gICAgICAgIGNvbnNvbGUubG9nKHVzZXJJZClcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICB1cmwgOiBhZGRyLFxuICAgICAgICAgICAgbWV0aG9kIDogXCJERUxFVEVcIixcbiAgICAgICAgICAgIHBhcmFtcyA6IHtcInVzZXJJZFwiIDogdXNlcklkfSxcbiAgICAgICAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nIDogdXNlclxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgJG1kVG9hc3RcbiAgICAgICAgICAgICAgICAgICAgLnNpbXBsZXQoKVxuICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoXCJDYW5ub3QgZGVsZXRlIHVzZXJcIilcbiAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwiZXJyb3ItdG9hc3RcIilcbiAgICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxufV0pO1xuIiwiYXBwLmNvbnN0YW50KCdBVVRIX0VWRU5UUycsIHtcbiAgbG9naW5TdWNjZXNzOiAnYXV0aC1sb2dpbi1zdWNjZXNzJyxcbiAgbG9naW5GYWlsZWQ6ICdhdXRoLWxvZ2luLWZhaWxlZCcsXG4gIGxvZ291dFN1Y2Nlc3M6ICdhdXRoLWxvZ291dC1zdWNjZXNzJyxcbiAgc2Vzc2lvblRpbWVvdXQ6ICdhdXRoLXNlc3Npb24tdGltZW91dCcsXG4gIG5vdEF1dGhlbnRpY2F0ZWQ6ICdhdXRoLW5vdC1hdXRoZW50aWNhdGVkJyxcbiAgbm90QXV0aG9yaXplZDogJ2F1dGgtbm90LWF1dGhvcml6ZWQnXG59KTtcblxuYXBwLmNvbnN0YW50KCdDQVRFR09SSUVTJywgWyBcImFueVwiLCBcIlJlY29uLlNjYW5uaW5nXCIsIFwiQXR0ZW1wdC5Mb2dpblwiLCBcIkF2YWlsYWJpbGl0eS5Eb1NcIiwgXCJBdmFpbGliaWxpdHkuRERvU1wiXSk7XG5hcHAuY29uc3RhbnQoJ1BST1RPQ09MUycsIFsgXCJ0Y3BcIiwgXCJkbnNcIiwgXCJ1ZHBcIiBdKTtcbmFwcC5jb25zdGFudCgnVFlQRVMnLCBbXCJiYXJjaGFydFwiLCBcInBpZWNoYXJ0XCIsIFwidG9wXCIsIFwic3VtXCJdKVxuXG5hcHAuY29uc3RhbnQoJ1BJRUNIQVJUJywgeyBcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAncGllQ2hhcnQnLFxuICAgICAgICAgICAgaGVpZ2h0OiAzNzUsXG4gICAgICAgICAgICAvL2hlaWdodDogZnVuY3Rpb24oKSB7IGNvbnNvbGUubG9nKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdudmQzJykub2Zmc2V0SGVpZ2h0KTsgcmV0dXJuIE51bWJlcig0MjUpfSxcbiAgICAgICAgICAgIHg6IGZ1bmN0aW9uKGQpe3JldHVybiBkLmtleVswXTt9LFxuICAgICAgICAgICAgeTogZnVuY3Rpb24oZCl7cmV0dXJuIGQueDt9LFxuICAgICAgICAgICAgc2hvd0xhYmVsczogdHJ1ZSxcbiAgICAgICAgICAgIGRvbnV0IDogdHJ1ZSxcbiAgICAgICAgICAgIHBhZEFuZ2xlIDogMC4wMCxcbiAgICAgICAgICAgIGNvcm5lclJhZGl1cyA6IDEsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IDUwMCxcbiAgICAgICAgICAgIGxhYmVsVGhyZXNob2xkOiAwLFxuICAgICAgICAgICAgLy9jb2xvcjogWydibHVlJywgJ2dyZWVuJywgJ3llbGxvdyddLFxuICAgICAgICAgICAgLy9jb2xvcjogW1wiIzRhYzRmM1wiLCBcIiM5NmQ2YmRcIiwgXCIjMGE1OTlkXCIsIFwiIzhiYTJjMFwiLCBcIiNmN2ZjZmRcIixcIiNlNWY1ZjlcIixcIiNjY2VjZTZcIixcIiM5OWQ4YzlcIixcIiM2NmMyYTRcIixcIiM0MWFlNzZcIixcIiMyMzhiNDVcIixcIiMwMDZkMmNcIixcIiMwMDQ0MWJcIl0sXG4gICAgICAgICAgICAvL2NvbG9yOiBbXCIjMjE5NkYzXCIsIFwiIzAwOTY4OFwiLCAgXCIjNjczQUI3XCIsICBcIiNGRjk4MDBcIl0sIFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogNSxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogLTE1LFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZFBvc2l0aW9uIDogXCJ0b3BcIixcbiAgICAgICAgICAgIHRvb2x0aXBDb250ZW50IDogZnVuY3Rpb24oa2V5LCB4LCB5LCBlLCBncmFwaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGdyYXBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPbGFsYWxhISc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwaWUgOiB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2g6IHtcbiAgICAgICAgICAgICAgICAgICAgLy9jaGFydENsaWNrOiBmdW5jdGlvbihlKSB7Y29uc29sZS5sb2coZSl9LFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Q2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSAxMDAwKjYwKjYwKjI0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUuc2V0SG91cnMoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlLnNldE1pbnV0ZXMoMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcjL2V2ZW50cz9maWx0ZXImZGF0ZT0nICsgZGF0ZS5nZXRUaW1lKCkgKyAnJmZyb209JyArIG5ldyBEYXRlKCkuZ2V0SG91cnMoKSArICc6JyArIG5ldyBEYXRlKCkuZ2V0TWludXRlcygpICsgJyZjYXRlZ29yeT0nICsgZS5kYXRhLmtleVswXX0sXG4gICAgICAgICAgICAgICAgICAgIC8vZWxlbWVudERibENsaWNrOiBmdW5jdGlvbihlKSB7Y29uc29sZS5sb2coXCJlbGVtZW50IGRvdWJsZSBjbGlja1wiKX0sXG4gICAgICAgICAgICAgICAgICAgIC8vZWxlbWVudE1vdXNlb3ZlcjogZnVuY3Rpb24oZSkge2NvbnNvbGUubG9nKFwiZWxlbWVudCBtb3VzZW92ZXJcIil9LFxuICAgICAgICAgICAgICAgICAgICAvL2VsZW1lbnRNb3VzZW91dDogZnVuY3Rpb24oZSkge2NvbnNvbGUubG9nKFwiZWxlbWVudCBtb3VzZSBvdXRcIil9ICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbFR5cGUgOiBcInBlcmNlbnRcIixcbiAgICAgICAgICAgICAgICBsYWJlbHNPdXRzaWRlIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgLy9zdGFydEFuZ2xlIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zdGFydEFuZ2xlLzIgLU1hdGguUEkvMiB9LFxuICAgICAgICAgICAgICAgIC8vZW5kQW5nbGUgOiBmdW5jdGlvbihkKSB7IHJldHVybiBkLmVuZEFuZ2xlLzIgLU1hdGguUEkvMiB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuXG5hcHAudmFsdWUoJ0FSRUEnLCB7XG4gICAgb3B0aW9ucyA6IHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdtdWx0aUJhckNoYXJ0JyxcbiAgICAgICAgICAgIGhlaWdodDogNDUwLFxuICAgICAgICAgICAgbWFyZ2luIDoge1xuICAgICAgICAgICAgICAgIHRvcDogMzAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDIwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogMTAwLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDY1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeDogZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54IH0sXG4gICAgICAgICAgICB5OiBmdW5jdGlvbihkKSB7IHJldHVybiBOdW1iZXIoZC5Db3VudCkgfSxcbiAgICAgICAgICAgIHVzZVZvcm9ub2k6IGZhbHNlLFxuICAgICAgICAgICAgY2xpcEVkZ2U6IHRydWUsXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICAgICAgdXNlSW50ZXJhY3RpdmVHdWlkZWxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcENvbnRlbnQgOiBmdW5jdGlvbihrZXksIHgsIHksIGUsIGdyYXBoKSB7cmV0dXJuKFwiSGFcIik7fSxcbiAgICAgICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICAgICAgc2hvd01heE1pbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGlja0Zvcm1hdDogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMudGltZS5mb3JtYXQoJyVtLyVkICVIOiVNJykobmV3IERhdGUoZCkpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByb3RhdGVMYWJlbHMgOiAtNDUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeUF4aXM6IHtcbiAgICAgICAgICAgICAgICBzaG93TWF4TWluOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aWNrRm9ybWF0OiBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmZvcm1hdCgncycpKGQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc0xhYmVsIDogXCJFdmVudHMgQ291bnRcIixcbiAgICAgICAgICAgICAgICBheGlzTGFiZWxEaXN0YW5jZSA6IC0yMFxuICAgICAgICAgICAgfSwgIFxuICAgICAgICAgICAgbXVsdGliYXI6IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCA6IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudENsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGUuZGF0YS54KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5zZXRIb3VycygwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcygwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcjL2V2ZW50cz9maWx0ZXImZGF0ZT0nICsgZGF0ZS5nZXRUaW1lKCkgKyAnJmZyb209JyArIChcIjBcIiArIGhvdXJzKS5zbGljZSgtMikgKyAnOicgKyAoXCIwXCIgKyBtaW51dGVzKS5zbGljZSgtMikgKyAnJmNhdGVnb3J5PScgKyBlLmRhdGEua2V5ICsgJyZkaXI9MSc7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cblxuXG5hcHAuY29uc3RhbnQoXCJNRU5VXCIsIFtcblx0Lyp7XG5cdFx0XCJ0aXRsZVwiIDogXCJEYXNoYm9hcmRcIixcbiAgICAgICAgXCJsaW5rXCIgOiBcIiMvXCJcblx0XHRcIml0ZW1zXCIgOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwidGl0bGVcIiA6IFwiVXNlcnNcIixcblx0XHRcdFx0XCJsaW5rXCJcdDogXCJ1c2VyXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidGl0bGVcIiA6IFwiTXkgcHJvZmlsZVwiXG5cdFx0XHR9XG5cdFx0XVxuXHR9LCovXG5cdHtcblx0XHRcInRpdGxlXCIgOiBcIkV2ZW50c1wiLFxuXHRcdFwibGlua1wiIFx0OiBcIiMvZXZlbnRzXCJcblx0fSxcblx0Lyp7XG5cdFx0XCJ0aXRsZVwiIDogXCJBbmFseXRpY3MyM1wiLFxuXHRcdFwiaXRlbXNcIiA6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJ0aXRsZVwiIDogXCJVc2Vyc1wiLFxuXHRcdFx0XHRcImxpbmtcIiBcdDogXCJzZXR0aW5nc1wiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIk15IHByb2ZpbGVcIixcblx0XHRcdFx0XCJsaW5rXCJcdDogXCJwcm9maWxlXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidGl0bGVcIiA6IFwiTXkgcHJvZmlsZVwiLFxuXHRcdFx0XHRcImxpbmtcIlx0OiBcInByb2ZpbGVcIlxuXHRcdFx0fVxuXHRcdF1cblxuXHR9LFxuXHR7XG5cdFx0XCJ0aXRsZVwiIDogXCJBbmFseXRpY3MxMjNcIixcblx0XHRcImxpbmtcIiBcdDogXCJsb2dpblwiXG5cdH0sKi9cblx0e1xuXHRcdFwidGl0bGVcIiA6IFwiU2V0dGluZ3NcIixcblx0XHRcIml0ZW1zXCIgOiBbXG4gICAgICAgICAgICB7XG5cdFx0XHRcdFwidGl0bGVcIiA6IFwiTXkgcHJvZmlsZVwiLFxuXHRcdFx0XHRcImxpbmtcIlx0OiBcIiMvc2V0dGluZ3MvcHJvZmlsZVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIlVzZXJzXCIsXG5cdFx0XHRcdFwibGlua1wiIFx0OiBcIiMvc2V0dGluZ3MvdXNlcnNcIlxuXHRcdFx0fSxcblx0XHRdXG5cdH1cbl0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ2V2ZW50Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgYXBpKSB7XG5cbiAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zO1xuICAgICAgICAkc2NvcGUuc2hvd1BsYWluID0gdHJ1ZTtcblxuICAgICAgICAkc2NvcGUuZ2VvID0gW107XG5cbiAgICAgICAgJHNjb3BlLmJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKVxuICAgICAgICB9XG5cbiAgICAgICAgYXBpLmdldCgnaWQvJyArICRyb3V0ZVBhcmFtc1snaWQnXSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgICAgIC8vdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcblxuICAgICAgICAgICAgaWYgKCgkc2NvcGUuZGF0YS5Tb3VyY2UgIT0gdW5kZWZpbmVkICYmICRzY29wZS5kYXRhLlRhcmdldCAhPSB1bmRlZmluZWQpICYmIFxuICAgICAgICAgICAgICAgICgkc2NvcGUuZGF0YS5Tb3VyY2VbMF0uSVA0ICYmICRzY29wZS5kYXRhLlRhcmdldFswXS5JUDQpKSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCdodHRwOi8vZnJlZWdlb2lwLm5ldC9qc29uLycgKyAkc2NvcGUuZGF0YS5UYXJnZXRbMF0uSVA0WzBdKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbJ3R5cGUnXSA9IFwiVGFyZ2V0XCI7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZW8ucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgLy92YXIgbGF0bG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhkYXRhLmxhdGl0dWRlLCBkYXRhLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vYm91bmRzLmV4dGVuZChsYXRsbmcpO1xuXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJ2h0dHA6Ly9mcmVlZ2VvaXAubmV0L2pzb24vJyArICRzY29wZS5kYXRhLlNvdXJjZVswXS5JUDRbMF0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhWyd0eXBlJ10gPSBcIlNvdXJjZVwiO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2VvLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGxhdGxuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoZGF0YS5sYXRpdHVkZSwgZGF0YS5sb25naXR1ZGUpO1xuICAgICAgICAgICAgICAgICAgICAvL2JvdW5kcy5leHRlbmQobGF0bG5nKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJHNjb3BlLmRhdGEuU291cmNlID09IHVuZGVmaW5lZCB8fCAkc2NvcGUuZGF0YS5Tb3VyY2VbMF0uSVA0ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnaHR0cDovL2ZyZWVnZW9pcC5uZXQvanNvbi8nICsgJHNjb3BlLmRhdGEuVGFyZ2V0WzBdLklQNFswXSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbJ3R5cGUnXSA9IFwiVGFyZ2V0XCI7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZW8ucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJ2h0dHA6Ly9mcmVlZ2VvaXAubmV0L2pzb24vJyArICRzY29wZS5kYXRhLlNvdXJjZVswXS5JUDRbMF0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhWyd0eXBlJ10gPSBcIlNvdXJjZVwiO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2VvLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgXG5cbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ2V2ZW50c0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9jYXRpb24sIGFwaSwgJHJvdXRlKSB7XG4gICAgJHNjb3BlLmZpbHRlciA9IHtcbiAgICAgICAgXCJjYXRlZ29yeVwiIDogXCJcIiwgICAgLy8gQ2F0ZWdvcnlcbiAgICAgICAgXCJzcmNfaXBcIiA6IFwiXCIsICAgICAgLy8gU291cmNlIElQXG4gICAgICAgIFwidHJ0X2lwXCIgOiBcIlwiLCAgICAgIC8vIFRhcmdldCBJUFxuICAgICAgICBcImRlc2NcIiA6IFwiXCIsICAgICAgICAvLyBEZXNjcmlwdGlvblxuICAgICAgICBcImZsb3dzX2Zyb21cIiA6IFwiXCIsICAvLyBGbG93Q291bnRcbiAgICAgICAgXCJmbG93c190b1wiIDogXCJcIiwgICAgLy8gRmxvd0NvdW50XG4gICAgICAgIFwiaXRlbXNcIiA6IDEwMCwgICAgICAvLyBMaW1pdCBudW1iZXIgb2YgZGlzcGxheWVkIGl0ZW1zXG4gICAgfTtcbiAgICAkc2NvcGUucXVlcnkgPSB7XG4gICAgICAgIFwiZnJvbVwiIDogXCIxMjowMFwiLFxuICAgICAgICBcInRvXCIgOiBcIlwiLFxuICAgICAgICBcImRhdGVcIiA6IG5ldyBEYXRlKCksXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIiA6IFwiXCIsXG4gICAgICAgIFwiY2F0ZWdvcnlcIiA6IFwiXCIsXG4gICAgICAgIFwib3JkZXJieVwiIDogXCJEZXRlY3RUaW1lXCIsXG4gICAgICAgIFwiZGlyXCIgOiAxLFxuICAgICAgICBcImxpbWl0XCIgOiAxMDAsXG4gICAgICAgIFwic3JjaXBcIiA6IFwiXCIsXG4gICAgICAgIFwiZHN0aXBcIiA6IFwiXCJcbiAgICB9XG5cbiAgICAkc2NvcGUub3JkZXJCeSA9IFtcIkRldGVjdFRpbWVcIiwgXCJDYXRlZ29yeVwiLCBcIkRlc2NyaXB0aW9uXCIsIFwiRmxvd0NvdW50XCJdO1xuICAgICRzY29wZS5zZWFyY2hUZXh0ID0gXCJcIjtcblxuICAgICRzY29wZS5kYXRhID0gW107XG4gICAgJHNjb3BlLmxvYWRidG4gPSBcIkxvYWRcIjtcbiAgICAkc2NvcGUubmV4dEJ1dHRvbiA9IFwiTG9hZCBuZXh0IDEwMCBpdGVtc1wiO1xuICAgICRzY29wZS5hY3RpdmVGaWx0ZXIgPSAkbG9jYXRpb24uc2VhcmNoKCkuZmlsdGVyO1xuXG4gICAgLy8gUkVTRVQgZXZlcnl0aGluZyBpbmNsdWRpbmcgVVJMIHBhcmFtZXRlcnMgYW5kIHJlbG9hZFxuICAgICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKHt9KTtcbiAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgIH1cblxuICAgICRzY29wZS5nZXRRdWVyeSA9IGZ1bmN0aW9uKGlwLCBwYXRoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGlwKTtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSA3KTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSBcIjBcIiArIGRhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICB2YXIgaG91cnMgPSBcIjBcIiArIGRhdGUuZ2V0SG91cnMoKTtcblxuICAgICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgZnJvbSA6IGhvdXJzLnN1YnN0cigtMikgKyAnOicgKyBtaW51dGVzLnN1YnN0cigtMiksIFxuICAgICAgICAgICAgICAgIGRhdGUgOiBkYXRlLFxuICAgICAgICAgICAgICAgIGxpbWl0IDogMTAwLFxuICAgICAgICAgICAgICAgIG9yZGVyYnkgOiBcIkRldGVjdFRpbWVcIixcbiAgICAgICAgICAgICAgICBkaXIgOiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICBpZiAocGF0aCA9PSBcInNyY1wiKSB7XG4gICAgICAgICAgIHF1ZXJ5W1wic3JjaXBcIl0gPSBpcDsgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBxdWVyeVtcImRzdGlwXCJdID0gaXA7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUubG9hZEl0ZW1zKHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAkc2NvcGUuc3dpdGNoRGlyID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT0gLTEgfHwgdmFsKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGlyVmFsID0gXCJEZXNjZW5kaW5nXCI7XG4gICAgICAgICAgICAkc2NvcGUucXVlcnkuZGlyID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZGlyVmFsID0gXCJBc2NlbmRpbmdcIjtcbiAgICAgICAgICAgICRzY29wZS5xdWVyeS5kaXIgPSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLnN3aXRjaERpcigkbG9jYXRpb24uc2VhcmNoKCkuZGlyKTtcblxuICAgICRzY29wZS5sb2FkTmV4dCA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICAgICAgJHNjb3BlLm5leHRCdXR0b24gPSBcIkxvYWRpbmcuLi5cIjtcblxuICAgICAgICBpZiAoJGxvY2F0aW9uLnNlYXJjaCgpLmZpbHRlcikge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5xdWVyeSk7XG4gICAgICAgICAgICBxdWVyeS5mcm9tID0gbmV3IERhdGUodGltZSk7XG4gICAgICAgICAgICBxdWVyeS5kaXIgPSAxO1xuXG4gICAgICAgICAgICBpZiAocXVlcnkudG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgdG8gPSBxdWVyeS50by5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIHZhciB0b19kYXRlID0gbmV3IERhdGUocXVlcnkuZGF0ZSk7XG4gICAgICAgICAgICAgICAgdG9fZGF0ZS5zZXRIb3Vycyh0b19kYXRlLmdldEhvdXJzKCkgKyB0b1swXSk7XG4gICAgICAgICAgICAgICAgdG9fZGF0ZS5zZXRNaW51dGVzKHRvWzFdKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9fZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHF1ZXJ5LnRvID0gdG9fZGF0ZTtcblxuXG4gICAgICAgICAgICBhcGkuZ2V0KCdxdWVyeScsIHF1ZXJ5LCB0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtYWluaW5nID0gZGF0YS5wb3AoKTtcblxuICAgICAgICAgICAgICAgIGZvcihpdGVtIGluIGRhdGEpIHsgICAgXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhLnB1c2goZGF0YVtpdGVtXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5leHRCdXR0b24gPSBcIkxvYWQgbmV4dCAxMDAgaXRlbXNcIjtcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGVyciwgbXNnKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV4dEJ1dHRvbiA9IFwiTG9hZCBuZXh0IDEwMCBpdGVtc1wiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBxdWVyeSA9IHtcbiAgICAgICAgICAgICAgICBcInRvXCIgOiBuZXcgRGF0ZSh0aW1lKSxcbiAgICAgICAgICAgICAgICBcImRpclwiIDogLTFcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBpLmdldCgncXVlcnknLCBxdWVyeSwgdHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlbWFpbmluZyA9IGRhdGEucG9wKCk7XG4gICAgICAgICAgICAgICAgZm9yKGl0ZW0gaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YS5wdXNoKGRhdGFbaXRlbV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUubmV4dEJ1dHRvbiA9IFwiTG9hZCBuZXh0IDEwMCBpdGVtc1wiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIsIG1zZykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5leHRCdXR0b24gPSBcIkxvYWQgbmV4dCAxMDAgaXRlbXNcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUubG9hZEl0ZW1zID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgICAgICAgJHNjb3BlLmxvYWRidG4gPSBcIkxvYWRpbmcuLi5cIjtcbiAgICAgICAgdmFyIGZyb20gPSBxdWVyeS5mcm9tLnNwbGl0KCc6Jyk7XG4gICAgICAgIHZhciBmcm9tX2RhdGUgPSBuZXcgRGF0ZShxdWVyeS5kYXRlKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhxdWVyeSlcbiAgICAgICAgXG4gICAgICAgIGZyb21fZGF0ZS5zZXRIb3Vycyhmcm9tWzBdKTtcbiAgICAgICAgZnJvbV9kYXRlLnNldE1pbnV0ZXMoZnJvbVsxXSk7XG5cbiAgICAgICAgdmFyIHVuaXhfZGF0ZSA9IGFuZ3VsYXIuY29weShxdWVyeS5kYXRlKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb3B5aW5nIGRhdGVcIik7XG4gICAgICAgIFxuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdmaWx0ZXInLCB0cnVlKTtcbiAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnZnJvbScsIHF1ZXJ5LmZyb20pO1xuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdkYXRlJywgdW5peF9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2xpbWl0JywgcXVlcnkubGltaXQpO1xuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdvcmRlcmJ5JywgcXVlcnkub3JkZXJieSk7XG4gICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2RpcicsIHF1ZXJ5LmRpcik7XG4gICAgICAgXG5cbiAgICAgICAgaWYgKHF1ZXJ5LnRvKSB7XG4gICAgICAgICAgICB2YXIgdG8gPSBxdWVyeS50by5zcGxpdCgnOicpO1xuICAgICAgICAgICAgdmFyIHRvX2RhdGUgPSBuZXcgRGF0ZShxdWVyeS5kYXRlKTtcbiAgICAgICAgICAgIHRvX2RhdGUuc2V0SG91cnModG9bMF0pO1xuICAgICAgICAgICAgdG9fZGF0ZS5zZXRNaW51dGVzKHRvWzFdKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3RvJywgcXVlcnkudG8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRvX2RhdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5LmRlc2NyaXB0aW9uICE9IFwiXCIpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2Rlc2NyaXB0aW9uJywgcXVlcnkuZGVzY3JpcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXVlcnkuZGVzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5LmNhdGVnb3J5ICE9IFwiXCIpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2NhdGVnb3J5JywgcXVlcnkuY2F0ZWdvcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXVlcnkuY2F0ZWdvcnkgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5LnNyY2lwICE9IFwiXCIpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3NyY2lwJywgcXVlcnkuc3JjaXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaChcInNyY2lwXCIsIG51bGwpO1xuICAgICAgICAgICAgcXVlcnkuc3JjaXAgPSBudWxsO1xuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChxdWVyeS5kc3RpcCAhPSBcIlwiKSB7XG4gICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdkc3RpcCcsIHF1ZXJ5LmRzdGlwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goXCJkc3RpcFwiLCBudWxsKTtcbiAgICAgICAgICAgIHF1ZXJ5LmRzdGlwID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZW5kID0ge1xuICAgICAgICAgICAgXCJmcm9tXCIgOiBmcm9tX2RhdGUsXG4gICAgICAgICAgICBcInRvXCIgOiB0b19kYXRlLFxuICAgICAgICAgICAgXCJjYXRlZ29yeVwiIDogcXVlcnkuY2F0ZWdvcnksXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCIgOiBxdWVyeS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIFwibGltaXRcIiA6IHF1ZXJ5LmxpbWl0LFxuICAgICAgICAgICAgXCJvcmRlcmJ5XCIgOiBxdWVyeS5vcmRlcmJ5LFxuICAgICAgICAgICAgXCJkaXJcIiA6IHF1ZXJ5LmRpcixcbiAgICAgICAgICAgIFwic3JjaXBcIiA6IHF1ZXJ5LnNyY2lwLFxuICAgICAgICAgICAgXCJkc3RpcFwiIDogcXVlcnkuZHN0aXBcbiAgICAgICAgfVxuICAgICAgICBhcGkuZ2V0KCdxdWVyeScsIHNlbmQsIHRydWUpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0JHNjb3BlLnJlbWFpbmluZyA9IGRhdGEucG9wKCk7Ly9bZGF0YS5sZW5ndGggLSAxXSlcblx0XHRcdCRzY29wZS5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICRzY29wZS5sb2FkYnRuID0gXCJMb2FkXCJcblx0ICAgIH0pLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRidG4gPSBcIkxvYWRcIjsgICAgXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBpZiAoJGxvY2F0aW9uLnNlYXJjaCgpLmZpbHRlcikge1xuICAgICAgICAvLyBRdWVyeSBmaWx0ZXIgaXMgc2V0LCBhcHBseSBpdFxuICAgICAgICBcbiAgICAgICAgdmFyIHRtcF9xdWVyeSA9IGFuZ3VsYXIuY29weSgkbG9jYXRpb24uc2VhcmNoKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlyc3QgY29udmVydCBVTklYIFRpbWVzdGFtcCB0byBEYXRlXG4gICAgICAgIHRtcF9xdWVyeVsnZGF0ZSddID0gbmV3IERhdGUoTnVtYmVyKHRtcF9xdWVyeVsnZGF0ZSddKSk7XG4gICAgICAgIFxuICAgICAgICAkc2NvcGUucXVlcnkgPSB0bXBfcXVlcnk7XG4gICAgICAgIFxuICAgICAgICAvLyBGZXRjaCBpdGVtc1xuICAgICAgICAkc2NvcGUubG9hZEl0ZW1zKCRzY29wZS5xdWVyeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmV0Y2ggMTAwIHJlY2VudCBldmVudHNcbiAgICAgICAgYXBpLmdldChcIjEwMFwiKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmV2ZW50cyA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBpZiAoJHNjb3BlLmZpbHRlci5zcmNfaXAgIT0gXCJcIil7XG4gICAgICAgICAgICBpZiAoXCJTb3VyY2VcIiBpbiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiSVA0XCIgaW4gaXRlbS5Tb3VyY2VbMF0gJiYgXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uU291cmNlWzBdLklQNFswXS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHNjb3BlLmZpbHRlci5zcmNfaXAudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHNjb3BlLmZpbHRlci50cnRfaXAgIT0gXCJcIil7XG4gICAgICAgICAgICBpZiAoXCJUYXJnZXRcIiBpbiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiSVA0XCIgaW4gaXRlbS5UYXJnZXRbMF0gJiYgXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uVGFyZ2V0WzBdLklQNFswXS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHNjb3BlLmZpbHRlci50cnRfaXAudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzY29wZS5maWx0ZXIuY2F0ZWdvcnkgIT0gXCJcIikge1xuICAgICAgICAgICAgaWYgKGl0ZW0uQ2F0ZWdvcnlbMF0udG9Mb3dlckNhc2UoKS5pbmRleE9mKCRzY29wZS5maWx0ZXIuY2F0ZWdvcnkudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkc2NvcGUuZmlsdGVyLmRlc2MgIT0gXCJcIikge1xuICAgICAgICAgICAgaWYgKGl0ZW0uRGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKS5pbmRleE9mKCRzY29wZS5maWx0ZXIuZGVzYy50b0xvd2VyQ2FzZSgpKSA+IC0xKVxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKDEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRzY29wZS5maWx0ZXIuZmxvd3NfZnJvbSAhPSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5GbG93Q291bnQgPiBOdW1iZXIoJHNjb3BlLmZpbHRlci5mbG93c19mcm9tKSlcbiAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkc2NvcGUuZmlsdGVyLmZsb3dzX3RvICE9IFwiXCIpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLkZsb3dDb3VudCA8IE51bWJlcigkc2NvcGUuZmlsdGVyLmZsb3dzX3RvKSlcbiAgICAgICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXMucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2dpY3ZhbHVlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxvZ2ljdmFsdWUgPSBsb2dpY3ZhbHVlICogcmVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dpY3ZhbHVlID09IDEgPyB0cnVlIDogZmFsc2U7XG5cbiAgICB9XG5cbn0pO1xuXG5hcHAuZGlyZWN0aXZlKCd2YWxpZGF0ZUhvdXJzJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRvID0gW107XG4gICAgdmFyIGZyb20gPSBbXTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xuICAgICAgICAgICAgY3RybC4kdmFsaWRhdG9ycy50aW1lID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzLm5nTW9kZWwgPT0gXCJxdWVyeS5mcm9tXCIgJiYgdmlld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSB2aWV3VmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IHZpZXdWYWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0by5sZW5ndGggPT0gMiB8fCBmcm9tLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvWzBdIDwgZnJvbVswXSB8fCAodG9bMF0gPD0gZnJvbVswXSAmJiB0b1sxXSA8IGZyb21bMV0pIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvWzBdIDwgMCB8fCB0b1swXSA+IDIzIHx8IHRvWzFdIDwgMCB8fCB0b1sxXSA+IDU5IHx8IGZyb21bMF0gPCAwIHx8IGZyb21bMF0gPiAyMyB8fCBmcm9tWzFdIDwgMCB8fCBmcm9tWzFdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiIsImFwcC5jb250cm9sbGVyKCdob21lQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgdXNlciwgJHRpbWVvdXQsICRpbnRlcnZhbCwgJGxvZywgJGxvY2FsU3RvcmFnZSwgJHJvdXRlLCAkbWREaWFsb2csIGRhc2hib2FyZCkge1xuICAgIFxuICAgICRzY29wZS5kYXNoYm9hcmRzID0gZGFzaGJvYXJkLmdldEFsbCgpO1xuICAgICRzY29wZS5kYXNoYm9hcmRTZXR0aW5ncyA9IGRhc2hib2FyZC5zZXR0aW5ncygpO1xuXG4gICAgJHNjb3BlLmFjdGl2ZUdyaWQgPSBmYWxzZTtcbiAgICAkc2NvcGUucmVmcmVzaF9pbnRlcnZhbCA9ICRzY29wZS5kYXNoYm9hcmRTZXR0aW5ncy5pbnRlcnZhbDtcbiAgICBcbiAgICAvLyBTdG9yZSBpbnRlcnZhbCBJRFxuICAgIHZhciByZWZyZXNoID0gdW5kZWZpbmVkO1xuICAgICRzY29wZS5yZWZyZXNoX2VuYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChyZWZyZXNoKTtcblxuICAgICRzY29wZS5vcGVuTWVudSA9IGZ1bmN0aW9uKCRtZE9wZW5NZW51LCBldikge1xuICAgICAgICBvcmlnaW5hdG9yRXYgPSBldjtcbiAgICAgICAgJG1kT3Blbk1lbnUoZXYpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuYWRkSXRlbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnYWRkSXRlbScpO1xuICAgIH1cblxuICAgICRzY29wZS5lbmFibGVHcmlkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFbmFibGUgZ3JpZCcpXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdlbmFibGVHcmlkJyk7XG4gICAgICAgICRzY29wZS5hY3RpdmVHcmlkID0gISRzY29wZS5hY3RpdmVHcmlkO1xuICAgIH1cbiAgICAkc2NvcGUuJG9uKCdyZXF1ZXN0UmVkcmF3JywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZXF1ZXN0IGFjY2VwdGVkXCIpO1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkbG9nLmRlYnVnKFwiZGVsZXRpbmcgdGltZXN0YW1wXCIpXG4gICAgICAgIGRlbGV0ZSAkbG9jYWxTdG9yYWdlWyd0aW1lc3RhbXAnXTtcbiAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgIH1cblxuICAgICRzY29wZS5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQocmVmcmVzaCkpIHtcbiAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocmVmcmVzaCk7XG4gICAgICAgICAgICByZWZyZXNoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb2FkY2FzdCBmYWlsZWQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVmcmVzaCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5jbGVhckNhY2hlKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb2FkY2FzdCcpXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3JlZnJlc2hEYXRhJyk7XG4gICAgICAgICAgICB9LCAkc2NvcGUucmVmcmVzaF9pbnRlcnZhbCoxMDAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5yZWZyZXNoX2VuYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChyZWZyZXNoKVxuXG4gICAgfVxuXG4gICAgXG5cbiAgICAkc2NvcGUuc2VsZWN0ZWREYXNoYm9hcmQgPSBkYXNoYm9hcmQuYWN0aXZlKCk7XG5cbiAgICAkc2NvcGUuZWRpdERhc2hib2FyZCA9IGZ1bmN0aW9uKGV2LCBpbmRleCkge1xuICAgICAgICAvLyBNYWtlIGEgYmFja3VwIGNvcHkgb2YgY3VycmVudCBkYXNoYm9hcmRzXG4gICAgICAgICRzY29wZS5iYWNrdXBEYXNoYm9hcmRzID0gYW5ndWxhci5jb3B5KCRzY29wZS5kYXNoYm9hcmRzKTtcblxuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBcImVkaXREYXNoYm9hcmRDb250cm9sbGVyXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkZERhc2hib2FyZC5odG1sJyxcbiAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHRydWUsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGFuc3dlcikge1xuICAgICAgICAgICAgZGFzaGJvYXJkLnNhdmUoKTtcbiAgICAgICAgICAgICRzY29wZS5yZWZyZXNoX2ludGVydmFsID0gJHNjb3BlLmRhc2hib2FyZFNldHRpbmdzLmludGVydmFsO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXNoYm9hcmRzID0gJHNjb3BlLmJhY2t1cERhc2hib2FyZHM7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuYmFja3VwRGFzaGJvYXJkcyk7XG4gICAgICAgICAgICAkc2NvcGUuYmFja3VwRGFzaGJvYXJkcyA9IHt9O1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUuZGFzaGJvYXJkcylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmV2ZXJ0aW5nXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qJHNjb3BlLiRvbignYWRkRGFzaGJvYXJkJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBZGRpbmcgbmV3IGRhc2hib2FyZFwiKTtcbiAgICAgICAgY29uc29sZS5sb2coZXYpO1xuXG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhZGREYXNoYm9hcmRDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYWRkRGFzaGJvYXJkLmh0bWwnLFxuICAgICAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG4gICAgICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOnRydWUsXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgICAgIC8vdmFyIG5ld0luZGV4ID0gZGFzaGJvYXJkLmFkZChhbnN3ZXIpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhuZXdJbmRleClcbiAgICAgICAgICAgIGRhc2hib2FyZC5zYXZlKCk7XG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc3dpdGNoRGFzaGJvYXJkJywgbmV3SW5kZXgpO1xuICAgICAgICAgICAgLypkYXNoYm9hcmQuc3dpdGNoKG5ld0luZGV4KTtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhc2hib2FyZCA9IG5ld0luZGV4O1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3JlbG9hZERhc2hib2FyZCcpOyAqXG4gICAgICAgIH0sIGZ1bmN0aW9uKCkgeyAvLyBjYW5jZWxcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH0pOyovXG5cbiAgICAkc2NvcGUuJG9uKCdzd2l0Y2hEYXNoYm9hcmQnLCBmdW5jdGlvbihldiwgaW5kZXgpIHtcbiAgICAgICAgZGVsZXRlICRsb2NhbFN0b3JhZ2VbJ3RpbWVzdGFtcCddO1xuICAgICAgICBkYXNoYm9hcmQuc3dpdGNoKGluZGV4KVxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWREYXNoYm9hcmQgPSBkYXNoYm9hcmQuYWN0aXZlKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coKVxuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgncmVsb2FkRGFzaGJvYXJkJyk7XG4gICAgfSk7XG4gICAgXG5cblxufSk7XG5cbmFwcC5jb250cm9sbGVyKCdib3gnLCBmdW5jdGlvbigkc2NvcGUsICRsb2csICRtZERpYWxvZywgUFJPVE9DT0xTLCBUWVBFUywgQ0FURUdPUklFUywgUElFQ0hBUlQsIEFSRUEsIGFwaSwgdXNlciwgJG1kTWVkaWEsICRsb2NhbFN0b3JhZ2UsICR0aW1lb3V0LCBkYXNoYm9hcmQpe1xuICAgIFxuICAgIGZ1bmN0aW9uIHRpbWVTaGlmdChvZmZzZXQpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhvZmZzZXQpXG4gICAgICAgIG9mZnNldCA9IGFuZ3VsYXIuaXNEZWZpbmVkKG9mZnNldCkgPyBvZmZzZXQgOiAwO1xuICAgICAgICAkc2NvcGUuYm94LmNvbmZpZy5iZWdpbnRpbWUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc2hpZnRfdGltZSA9IChOdW1iZXIob2Zmc2V0KSArIE51bWJlcigkc2NvcGUuYm94LmNvbmZpZy5wZXJpb2QpKSo2MCo2MCoxMDAwO1xuICAgICAgICAgICAgdmFyIHNoaWZ0ZWQgPSBub3cuZ2V0VGltZSgpIC0gc2hpZnRfdGltZTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHNoaWZ0ZWQvMTAwMCk7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgJHNjb3BlLmJveC5jb25maWcuZW5kdGltZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICBub3cuc2V0VGltZShub3cuZ2V0VGltZSgpIC0gTnVtYmVyKG9mZnNldCkqNjAqNjAqMTAwMCk7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihub3cvMTAwMCk7XG4gICAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgdGltZVNoaWZ0KCRzY29wZS5kYXNoYm9hcmQuc2V0dGluZ3MudGltZXNoaWZ0KTtcblxuICAgICRzY29wZS5ib3gubG9hZGluZyA9IHRydWU7XG4gICAgICAgIFxuICAgICRzY29wZS5vcGVuTWVudSA9IGZ1bmN0aW9uKCRtZE9wZW5NZW51LCBldikge1xuICAgICAgICBvcmlnaW5hdG9yRXYgPSBldjtcbiAgICAgICAgJG1kT3Blbk1lbnUoZXYpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuYmFja3VwTW9kZWwgPSB7fTtcblxuICAgICRzY29wZS5wcm90b2NvbCA9IFBST1RPQ09MUztcbiAgICAkc2NvcGUudHlwZXMgPSBUWVBFUztcbiAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IENBVEVHT1JJRVM7XG4gICAgXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEVkaXQgbW9kZSBoYW5kbGluZ1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFRyaWdnZXIgZWRpdGluZyBtb2RlIGFuZCBzYXZlIGN1cnJlbnQgc3RhdGVcbiAgICAkc2NvcGUuZWRpdCA9IGZ1bmN0aW9uKGJveCkge1xuICAgICAgICAkc2NvcGUuZWRpdE1vZGUgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuYmFja3VwTW9kZWwgPSBhbmd1bGFyLmNvcHkoYm94KTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIGNoYW5nZXMgYW5kIGRpc2FibGUgZWRpdCBtb2RlXG4gICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZGFzaGJvYXJkLnNhdmUoKTsgXG5cbiAgICAgICAgJHNjb3BlLmJhY2t1cE1vZGVsID0ge307XG5cbiAgICAgICAgJHNjb3BlLmJveC5jb25maWcudHlwZSA9ICRzY29wZS5ib3gudHlwZTtcbiAgICAgICAgXG4gICAgICAgIC8vIERpc2FibGUgZWRpdCBtb2RlXG4gICAgICAgICRzY29wZS5lZGl0TW9kZSA9IGZhbHNlO1xuXG4gICAgICAgIGNhY2hlX3RpbWUgPSAzMDAgKyAxMDtcblxuICAgICAgICAvLyBHZXQgcmVxdWlyZWQgZGF0YVxuICAgICAgICBnZXREYXRhKCk7XG4gICAgfVxuXG4gICAgLy8gUmV2ZXJ0IHRvIG9yaWdpbmFsIGFuZCBkaXNhYmxlIGVkaXQgbW9kZVxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgJHNjb3BlLmJveCA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYmFja3VwTW9kZWwpO1xuICAgICAgICAkc2NvcGUuYmFja3VwTW9kZWwgPSB7fTtcbiAgICB9XG4gICAgXG4gICAgJHNjb3BlLnRvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aW1lU2hpZnQoJHNjb3BlLmJveC5zZXR0aW5ncy50aW1lc2hpZnQpXG4gICAgICAgIGFwaS5nZXQoJ3RvcCcsICRzY29wZS5ib3guY29uZmlnLCB0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgJHNjb3BlLmJveC5kYXRhID0gZGF0YTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB2YXIgY2FjaGVfdGltZSA9IChuZXcgRGF0ZSgpIC0gbmV3IERhdGUoJGxvY2FsU3RvcmFnZVsndGltZXN0YW1wJ10pKS8xMDAwO1xuICAgIGlmIChpc05hTihjYWNoZV90aW1lKSlcbiAgICAgICAgY2FjaGVfdGltZSA9IDMwMCArIDEwO1xuXG4gICAgLy8gU2hvdyBsb2FkaW5nIGluZGljYXRvclxuICAgIGlmIChjYWNoZV90aW1lIDwgMzAwKSB7XG4gICAgICAgICRzY29wZS5ib3gubG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmJveC5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnRGF0YSBpcyBub3QgY2FjaGVkLCByZWRyYXcnKVxuICAgIH1cblxuICAgICRzY29wZS4kb24oJ2dyaWRzdGVyLWl0ZW0taW5pdGlhbGl6ZWQnLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmICgkc2NvcGUuYm94LnR5cGUgPT0gJ3BpZWNoYXJ0JyB8fCAkc2NvcGUuYm94LnR5cGUgPT0gJ2JhcmNoYXJ0Jykge1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7ICRzY29wZS4kZW1pdCgncmVxdWVzdFJlZHJhdycpO30sIDUwMCk7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICAgICAgdGltZVNoaWZ0KCRzY29wZS5kYXNoYm9hcmQuc2V0dGluZ3MudGltZXNoaWZ0KTtcbiAgICAgICAgaWYgKCRzY29wZS5ib3gudHlwZSA9PSBcInBpZWNoYXJ0XCIgfHwgJHNjb3BlLmJveC50eXBlID09IFwiYmFyY2hhcnRcIikge1xuICAgICAgICAgICAgLy8gVGhlIGJveCBpcyBhIGNoYXJ0XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmJveC50eXBlID09ICdwaWVjaGFydCcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYm94Lm9wdGlvbnMgPSBQSUVDSEFSVC5vcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRzY29wZS5ib3gudHlwZSA9PSAnYmFyY2hhcnQnKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUuYm94LnRpdGxlICsgXCI6IFwiICsgJHNjb3BlLmJveC5zZWxlY3RvcilcbiAgICAgICAgICAgICAgICAkc2NvcGUuYm94Lm9wdGlvbnMgPSBhbmd1bGFyLmNvcHkoQVJFQS5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmJveC5zZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYm94Lm9wdGlvbnMuY2hhcnQueUF4aXMuYXhpc0xhYmVsID0gXCJGbG93IENvdW50XCI7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ib3gub3B0aW9ucy5jaGFydC55ID0gZnVuY3Rpb24oZCkgeyByZXR1cm4gTnVtYmVyKGQuRmxvd0NvdW50KX0gXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJveC5vcHRpb25zLmNoYXJ0LnlBeGlzLmF4aXNMYWJlbCA9IFwiRXZlbnRzIENvdW50XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICBcbiAgICAgICAgICAgICRzY29wZS5ib3guY29uZmlnLnR5cGUgPSAkc2NvcGUuYm94LnR5cGU7XG5cbiAgICAgICAgICAgIGlmIChjYWNoZV90aW1lID4gMzAwKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmJveC5jb25maWcpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYm94LmNvbmZpZy5tZXRyaWMgPT0gXCJjdXN0b21cIikge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeS5tZXRyaWMgPSBxdWVyeS5jdXN0b21fbWV0cmljO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcihpdGVtIGluIHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHF1ZXJ5W2l0ZW1dID09IFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVtpdGVtXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocXVlcnkpXG4gICAgICAgICAgICAgICAgYXBpLmdldCgnYWdnJywgcXVlcnksIGZhbHNlLCB0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJveC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ib3guZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncmVxdWVzdFJlZHJhdycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5ib3gudHlwZSA9PSAndG9wJyAmJiBjYWNoZV90aW1lID4gMzAwKSB7XG4gICAgICAgICAgICBhcGkuZ2V0KCd0b3AnLCAkc2NvcGUuYm94LmNvbmZpZywgZmFsc2UsIHRydWUpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5ib3gubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICRzY29wZS5ib3guZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5ib3gudHlwZSA9PSAnc3VtJyAmJiBjYWNoZV90aW1lID4gMzAwKSB7XG4gICAgICAgICAgICBhcGkuZ2V0KCdjb3VudCcsICRzY29wZS5ib3guY29uZmlnLCBmYWxzZSwgdHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmJveC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmJveC5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0RGF0YSgpO1xuXG5cbiAgICAkc2NvcGUuJG9uKCdyZWZyZXNoRGF0YScsIGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgLy9jb25zb2xlLmxvZygncmVmcmVzaGluZycpOyBcbiAgICAgICAgY2FjaGVfdGltZSA9IDMwMCsxMDsgXG4gICAgICAgIGdldERhdGEoKTtcbiAgICB9KVxuIFxuICAgICRzY29wZS4kb24oJ3NhdmVVc2VyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGRhc2hib2FyZC5zYXZlKCk7IFxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiRvbignZ3JpZHN0ZXItaXRlbS1yZXNpemVkJywgZnVuY3Rpb24oZ3JpZHN0ZXIpIHtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJyZXF1ZXN0IGFjY2VwdGVkXCIpO1xuICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgICB9LCAxMDApO1xuICAgIH0pXG5cblxuICAgICRzY29wZS5zaG93RWRpdCA9IGZ1bmN0aW9uKGV2LCBib3gpIHtcbiAgICAgICAgJHNjb3BlLmJhY2t1cE1vZGVsID0gYW5ndWxhci5jb3B5KCRzY29wZS5ib3gpO1xuXG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdlZGl0Qm94Q29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2VkaXQuaHRtbCcsXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6dHJ1ZSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHRydWUsXG4gICAgICAgICAgICBsb2NhbHM6IHtcbiAgICAgICAgICAgICAgICBib3g6ICRzY29wZS5ib3hcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGFuc3dlcikge1xuICAgICAgICAgICAgJHNjb3BlLnNhdmUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7IC8vIGNhbmNlbFxuICAgICAgICAgICAgJHNjb3BlLmJveCA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYmFja3VwTW9kZWwpO1xuICAgICAgICAgICAgJHNjb3BlLmJhY2t1cE1vZGVsID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgfTtcblxuICBcbn0pO1xuXG5hcHAuY29udHJvbGxlcignZ3JpZCcsIGZ1bmN0aW9uKCRzY29wZSwgJHRpbWVvdXQsICRsb2csICRyb3V0ZSwgdXNlciwgZGFzaGJvYXJkKSB7XG4gICAgJHNjb3BlLm9wdCA9IHtcbiAgICAgICAgb3V0ZXJNYXJnaW46IGZhbHNlLFxuICAgICAgICBjb2x1bW5zOiA4LFxuICAgICAgICBwdXNoaW5nOiB0cnVlLFxuICAgICAgICByb3dIZWlnaHQ6IDE3MCxcbiAgICAgICAgY29sV2lkdGggOiAnYXV0bycsXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxuICAgICAgICBzd2FwcGluZzogdHJ1ZSxcbiAgICAgICAgbW9iaWxlQnJlYWtQb2ludDogOTMzLFxuICAgICAgICBkcmFnZ2FibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICByZXNpemFibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaGFuZGxlczogWyduJywgJ2UnLCAncycsICd3JywgJ3NlJywgJ3N3J10sXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbihldmVudCwgJGVsZW1lbnQsIHdpZGdldCkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZXNpemUgZW5kXCIpO1xuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncmVxdWVzdFJlZHJhdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmRhc2hib2FyZCA9IGRhc2hib2FyZC5nZXQoKTtcbiAgICAkc2NvcGUuaXRlbXMgPSAkc2NvcGUuZGFzaGJvYXJkLml0ZW1zO1xuICAgIC8vY29uc29sZS5sb2coJHNjb3BlLml0ZW1zKTtcblxuICAgICRzY29wZS4kb24oJ2VuYWJsZUdyaWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRzY29wZS5vcHQucmVzaXphYmxlLmVuYWJsZWQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3NhdmVVc2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICRzY29wZS5vcHQucmVzaXphYmxlLmVuYWJsZWQgPSAhJHNjb3BlLm9wdC5yZXNpemFibGUuZW5hYmxlZDsgXG4gICAgICAgICRzY29wZS5vcHQuZHJhZ2dhYmxlLmVuYWJsZWQgPSAhJHNjb3BlLm9wdC5kcmFnZ2FibGUuZW5hYmxlZDsgXG4gICAgfSlcblxuICAgICRzY29wZS5yZW1vdmUgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgdmFyIHRtcCA9ICRzY29wZS5pdGVtcy5zcGxpY2UoJHNjb3BlLml0ZW1zLmluZGV4T2YoYm94KSwgMSk7XG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzYXZlVXNlcicpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuJG9uKCdhZGRJdGVtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICAgICAgXCJ0aXRsZVwiIDogXCJOZXcgYm94XCIsXG4gICAgICAgICAgICBcImxvYWRpbmdcIiA6IGZhbHNlLFxuICAgICAgICAgICAgc2l6ZVg6IDEsXG4gICAgICAgICAgICBzaXplWTogMSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCIsXG4gICAgICAgICAgICBjb25maWcgOiB7XG4gICAgICAgICAgICAgICAgcGVyaW9kIDogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9yb3cgOiByb3csXG4gICAgICAgICAgICAvL2NvbCA6IGNvbFxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLml0ZW1zLnB1c2goaXRlbSlcbiAgICB9KTtcblxuICAgIFxuXG4gICAgJHNjb3BlLiRvbigncmVsb2FkRGFzaGJvYXJkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5kYXNoYm9hcmQgPSBkYXNoYm9hcmQuZ2V0KCk7XG4gICAgICAgICRzY29wZS5pdGVtcyA9ICRzY29wZS5kYXNoYm9hcmQuaXRlbXM7XG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5kYXNoYm9hcmQpO1xuICAgICAgICAkc2NvcGUuJGVtaXQoJ3JlcXVlc3RSZWRyYXcnKVxuICAgIH0pXG5cblxuXG5cbn0pXG5cblxuYXBwLmNvbnRyb2xsZXIoJ2VkaXRCb3hDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbWREaWFsb2csIGJveCwgUFJPVE9DT0xTLCBUWVBFUywgQ0FURUdPUklFUykge1xuICAgIFxuICAgICRzY29wZS5ib3ggPSBib3g7XG4gICAgXG4gICAgJHNjb3BlLmJhY2t1cE1vZGVsID0gYW5ndWxhci5jb3B5KGJveCk7XG5cbiAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IENBVEVHT1JJRVM7XG4gICAgJHNjb3BlLnByb3RvY29scyA9IFBST1RPQ09MUztcbiAgICAkc2NvcGUudHlwZXMgPSBUWVBFUztcblxuICAgICRzY29wZS5zYXZlQW5kQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICB9O1xuICAgICRzY29wZS5hbnN3ZXIgPSBmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUoYW5zd2VyKTtcbiAgICB9O1xuXG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oYm94KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsbGluZ1wiKTtcbiAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgIH1cblxuICAgICRzY29wZS5jaGFuZ2VTZWxlY3RvciA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAvL2FuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuYm94LmRhdGEsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgLy8gICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlLnZhbHVlcywgZnVuY3Rpb24odmFsLCBrKSB7XG4gICAgICAgIC8vICAgICAgICB2YWxbJ3NlbGVjdG9yJ10gPSBzZWw7XG4gICAgICAgIC8vICAgIH0pXG4gICAgICAgIC8vfSlcbiAgICAgICAgLy8kc2NvcGUuJGVtaXQoJ3JlcXVlc3RSZWRyYXcnKVxuXG4gICAgfVxuXG5cbn0pO1xuXG5hcHAuY29udHJvbGxlcignYWRkRGFzaGJvYXJkQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJG1kRGlhbG9nLCBkYXNoYm9hcmQpIHtcbiAgICBcbiAgICAkc2NvcGUuZWRpdERhc2hib2FyZCA9IGZhbHNlO1xuICAgIFxuICAgICRzY29wZS5zYXZlQW5kQ2xvc2UgPSBmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgLy92YXIgbmV3SW5kZXggPSBkYXNoYm9hcmQuYWRkKGFuc3dlcik7XG4gICAgICAgIC8vZGFzaGJvYXJkLnNhdmUoKTtcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUoYW5zd2VyKTtcbiAgICB9O1xuXG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oYm94KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsbGluZ1wiKTtcbiAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgIH1cblxufSk7XG5cblxuYXBwLmNvbnRyb2xsZXIoJ2VkaXREYXNoYm9hcmRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlLCAkbWREaWFsb2csIGRhc2hib2FyZCkge1xuICAgIFxuICAgIC8vIExvYWQgZGFzaGJvYXJkIHNldHRpbmdzXG4gICAgJHNjb3BlLmRiID0gZGFzaGJvYXJkLnNldHRpbmdzKCk7XG5cbiAgICAvLyBWYXJpYmxlIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBlZGl0aW5nIGFuZCBhZGRpbmcgYSBkYXNoYm9hcmRcbiAgICAvLyBXZSBhcmUgdXNpbmcgdGhlIHNhbWUgcGFydGlhbCB0byBkaXNwbGF5IHdpdGhpbiBkaWFsb2dcbiAgICAkc2NvcGUuZWRpdERhc2hib2FyZCA9IHRydWU7XG5cbiBcbiAgICAkc2NvcGUuc2F2ZUFuZENsb3NlID0gZnVuY3Rpb24oYW5zd2VyKSB7XG4gICAgICAgIGRhc2hib2FyZC51cGRhdGUoYW5zd2VyKTtcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmRlbGV0ZURhc2hib2FyZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBkYXNoYm9hcmQuZGVsZXRlKCk7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnc3dpdGNoRGFzaGJvYXJkJywgMCk7XG4gICAgICAgIGRhc2hib2FyZC5zYXZlKCk7XG4gICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgfVxuXG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oYm94KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsbGluZ1wiKTtcbiAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgIH1cblxufSk7XG4iLCJhcHAuY29udHJvbGxlcignbG9naW5Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICRsb2csIHVzZXIpIHtcblx0JHNjb3BlLnRpdGxlID0gXCJMb2dpbiB0byBOZW1lYSBEYXNoYm9hcmRcIjtcblx0JHNjb3BlLmxvZ2luQnRuID0gXCJMb2dpblwiO1xuICAgIFxuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbihjcmVkKSB7XG5cdFx0JHNjb3BlLmxvZ2luQnRuID0gXCJBdXRoZW50aWNhdGluZy4uLlwiO1xuICAgICAgICAkc2NvcGUubG9naW5CdG5EaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgdXNlci5hdXRoKGNyZWQpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7ICAgIFxuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24obXNnKSB7XG4gICAgICAgICAgICAkc2NvcGUuZXJyb3JfbWVzID0gbXNnO1xuICAgICAgICAgICAgJHNjb3BlLmxvZ2luQnRuID0gXCJMb2dpblwiXG4gICAgICAgICAgICAkc2NvcGUubG9naW5CdG5EaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9KVxuICAgIH1cblxuXG4gICAgdmFyIHBhdHRlcm4gPSBUcmlhbmdsaWZ5KHtcbiAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgeF9jb2xvcnM6ICdHbkJ1JyxcbiAgICAgICAgeV9jb2xvcnM6ICdHbkJ1JyxcbiAgICAgICAgY2VsbF9zaXplOiA1MFxuXG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZyhwYXR0ZXJuKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ2luXCIpLmFwcGVuZENoaWxkKHBhdHRlcm4uY2FudmFzKCkpXG5cblxuXHRcdFxuXHRcdC8qbG9naW5BdXRoLmZldGNoVXNlcih1c2VyKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcblxuXHRcdFx0JGxvZy5pbmZvKGRhdGEpO1xuXG5cdFx0XHRpZiAoZGF0YVtcInN1Y2Nlc3NcIl0gPT0gdHJ1ZSkge1xuXHRcdFx0XHQvLyRsb2cuaW5mbyhkYXRhKTtcdFxuXHRcdFx0XHQkc2NvcGUubG9naW5CdG4gPSBcIlN1Y2Nlc3NcIjtcblx0XHRcdFx0JGxvY2F0aW9uLnBhdGgoXCIvXCIpO1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldCgnbG9nZ2VkSW4nLCB0cnVlKTtcblx0XHRcdFx0bG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ2xvZ2dlZEluLnB3Jywgc2hhMjU2X2RpZ2VzdChkYXRhLnBhc3N3b3JkKSk7XHRcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHQkbG9nLmVycm9yKFwiZXJyb3IgLSBiYWQgcGFzc3dvcmRcIik7XG5cdFx0XHRcdCRzY29wZS5lcnJvcl9tZXMgPSBcIkJhZCBwYXNzd29yZFwiO1xuXHRcdFx0XHQkc2NvcGUubG9naW5CdG4gPSBcIkxvZ2luXCI7XG5cdFx0XHRcdGxvZ2luQ29ycmVjdCA9IGZhbHNlO1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldCgnbG9nZ2VkSW4nLCBmYWxzZSk7XHRcblx0XHRcdH1cblx0XHR9KTsqL1xufSk7XG5cblxuIiwiYXBwLmNvbnRyb2xsZXIoJ3Byb2ZpbGVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nLCAkbG9jYWxTdG9yYWdlLCB1c2VyLCBkYXNoYm9hcmQpIHtcbiAgICAkc2NvcGUudXNlciA9IHVzZXIuZ2V0KCk7XG5cbiAgICAkc2NvcGUuc2F2ZV9idG4gPSBcIlNhdmVcIjtcblxuICAgICRzY29wZS5lZGl0VXNlciA9IGZ1bmN0aW9uKHVzZXJfZGF0YSkge1xuICAgICAgICAkc2NvcGUuc2F2ZV9idG4gPSBcIlByb2Nlc3NpbmcuLi5cIjtcblxuICAgICAgICB1c2VyX2RhdGFbXCJzZXR0aW5nc1wiXSA9IGRhc2hib2FyZC5jbGVhbigpO1xuXG4gICAgICAgIHVzZXIucHV0KHVzZXJfZGF0YSwgdHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl0gPSBkYXRhW1wiand0XCJdO1xuICAgICAgICAgICAgJHNjb3BlLmVycl9tc2cgPSBcIlwiO1xuICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSBhbmd1bGFyLmNvcHkodXNlci5nZXQoKSk7XG4gICAgICAgICAgICAkc2NvcGUuc2F2ZV9idG4gPSBcIlNhdmVcIjtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5zYXZlX2J0biA9IFwiU2F2ZVwiO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAkbG9nLmVycm9yKGRhdGFbXCJlcnJvclwiXSk7XG4gICAgICAgICAgICAkc2NvcGUudXNlci5wYXNzd29yZCA9IFwiXCI7XG4gICAgICAgICAgICAkc2NvcGUuZXJyX21zZyA9IGRhdGFbXCJlcnJvclwiXTtcbiAgICAgICAgfSlcbiAgICB9XG59KVxuIiwiYXBwLmNvbnRyb2xsZXIoJ3VzZXJzQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgYXBpLCB1c2VyLCAkbWREaWFsb2cpIHtcbiAgICBcbiAgICB1c2VyLmdldCh0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGQpIHskc2NvcGUucGVvcGxlID0gZH0pO1xuXG4gICAgLy8kc2NvcGUudXNlcnMgPSB1c2VycztcbiAgICAvKi5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSlcbiAgICAgICAgJHNjb3BlLnVzZXJzID0gZGF0YTtcbiAgICB9KTsqL1xuXG5cbiAgICAkc2NvcGUubXlVc2VybmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdG1wID0gdXNlci5nZXQoKTtcbiAgICAgICAgcmV0dXJuIHRtcFsndXNlcm5hbWUnXTtcbiAgICB9XG5cbiAgICAkc2NvcGUuZGVsZXRlVXNlciA9IGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgY29uc29sZS5sb2codXNlcl9pZCk7XG4gICAgICAgIHVzZXIuZGVsZXRlKHVzZXJfaWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICB1c2VyLmdldCh0cnVlKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnMgPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgJHNjb3BlLmFkZFVzZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICAkc2NvcGUuYWRkVXNlckJveCA9IHRydWU7XG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhZGRVc2VyQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkZFVzZXIuaHRtbCcsXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6dHJ1ZSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHRydWUsXG4gICAgICAgICAgICAvKmxvY2Fsczoge1xuICAgICAgICAgICAgICAgIGJveDogJHNjb3BlLmJveFxuICAgICAgICAgICAgfSwqL1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgICAgIC8vJHNjb3BlLnNhdmUoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFuc3dlcilcbiAgICAgICAgICAgIHVzZXIucG9zdChhbnN3ZXIpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgdXNlci5nZXQodHJ1ZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VycyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LCBmdW5jdGlvbigpIHsgLy8gY2FuY2VsXG4gICAgICAgICAgICAvLyRzY29wZS5ib3ggPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmJhY2t1cE1vZGVsKTtcbiAgICAgICAgICAgIC8vJHNjb3BlLmJhY2t1cE1vZGVsID0ge307XG4gICAgICAgIH0pO1xuXG4gICAgfVxufSk7XG5cbmFwcC5jb250cm9sbGVyKCdhZGRVc2VyQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJG1kRGlhbG9nKSB7XG5cbiAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgdXNlcm5hbWUgOiAnJyxcbiAgICAgICAgbmFtZSA6ICcnLFxuICAgICAgICBzdXJuYW1lIDogJycsXG4gICAgICAgIHBhc3N3b3JkIDogJycsXG4gICAgICAgIHNldHRpbmdzIDpbXG5cdFx0e1xuXHRcdFx0XCJzZXR0aW5nc1wiIDoge1xuXHRcdFx0XHRcInRpdGxlXCIgOiBcIkJhc2ljXCIsXG5cdFx0XHRcdFwidGltZXNoaWZ0XCIgOiBcIjBcIixcblx0XHRcdFx0XCJpbnRlcnZhbFwiIDogXCI2MFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJpdGVtc1wiIDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJsb2FkaW5nXCIgOiBmYWxzZSxcblx0XHRcdFx0XHRcInJvd1wiIDogMCxcblx0XHRcdFx0XHRcImNvbmZpZ1wiIDoge1xuXHRcdFx0XHRcdFx0XCJwZXJpb2RcIiA6IFwiMjRcIixcblx0XHRcdFx0XHRcdFwidHlwZVwiIDogXCJwaWVjaGFydFwiLFxuXHRcdFx0XHRcdFx0XCJtZXRyaWNcIiA6IFwiY2F0ZWdvcnlcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJzaXplWFwiIDogNCxcblx0XHRcdFx0XHRcInNpemVZXCIgOiAzLFxuXHRcdFx0XHRcdFwiY29sXCIgOiAwLFxuXHRcdFx0XHRcdFwidGl0bGVcIiA6IFwiMjRoIHNoYXJlc1wiLFxuXHRcdFx0XHRcdFwidHlwZVwiIDogXCJwaWVjaGFydFwiLFxuXHRcdFx0XHRcdFwiY29udGVudFwiIDogXCJDbGljayB0aGUgbWVudSBpY29uIHRvIHNlbGVjdCBlZGl0XCJcblx0XHRcdFx0fVxuXHRcdFx0XVxuXHRcdH1cblx0XVxuXHR9XG4gICAgJHNjb3BlLnNhdmVBbmRDbG9zZSA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2codXNlcilcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUodXNlcik7XG4gICAgfTtcblxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDYW5jZWxsaW5nXCIpO1xuICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG4gICAgfVxufSlcbiIsIi8vIEZpbHRlciB0byBjb252ZXJ0IElERUEgZm9ybWF0IGZyb20gTW9uZ29EQiB0byBzdGFuZGFyZGl6ZWQgSURFQSBmb3JtYXRcbmFwcC5maWx0ZXIoJ2lkZWEnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpbnB1dCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPSAnX2lkJykge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVsnJGRhdGUnXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZVsnJGRhdGUnXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc1trZXldID0gbmV3IERhdGUodmFsdWVbJyRkYXRlJ10pLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwxOSkgKyAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufSk7XG4iLCJhcHAuZmlsdGVyKCdqc29uMmh0bWwnLCBmdW5jdGlvbigkc2NlLCAkZmlsdGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBodG1sID0gXCJcIjtcblxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaW5wdXQsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT0gXCJfaWRcIikge1xuICAgICAgICAgICAgaHRtbCA9IGh0bWwgKyBcIjxkaXY+XCI7XG5cbiAgICAgICAgICAgIC8vIFRoZSB0dXBsZSBpcyBuZXN0ZWRcbiAgICAgICAgICAgIGlmICgodHlwZW9mIHZhbHVlKSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIGtleSkgIT0gJ251bWJlcicgJiYga2V5ICE9IFwiJGRhdGVcIilcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwgKyBcIjxlbT5cIiArIGtleSArIFwiPC9lbT46IFwiO1xuICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sICsgXCI8ZGl2IGNsYXNzPVxcXCJzdWJcXFwiPlwiICsgJGZpbHRlcignanNvbjJodG1sJykodmFsdWUpICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2Yga2V5ICE9ICdudW1iZXInKSAmJiBrZXkgIT0gXCIkZGF0ZVwiKVxuICAgICAgICAgICAgICAgICAgICBodG1sID0gaHRtbCArIFwiPGVtPlwiICsga2V5ICsgXCI8L2VtPjogXCI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgZGF0ZSAoSSBrbm93LCBpdCBpcyBzb29vb28gZGlydHkpXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMTAwMDAwMDAwMDAwMClcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwgKyBcIjxzcGFuPlwiICsgJGZpbHRlcignZGF0ZScpKHZhbHVlLCd5eXl5L01NL2RkIEg6bW06c3MnKSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwgKyBcIjxzcGFuPlwiICsgdmFsdWUgKyBcIjwvc3Bhbj5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh0bWwgPSBodG1sICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuICRzY2UudHJ1c3RBcygnaHRtbCcsIGh0bWwpO1xuICAgIH0gICAgIFxufSk7XG5cbiIsImFwcC5kaXJlY3RpdmUoJ2dyaWRzdGVyRHluYW1pY0hlaWdodCcsIGZ1bmN0aW9uICgkdGltZW91dCkge1xuXG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIGl0ZW06IFwiPVwiIC8vZ3JpZHN0ZXIgaXRlbVxuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBsaW5rLFxuICAgICAgICByZXN0cmljdDogJ0EnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkgeyBcbiAgICAgICAgICAgIHZhciByb3dIZWlnaHRPcHRpb24gPSAyNzA7IC8vIENoYW5nZSB0aGlzIHZhbHVlIHdpdGggeW91ciBvd24gcm93SGVpZ2h0IG9wdGlvblxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJvd0hlaWdodE9wdGlvbiAqIHNjb3BlLml0ZW0uc2l6ZVk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNjb3BlLml0ZW0udGl0bGUpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm5ld1ZhbDogXCIgKyBuZXdWYWwgKyBcIiAgICAgaGVpZ2h0OiBcIiArIGhlaWdodClcbiAgICAgICAgICAgIGlmKG5ld1ZhbCA+IGhlaWdodCl7XG4gICAgICAgICAgICAgICAgdmFyIGRpdiA9IE1hdGguZmxvb3IobmV3VmFsIC8gcm93SGVpZ2h0T3B0aW9uKTtcbiAgICAgICAgICAgICAgICAvL2RpdisrO1xuICAgICAgICAgICAgICAgIHNjb3BlLml0ZW0uc2l6ZVkgPSBkaXY7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH1cbn0pO1xuIiwiYXBwLnNlcnZpY2UoJ2FwaScsIGZ1bmN0aW9uKCRodHRwLCAkbG9nLCAkbWRUb2FzdCwgJGxvY2FsU3RvcmFnZSwgUElFQ0hBUlQsIENPTkZJRykge1xuXG5cdHZhciBhZGRyID0gQ09ORklHW1wiaG9zdFwiXSArIFwiOlwiICsgQ09ORklHW1wicG9ydFwiXSArIFwiL1wiICsgQ09ORklHW1widmVyc2lvblwiXSArIFwiL2V2ZW50cy9cIjtcblxuICAgIHRoaXMuYXV0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJGxvY2FsU3RvcmFnZVtcInRva2VuXCJdO1xuICAgIH1cblxuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRodHRwLmdldCgnaHR0cDovL2JlbmVmaXppby5saWJlcm91dGVyLm9yZzo1NTU1L2NvbmZpZycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5hZGRyID0gZGF0YS5ob3N0ICsgJzonICsgZGF0YS5wb3J0ICsgZGF0YS5ldmVudHM7XG4gICAgICAgICAgICAkbG9jYWxTdG9yYWdlWydjb25maWcnXSA9IGRhdGE7XG4gICAgICAgICAgICBhbGVydChkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXQgPSBmdW5jdGlvbih1cmwsIHBhcmFtcywgaW5mbywgY2FjaGUpIHtcblx0XHRyZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgdXJsIDogYWRkciArIHVybCxcbiAgICAgICAgICAgIG1ldGhvZCA6IFwiR0VUXCIsXG4gICAgICAgICAgICBwYXJhbXMgOiBwYXJhbXMsXG4gICAgICAgICAgICBoZWFkZXJzIDoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyA6IHRoaXMuYXV0aCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyhcbiAgICAgICAgICAgICAgICAgICAgJG1kVG9hc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdEYXRhIHN1Y2Nlc3N1bGx5IGxvYWRlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVtZShcInN1Y2Nlc3MtdG9hc3RcIilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2FjaGUpXG4gICAgICAgICAgICAgICAgJGxvY2FsU3RvcmFnZVsndGltZXN0YW1wJ10gPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGxvZy5lcnJvcignQ2Fubm90IGZldGNoIGRhdGEnKTtcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcbiAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdDYW5ub3QgbG9hZCBkYXRhJylcbiAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwiZXJyb3ItdG9hc3RcIilcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5wb3N0ID0gZnVuY3Rpb24odXJsLCBkYXRhLCBpbmZvKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KGFkZHIgKyB1cmwsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCgnRGF0YSBzdWNjZXNzZnVsbHkgbG9hZGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwic3VjY2Vzcy10b2FzdFwiKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTsgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFx0JGxvZy5lcnJvcignQ2Fubm90IGZldGNoIGRhdGEnKTtcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdDYW5ub3QgZmV0Y2ggZGF0YScpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVtZShcImVycm9yLXRvYXN0XCIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5wdXQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGluZm8pIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnB1dChhZGRyICsgdXJsLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgJG1kVG9hc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2ltcGxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ0RhdGEgc3VjY2Vzc2Z1bGx5IGxvYWRlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVtZShcInN1Y2Nlc3MtdG9hc3RcIilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7ICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBcdCRsb2cuZXJyb3IoJ0Nhbm5vdCBmZXRjaCBkYXRhJyk7XG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyhcbiAgICAgICAgICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCgnQ2Fubm90IGZldGNoIGRhdGEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbWUoXCJlcnJvci10b2FzdFwiKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KVxuICAgIH1cblxuXG59KTtcblxuXG4iLCJhcHAuc2VydmljZSgnZGFzaGJvYXJkJywgZnVuY3Rpb24oJGxvZywgJGxvY2FsU3RvcmFnZSwgdXNlcikge1xuXG4gICAgdmFyIHNlbGVjdGVkRGFzaGJvYXJkID0gMDtcbiAgICB2YXIgZGFzaGJvYXJkcyA9ICRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddO1xuICAgIHZhciBhY3RpdmUgPSAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXVtzZWxlY3RlZERhc2hib2FyZF07XG4gICAgdmFyIGJhY2t1cDtcblxuICAgIHRoaXMuZ2V0QWxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXTtcbiAgICB9XG5cbiAgICB0aGlzLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gICRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddW3NlbGVjdGVkRGFzaGJvYXJkXTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAgJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ11bc2VsZWN0ZWREYXNoYm9hcmRdLnNldHRpbmdzO1xuICAgIH1cblxuICAgIHRoaXMuYWN0aXZlID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGluZGV4KSkge1xuICAgICAgICAgICAgc2VsZWN0ZWREYXNoYm9hcmQgPSBpbmRleFxuICAgICAgICB9XG5cbiAgICAgICAgLy9hY3RpdmUgPSAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXVtzZWxlY3RlZERhc2hib2FyZF07XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkRGFzaGJvYXJkO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24odXBkYXRlZERhc2hib2FyZCkge1xuICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh1cGRhdGVkRGFzaGJvYXJkKSlcbiAgICAgICAgICAgIGFjdGl2ZS5zZXR0aW5ncyA9IDA7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFjdGl2ZS5zZXR0aW5ncyA9IHVwZGF0ZWREYXNoYm9hcmQ7XG5cbiAgICAgICAgLy9kYXNoYm9hcmRzID0gJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ107XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNldHRpbmdzID0gYW5ndWxhci5jb3B5KCRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhzZXR0aW5ncylcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbW92ZSBkYXRhIGFuZCBncmFwaCBvcHRpb25zXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0dGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coc2V0dGluZ3NbaV0pO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhzZXR0aW5nc1tpXS5pdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNldHRpbmdzW2ldLml0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNldHRpbmdzW2ldLml0ZW1zW2pdW1wiZGF0YVwiXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2V0dGluZ3NbaV0uaXRlbXNbal1bXCJvcHRpb25zXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNldHRpbmdzO1xuICAgIH1cblxuICAgIHRoaXMuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgIFxuICAgICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgICAgICBcInNldHRpbmdzXCIgOiB0aGlzLmNsZWFuKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY29uc29sZS5sb2cocXVlcnkpXG5cbiAgICAgICAgLy8kbG9nLmluZm8ocXVlcnkpXG4gICAgICAgIHJldHVybiB1c2VyLnB1dChxdWVyeSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAkbG9nLmVycm9yKGRhdGEpXG4gICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMuYWRkID0gZnVuY3Rpb24obmV3RGFzaGJvYXJkKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gc2V0IHVwIGZpcnN0IGl0ZW0gaW4gZGFzaGJvYXJkIFxuICAgICAgICB2YXIgdG1wRGFzaGJvYXJkID0ge1xuICAgICAgICAgICAgc2V0dGluZ3MgOiBuZXdEYXNoYm9hcmQsXG4gICAgICAgICAgICBpdGVtcyA6IFt7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiIDogXCJOZXcgYm94XCIsXG4gICAgICAgICAgICAgICAgXCJsb2FkaW5nXCIgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaXplWDogMSxcbiAgICAgICAgICAgICAgICBzaXplWTogMSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIkNsaWNrIHRoZSBtZW51IGljb24gdG8gc2VsZWN0IGVkaXRcIixcbiAgICAgICAgICAgICAgICBjb25maWcgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmlvZCA6IFwiMFwiXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG5cbiAgICAgICAgJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ10ucHVzaCh0bXBEYXNoYm9hcmQpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXS5sZW5ndGggLSAxKTtcblxuICAgICAgICByZXR1cm4gKCAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXS5sZW5ndGggLSAxKTtcblxuICAgIH1cblxuICAgIHRoaXMuZGVsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGJhY2t1cCA9ICAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXS5zcGxpY2UoICRsb2NhbFN0b3JhZ2VbJ2Rhc2hib2FyZCddLmluZGV4T2YoYWN0aXZlKSwgMSk7XG4gICAgICAgIHNlbGVjdGVkRGFzaGJvYXJkID0gMDtcblxuICAgICAgICByZXR1cm4gYmFja3VwO1xuICAgIFxuICAgIH1cblxuICAgIHRoaXMuc3dpdGNoID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgYWN0aXZlID0gJGxvY2FsU3RvcmFnZVsnZGFzaGJvYXJkJ11baW5kZXhdO1xuICAgICAgICBzZWxlY3RlZERhc2hib2FyZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0ZWREYXNoYm9hcmQgPSAwO1xuICAgICAgICBhY3RpdmUgPSAkbG9jYWxTdG9yYWdlWydkYXNoYm9hcmQnXVtzZWxlY3RlZERhc2hib2FyZF1cbiAgICB9XG4gICAgICAgIFxufSk7XG4iLCJhcHAuZGlyZWN0aXZlKFwic2lkZWJhck1lbnVcIiwgZnVuY3Rpb24oKSB7XG5cdHJldHVybiB7XG4gICAgICAgIHNjb3BlOiB7XG5cdFx0XHRzZWN0aW9uOiAnPSdcblx0XHR9LFxuXHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvc2lkZWJhci1tZW51Lmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRtZFNpZGVuYXYsICRtZERpYWxvZywgJGxvY2F0aW9uLCBNRU5VLCB1c2VyLCBkYXNoYm9hcmQpIHtcbiAgICAgICAgICAgICRzY29wZS5tZW51ID0gTUVOVTtcblxuICAgICAgICAgICAgJHNjb3BlLmRhc2hib2FyZHMgPSBkYXNoYm9hcmQuZ2V0QWxsKCk7XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWREYXNoYm9hcmQgPSBkYXNoYm9hcmQuYWN0aXZlKCk7XG5cbiAgICAgICAgICAgICRzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4oJyMnICsgJGxvY2F0aW9uLnBhdGgoKSA9PSBjdXJyZW50KTtcbiAgICAgICAgICAgIH0gICBcblxuICAgICAgICAgICAgJHNjb3BlLmVuYWJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgICRzY29wZS50b2dnbGVJdGVtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZUJ0biA9IFwidG9nZ2xlZFwiO1xuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VMZWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJG1kU2lkZW5hdignbGVmdCcpLnRvZ2dsZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGRhc2hib2FyZC5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHVzZXIubG9nb3V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5hZGREYXNoYm9hcmQgPSBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWRkaW5nIG5ldyBkYXNoYm9hcmRcIik7XG5cbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhZGREYXNoYm9hcmRDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9hZGREYXNoYm9hcmQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW46IHRydWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0luZGV4ID0gZGFzaGJvYXJkLmFkZChhbnN3ZXIpO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKG5ld0luZGV4KVxuICAgICAgICAgICAgICAgICAgICBkYXNoYm9hcmQuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3N3aXRjaERhc2hib2FyZCcsIG5ld0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRGFzaGJvYXJkID0gZGFzaGJvYXJkLmFjdGl2ZShuZXdJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8qZGFzaGJvYXJkLnN3aXRjaChuZXdJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhc2hib2FyZCA9IG5ld0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgncmVsb2FkRGFzaGJvYXJkJyk7ICovXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7IC8vIGNhbmNlbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLypmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyRzY29wZS4kZW1pdCgnYWRkRGFzaGJvYXJkJyk7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgJHNjb3BlLnN3aXRjaERhc2hib2FyZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRGFzaGJvYXJkID0gZGFzaGJvYXJkLmFjdGl2ZShpbmRleCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdzd2l0Y2hEYXNoYm9hcmQnLCBpbmRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS4kb24oJ3N3aXRjaERhc2hib2FyZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3dpdGNoaW5nXCIpO1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhc2hib2FyZCA9IGRhc2hib2FyZC5hY3RpdmUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgXG4gXG4gICAgICAgIH1cblx0fTtcbn0pO1xuXG5hcHAuZGlyZWN0aXZlKFwidG9wYmFyTWVudVwiLCBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHtcblx0XHRzY29wZToge1xuXHRcdFx0c2VjdGlvbjogJz0nXG5cdFx0fSxcblx0XHR0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL3RvcGJhci1tZW51Lmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyIDogZnVuY3Rpb24oJHNjb3BlLCAkbWRTaWRlbmF2KSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlTGVmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRtZFNpZGVuYXYoJ2xlZnQnKS50b2dnbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXHR9O1xufSk7XG5cblxuYXBwLmRpcmVjdGl2ZShcImJveGVzXCIsIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4ge1xuXHRcdHNjb3BlOiB7XG5cdFx0XHRzZWN0aW9uOiAnPSdcblx0XHR9LFxuXHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYm94ZXMuaHRtbCdcblx0fTtcbn0pO1xuXG5cbiIsImFwcC5zZXJ2aWNlKCd1c2VyJywgZnVuY3Rpb24oJGxvY2FsU3RvcmFnZSwgJGh0dHAsICRtZFRvYXN0LCAkbG9jYXRpb24sICRsb2csIENPTkZJRyl7XG4gICAgdmFyIGNhY2hlID0gbnVsbDtcblxuICAgIHZhciBkYXNoYm9hcmQgPSBbXTtcblxuXHR2YXIgYWRkciA9IENPTkZJR1tcImhvc3RcIl0gKyBcIjpcIiArIENPTkZJR1tcInBvcnRcIl0gKyBcIi9cIiArIENPTkZJR1tcInZlcnNpb25cIl0gKyBcIi91c2Vycy9cIjtcblxuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkbG9jYWxTdG9yYWdlW1wiZGFzaGJvYXJkXCJdO1xuICAgIH1cblxuICAgIHRoaXMuand0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0b2tlbiA9ICRsb2NhbFN0b3JhZ2VbJ3Rva2VuJ107XG4gICAgICAgIHZhciBiYXNlNjRVcmwgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgICB2YXIgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh3aW5kb3cuYXRvYihiYXNlNjQpKTtcbiAgICB9XG5cbiAgICB0aGlzLmF1dGggPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGFkZHIpO1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdChhZGRyICsgXCJhdXRoXCIsIGFuZ3VsYXIudG9Kc29uKHVzZXIpKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl0gPSBkYXRhW1wiand0XCJdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gY29uZmlnIGFuZCBqd3QgPj4gZHVwbGljaXR5XG4gICAgICAgICAgICBkZWxldGUgJGxvY2FsU3RvcmFnZVtcImRhc2hib2FyZFwiXTtcbiAgICAgICAgICAgICRsb2NhbFN0b3JhZ2VbXCJkYXNoYm9hcmRcIl0gPSBkYXRhW1wic2V0dGluZ3NcIl07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnJvciwgc3RhdHVzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0dXMpXG4gICAgICAgICAgICAvLyBMZXQgaXQgYmUgaGFuZGxlZCBieSBjb250cm9sbGVyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5wdXQgPSBmdW5jdGlvbihkYXRhLCBpbmZvKSB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICB1cmwgOiBhZGRyLCBcbiAgICAgICAgICAgIG1ldGhvZCA6IFwiUFVUXCIsXG4gICAgICAgICAgICBkYXRhIDogYW5ndWxhci50b0pzb24oZGF0YSksXG4gICAgICAgICAgICBoZWFkZXJzIDoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyA6ICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgJG1kVG9hc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2ltcGxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ1VzZXIgc2V0dGluZ3MgdXBkYXRlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVtZShcInN1Y2Nlc3MtdG9hc3RcIilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7ICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24obXNnLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIFx0JGxvZy5lcnJvcignU29tZXRoaW5nIHdlbnQgd3Jvbmcgc2VuZGluZyB1c2VyIGRhdGEnKTtcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdTb21ldGhpbmcgd2VudCB3cm9uZycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVtZShcImVycm9yLXRvYXN0XCIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtc2c7XG4gICAgICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICAvLyBMb2dvdXQgdXNlclxuICAgIC8vIFJlbW92ZSBKV1QgZnJvbSBsb2NhbFN0b3JhZ2UgYW5kIGRlbGV0ZSBzZXNzaW9uIG9uIHNlcnZlclxuICAgIHRoaXMubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB1c2VyID0gJGxvY2FsU3RvcmFnZVtcInRva2VuXCJdO1xuXG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICB1cmwgOiBhZGRyICsgXCJsb2dvdXRcIixcbiAgICAgICAgICAgIG1ldGhvZCA6IFwiREVMRVRFXCIsXG4gICAgICAgICAgICBoZWFkZXJzIDoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyA6ICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvbG9naW5cIik7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgJGxvY2FsU3RvcmFnZVtcImRhc2hib2FyZFwiXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgJGxvY2FsU3RvcmFnZVtcInRpbWVzdGFtcFwiXTtcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNpbXBsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ0xvZ291dCBzdWNjZXNzZnVsbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjsgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnJvciwgbXNnKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvbG9naW5cIik7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRsb2NhbFN0b3JhZ2VbXCJ0b2tlblwiXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgJGxvY2FsU3RvcmFnZVtcImRhc2hib2FyZFwiXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgJGxvY2FsU3RvcmFnZVtcInRpbWVzdGFtcFwiXTtcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNpbXBsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ0xvZ291dCBmYWlsZWQgb24gc2VydmVyIHNpZGUsIGJ1dCB5b3UgYXJlIGxvZ2dlZCBvdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24oYWxsdXNlcnMpIHtcbiAgICAgICAgdmFyIHVzZXIgPSAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl07XG4gICAgICAgIFxuICAgICAgICBpZiAoYWxsdXNlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICAgICAgdXJsIDogYWRkcixcbiAgICAgICAgICAgICAgICBtZXRob2QgOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyA6IHVzZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YV9yYXcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhX3JhdylcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YV9yYXc7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAkbWRUb2FzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNpbXBsZXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KFwiQ2Fubm90IGZldGNoIHVzZXJzIGZyb20gZGF0YWJhc2VcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihcInRvcCByaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwiZXJyb3ItdG9hc3RcIilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmp3dCgpO1xuICAgIH1cblxuXG4gICAgdGhpcy5wb3N0ID0gZnVuY3Rpb24odXNlckRhdGEpIHtcbiAgICAgICAgdmFyIHVzZXIgPSAkbG9jYWxTdG9yYWdlW1widG9rZW5cIl07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgdXJsIDogYWRkcixcbiAgICAgICAgICAgIG1ldGhvZCA6IFwiUE9TVFwiLFxuICAgICAgICAgICAgZGF0YSA6IGFuZ3VsYXIudG9Kc29uKHVzZXJEYXRhKSxcbiAgICAgICAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nIDogdXNlclxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgJG1kVG9hc3RcbiAgICAgICAgICAgICAgICAgICAgLnNpbXBsZXQoKVxuICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoXCJDYW5ub3QgY3JlYXRlIHVzZXJcIilcbiAgICAgICAgICAgICAgICAgICAgLnBvc2l0aW9uKFwidG9wIHJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW1lKFwiZXJyb3ItdG9hc3RcIilcbiAgICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgIHRoaXMuZGVsZXRlID0gZnVuY3Rpb24odXNlcklkKSB7XG4gICAgICAgIHZhciB1c2VyID0gJGxvY2FsU3RvcmFnZVtcInRva2VuXCJdO1xuICAgICAgICBjb25zb2xlLmxvZyh1c2VySWQpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgdXJsIDogYWRkcixcbiAgICAgICAgICAgIG1ldGhvZCA6IFwiREVMRVRFXCIsXG4gICAgICAgICAgICBwYXJhbXMgOiB7XCJ1c2VySWRcIiA6IHVzZXJJZH0sXG4gICAgICAgICAgICBoZWFkZXJzIDoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyA6IHVzZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnJvciwgbXNnKSB7XG4gICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxuICAgICAgICAgICAgICAgICRtZFRvYXN0XG4gICAgICAgICAgICAgICAgICAgIC5zaW1wbGV0KClcbiAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KFwiQ2Fubm90IGRlbGV0ZSB1c2VyXCIpXG4gICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihcInRvcCByaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXG4gICAgICAgICAgICAgICAgICAgIC50aGVtZShcImVycm9yLXRvYXN0XCIpXG4gICAgICAgICAgICApXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
