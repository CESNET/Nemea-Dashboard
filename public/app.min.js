function config(e,t,o,n){e.when("/login",{controller:"loginController",templateUrl:"views/login.html"}).when("/",{controller:"homeController",templateUrl:"views/home.html"}).when("/user",{controller:"userController",templateUrl:"views/login.html"}).when("/events",{controller:"eventsController",templateUrl:"views/events.html",reloadOnSearch:!1}).when("/events/:id",{controller:"eventController",templateUrl:"views/event.html"}).when("/settings/profile",{controller:"profileController",templateUrl:"views/profile.html"}).when("/settings/users",{controller:"usersController",templateUrl:"views/users.html"}).otherwise({redirectTo:"/login"}),t.theme("default").primaryPalette("light-blue").accentPalette("orange"),t.theme("success-toast"),t.theme("error-toast"),o.interceptors.push("notAllowedInterceptor"),n.setKeyPrefix("nd-")}config.$inject=["$routeProvider","$mdThemingProvider","$httpProvider","$localStorageProvider"];var app=angular.module("gui",["ngMaterial","ngRoute","ngMessages","nvd3","ngStorage","ngMap","gridster"]);app.config(config),app.filter("nospace",function(){return function(e){return e?e.replace(/ /g,""):""}}),app.run(["user","$localStorage","$location","$rootScope","$log",function(e,t,o,n,r){n.$on("$locationChangeStart",function(e){void 0==t.token&&(r.info("no token found, redirecting to /login"),o.path("/login"))})}]),app.factory("notAllowedInterceptor",["$log","$localStorage","$location","$injector","$q",function(e,t,o,n,r){var i={responseError:function(n){return 401==n.status&&(e.error("You are not allowed to access, redirecting to /login"),delete t.token,o.path("/login")),r.reject(n)}};return i}]),app.constant("CONFIG",{host:"https://benefizio.liberouter.org",port:"5555",version:"v2"}),app.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),app.constant("CATEGORIES",["any","Recon.Scanning","Attempt.Login","Availability.DoS"]),app.constant("PROTOCOLS",["tcp","dns","udp"]),app.constant("TYPES",["barchart","piechart","top","sum"]),app.constant("PIECHART",{options:{chart:{type:"pieChart",height:375,x:function(e){return e.key[0]},y:function(e){return e.x},showLabels:!0,donut:!0,padAngle:0,cornerRadius:1,transitionDuration:500,labelThreshold:0,legend:{margin:{top:5,right:0,bottom:-15,left:0}},legendPosition:"top",tooltipContent:function(e,t,o,n,r){return console.log(e),console.log(o),console.log(n),console.log(r),"Olalala!"},pie:{dispatch:{elementClick:function(e){var t=new Date;console.log(e),t.setTime(t.getTime()-864e5),t.setHours(0),t.setMinutes(0),window.location="#/events?filter&date="+t.toISOString()+"&from="+(new Date).getHours()+":"+(new Date).getMinutes()+"&category="+e.data.key[0]}},labelType:"percent",labelsOutside:!1}}}}),app.constant("AREA",{options:{chart:{type:"multiBarChart",height:450,margin:{top:30,right:20,bottom:100,left:50},x:function(e){return e.x},y:function(e){return e.selector?Number(e.FlowCount):Number(e.Count)},useVoronoi:!1,clipEdge:!0,duration:100,useInteractiveGuideline:!1,tooltipContent:function(e,t,o,n,r){return"Ha"},xAxis:{showMaxMin:!1,tickFormat:function(e){return d3.time.format("%m/%d %H:%M")(new Date(e))},rotateLabels:-45},yAxis:{showMaxMin:!1,tickFormat:function(e){return d3.format("s")(e)}},multibar:{dispatch:{elementClick:function(e){var t=new Date(e.data.x);console.log(e);var o=t.getHours(),n=t.getMinutes();t.setHours(0),t.setMinutes(0),window.location="#/events?filter&date="+t.toISOString()+"&from="+("0"+o).slice(-2)+":"+("0"+n).slice(-2)+"&category="+e.data.key+"&dir=1"}}}}}}),app.constant("MENU",[{title:"Dashboard",link:"#/"},{title:"Events",link:"#/events"},{title:"Settings",items:[{title:"My profile",link:"#/settings/profile"},{title:"Users",link:"#/settings/users"}]}]),app.controller("eventController",["$scope","$routeParams","$http","api",function(e,t,o,n){e.id=t,e.geo=[],e.back=function(){window.history.back()},n.get("id/"+t.id).success(function(t){e.data=t,void 0!=e.data.Source&&void 0!=e.data.Target&&e.data.Source[0].IP4&&e.data.Target[0].IP4?(o.get("http://freegeoip.net/json/"+e.data.Target[0].IP4[0]).success(function(t){t.type="Target",e.geo.push(t)}),o.get("http://freegeoip.net/json/"+e.data.Source[0].IP4[0]).success(function(t){t.type="Source",e.geo.push(t)})):void 0==e.data.Source||void 0==e.data.Source[0].IP4?o.get("http://freegeoip.net/json/"+e.data.Target[0].IP4[0]).success(function(t){t.type="Target",e.geo.push(t)}):o.get("http://freegeoip.net/json/"+e.data.Source[0].IP4[0]).success(function(t){t.type="Source",e.geo.push(t)})})}]),app.controller("eventsController",["$scope","$http","$location","api",function(e,t,o,n){function r(t){var o=angular.lowercase(t);return function(t){return 0===e.orderBy.indexOf(o)}}e.filter={category:"",src_ip:"",trt_ip:"",desc:"",flows_from:"",flows_to:"",items:100},e.query={from:"",to:"",date:new Date,description:"",category:"",orderby:"DetectTime",dir:1,limit:100},e.orderBy=["DetectTime","Category","Description","FlowCount"],e.searchText="",e.querySearch=function(t){var o=t?e.orderBy.filter(r(t)):[];return o},e.data=[],e.loadbtn="Load",e.nextButton="Load next 100 items",console.log(e.query.date),e.activeFilter=o.search().filter,e.switchDir=function(t){-1==t||t?(e.dirVal="Descending",e.query.dir=-1):(e.dirVal="Ascending",e.query.dir=1)},e.switchDir(o.search().dir),e.loadNext=function(t){if(e.nextButton="Loading...",o.search().filter){var r=angular.copy(e.query);if(r.from=new Date(t),r.dir=1,r.to){var i=r.to.split(":"),a=new Date(r.date);a.setHours(a.getHours()+i[0]),a.setMinutes(i[1])}else var a=null;r.to=a,n.get("query",r,!0).success(function(t){for(item in t)e.data.push(t[item]);e.nextButton="Load next 100 items"}).error(function(t,o){e.nextButton="Load next 100 items"})}else r={to:new Date(t),dir:-1},n.get("query",r,!0).success(function(t){for(item in t)e.data.push(t[item]);e.nextButton="Load next 100 items"}).error(function(t,o){e.nextButton="Load next 100 items"})},e.loadItems=function(t){e.loadbtn="Loading...";var r=t.from.split(":"),i=new Date(t.date);if(i.setHours(i.getHours()+r[0]),i.setMinutes(r[1]),o.search("filter",!0),o.search("from",t.from),o.search("date",t.date),o.search("limit",t.limit),o.search("orderby",t.orderby),o.search("dir",t.dir),t.to){var a=t.to.split(":"),s=new Date(t.date);s.setHours(s.getHours()+a[0]),s.setMinutes(a[1]),o.search("to",t.to)}else var s=null;""!=t.description?o.search("description",t.description):t.description=null,""!=t.category?o.search("category",t.category):t.category=null;var c={from:i,to:s,category:t.category,description:t.description,limit:t.limit,orderby:t.orderby,dir:t.dir};n.get("query",c,!0).success(function(t){e.data=t,e.loadbtn="Load"}).error(function(){e.loadbtn="Load"})},o.search().filter?(e.query=o.search(),e.query.date=new Date(e.query.date),e.loadItems(e.query)):n.get("100").success(function(t){e.data=t}),e.events=function(t){var o=[];""!=e.filter.src_ip&&("Source"in t&&"IP4"in t.Source[0]&&t.Source[0].IP4[0].toLowerCase().indexOf(e.filter.src_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.trt_ip&&("Target"in t&&"IP4"in t.Target[0]&&t.Target[0].IP4[0].toLowerCase().indexOf(e.filter.trt_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.category&&(t.Category[0].toLowerCase().indexOf(e.filter.category.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.desc&&(t.Description.toLowerCase().indexOf(e.filter.desc.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.flows_from&&(t.FlowCount>Number(e.filter.flows_from)?o.push(1):o.push(0)),""!=e.filter.flows_to&&(t.FlowCount<Number(e.filter.flows_to)?o.push(1):o.push(0));for(var n=1,r=0;r<o.length;r++)n*=o[r];return 1==n?!0:!1}}]),app.directive("validateHours",function(){var e=[],t=[];return{require:"ngModel",link:function(o,n,r,i){i.$validators.time=function(o,n){return"query.from"==r.ngModel&&n?t=n.split(":"):n&&(e=n.split(":")),2!=e.length&&2!=t.length||!(e[0]<t[0]||e[0]<=t[0]&&e[1]<t[1]||e[0]<0||e[0]>23||e[1]<0||e[1]>59||t[0]<0||t[0]>23||t[1]<0||t[1]>59)?!0:!1}}}}),app.controller("homeController",["$scope","user","$timeout","$interval","$log","$localStorage","$route",function(e,t,o,n,r,i,a){e.activeGrid=!1,e.refresh_interval=10;var s=void 0;e.refresh_enabled=angular.isDefined(s),e.apis=[],e.openMenu=function(e,t){originatorEv=t,e(t)},e.addItem=function(){e.$broadcast("addItem")},e.enableGrid=function(){console.log("Enable grid"),e.$broadcast("enableGrid"),e.activeGrid=!e.activeGrid},e.$on("requestRedraw",function(e){e.stopPropagation(),o(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},100)}),e.clearCache=function(){r.debug("deleting timestamp"),delete i.timestamp,a.reload()},e.setInterval=function(){angular.isDefined(s)?(n.cancel(s),s=void 0,console.log("broadcast failed")):s=n(function(){console.log("broadcast"),e.$broadcast("refreshData")},1e3*e.refresh_interval),e.refresh_enabled=angular.isDefined(s)}}]),app.controller("box",["$scope","$log","$mdDialog","PROTOCOLS","TYPES","CATEGORIES","PIECHART","AREA","api","user","$mdMedia","$localStorage","$timeout",function(e,t,o,n,r,i,a,s,c,l,u,d,p){function g(t){e.box.config.begintime=function(){console.log(e.box);var o=new Date;return angular.isDefined(t)&&o.setHours(o.getHours()-Number(t)),o.setHours(o.getHours()-e.box.config.period),o}()}function f(){"piechart"==e.box.type||"barchart"==e.box.type?("piechart"==e.box.type&&(e.box.options=a.options),"barchart"==e.box.type&&(e.box.options=angular.copy(s.options)),e.box.config.type=e.box.type,h>300&&c.get("agg",e.box.config,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t,e.$emit("requestRedraw")})):"top"==e.box.type&&h>300?c.get("top",e.box.config,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t}):"sum"==e.box.type&&h>300&&c.get("count",e.box.config,!1,!0).success(function(t){e.box.loading=!1,e.box.data=t})}g(),e.box.loading=!0,e.openMenu=function(e,t){originatorEv=t,e(t)},e.editMode=!1,e.backupModel={},e.protocol=n,e.types=r,e.categories=i,e.edit=function(t){e.editMode=!0,e.backupModel=angular.copy(t),e.$emit("switch-drag")},e.save=function(){e.user(),"piechart"==e.box.type&&(e.box.options=a.options),"barchart"==e.box.type&&(e.box.options=s.options),e.backupModel={},e.box.config.type=e.box.type,e.editMode=!1,g(),e.$emit("switch-drag"),"piechart"==e.box.type||"barchart"==e.box.type?c.get("agg",e.box.config,!0).success(function(t){e.box.loading=!1,e.box.data=t}):"top"==e.box.type?c.get("top",e.box.config,!0).success(function(t){e.box.loading=!1,e.box.data=t}):"sum"==e.box.type&&c.get("count",e.box.config).success(function(t){e.box.loading=!1,e.box.data=t})},e.changeSelector=function(t){angular.forEach(e.box.data,function(e,o){angular.forEach(e.values,function(e,o){e.selector=t})}),e.$emit("requestRedraw")},e.changeSelector(e.box.selector),e.cancel=function(t){e.box=angular.copy(e.backupModel),e.backupModel={},e.editMode=!1,e.$emit("switch-drag")},e.top=function(){g(),c.get("top",e.box.config,!0).success(function(t){console.log(t),e.box.data=t})};var h=(new Date-new Date(d.timestamp))/1e3;isNaN(h)&&(h=310),300>h?e.box.loading=!1:(e.box.loading=!0,console.log("Data is cached, redraw")),e.$on("gridster-item-initialized",function(t){("piechart"==e.box.type||"barchart"==e.box.type)&&p(function(){e.$emit("requestRedraw")},500)}),f(),e.$on("refreshData",function(){h=310,f()}),e.user=function(){for(var o=angular.copy(e.items),n=0;n<o.length;n++)delete o[n].data,delete o[n].options;var r={settings:o};l.put(r).success(function(e){}).error(function(e){t.error(e)})},e.$on("saveUser",function(){e.user()}),e.$on("gridster-item-resized",function(e){p(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},100)}),e.showEdit=function(t,n){e.backupModel=angular.copy(e.box),o.show({controller:"editBoxController",templateUrl:"partials/edit.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0,locals:{box:e.box}}).then(function(t){e.save()},function(){e.box=angular.copy(e.backupModel),e.backupModel={}})}}]),app.controller("grid",["$scope","$timeout","$log","user",function(e,t,o,n){e.opt={outerMargin:!1,columns:8,pushing:!0,rowHeight:170,colWidth:"auto",floating:!0,swapping:!0,mobileBreakPoint:933,draggable:{enabled:!1},resizable:{enabled:!1,handles:["n","e","s","w","se","sw"],stop:function(t,o,n){console.log("resize end"),e.$emit("requestRedraw")}}},e.$on("enableGrid",function(){1==e.opt.resizable.enabled&&e.$broadcast("saveUser"),e.opt.resizable.enabled=!e.opt.resizable.enabled,e.opt.draggable.enabled=!e.opt.draggable.enabled}),e.remove=function(t){e.items.splice(e.items.indexOf(t),1);e.$broadcast("saveUser")},e.items=n.config(),e.$on("addItem",function(){var t={title:"New box",loading:!1,sizeX:1,sizeY:1,content:"",config:{period:0}};e.items.push(t)})}]),app.controller("editBoxController",["$scope","$mdDialog","box","PROTOCOLS","TYPES","CATEGORIES",function(e,t,o,n,r,i){e.box=o,e.backupModel=angular.copy(o),e.categories=i,e.protocols=n,e.types=r,e.saveAndClose=function(){t.hide()},e.answer=function(e){t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()},e.changeSelector=function(t){angular.forEach(e.box.data,function(e,o){angular.forEach(e.values,function(e,o){e.selector=t})}),e.$emit("requestRedraw")}}]),app.controller("loginController",["$scope","$location","$log","user",function(e,t,o,n){e.title="Login to Nemea Dashboard",e.loginBtn="Login",e.submit=function(o){e.loginBtn="Authenticating...",e.loginBtnDisabled=!0,n.auth(o).success(function(e){t.path("/")}).error(function(t){e.error_mes=t,e.loginBtn="Login",e.loginBtnDisabled=!1})}}]),app.controller("profileController",["$scope","user","api",function(e,t,o){e.user=t.config(),e.editUser=function(e){console.log(e)}}]),app.controller("usersController",["$scope","api","user","$mdDialog",function(e,t,o,n){o.get(!0).success(function(t){e.users=t}),e.deleteUser=function(t){console.log(t),o["delete"](t).success(function(t){console.log(t),o.get(!0).success(function(t){e.users=t})})},e.addUser=function(t){e.addUserBox=!0,n.show({controller:"addUserController",templateUrl:"partials/addUser.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0,fullscreen:!0}).then(function(t){console.log(t),o.post(t).success(function(t){console.log(t),o.get(!0).success(function(t){e.users=t})})},function(){})}}]),app.controller("addUserController",["$scope","$mdDialog",function(e,t){e.user={username:"",name:"",surname:"",password:"",settings:[]},e.saveAndClose=function(e){console.log(e),t.hide(e)},e.cancel=function(e){console.log("Cancelling"),t.cancel()}}]),app.directive("gridsterDynamicHeight",["$timeout",function(e){function t(e,t,o){e.$watch(function(){return t[0].scrollHeight},function(t,o){var n=270,r=n*e.item.sizeY;if(t>r){var i=Math.floor(t/n);e.item.sizeY=i}})}var o={scope:{item:"="},link:t,restrict:"A"};return o}]),app.filter("idea",function(){return function(e){var t={};return angular.forEach(e,function(e,o){"_id"!=o&&(e.$date?t[o]=new Date(e.$date).toISOString().slice(0,19)+"Z":t[o]=e)}),t}}),app.filter("json2html",["$sce","$filter",function(e,t){return function(o){var n="";return angular.forEach(o,function(e,o){"_id"!=o&&(n+="<div>","object"==typeof e?("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=n+'<div class="sub">'+t("json2html")(e)+"</div>"):("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=e>1e12?n+"<span>"+t("date")(e,"yyyy/MM/dd H:mm:ss")+"</span>":n+"<span>"+e+"</span>"),n+="</div>")}),e.trustAs("html",n)}}]),app.service("api",["$http","$log","$mdToast","$localStorage","PIECHART","CONFIG",function(e,t,o,n,r,i){var a=i.host+":"+i.port+"/"+i.version+"/events/";this.auth=function(){return n.token},this.config=function(){e.get("http://benefizio.liberouter.org:5555/config").success(function(e){this.addr=e.host+":"+e.port+e.events,n.config=e,alert(e)})},this.get=function(r,i,s,c){return e({url:a+r,method:"GET",params:i,headers:{Authorization:this.auth()}}).success(function(e){return s&&o.show(o.simple().textContent("Data successully loaded").position("top right").hideDelay(3e3).theme("success-toast")),c&&(n.timestamp=new Date),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot load data").position("top right").hideDelay(3e3).theme("error-toast"))})},this.post=function(n,r,i){return e.post(a+n,JSON.stringify(r)).success(function(e){return i&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot fetch data").position("top right").hideDelay(3e3).theme("error-toast"))})},this.put=function(n,r,i){return e.put(a+n,JSON.stringify(r)).success(function(e){return i&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(){t.error("Cannot fetch data"),o.show(o.simple().textContent("Cannot fetch data").position("top right").hideDelay(3e3).theme("error-toast"))})}}]),app.directive("sidebarMenu",function(){return{scope:{section:"="},templateUrl:"partials/sidebar-menu.html",controller:["$scope","$mdSidenav","$location","MENU","user",function(e,t,o,n,r){e.menu=n,e.isActive=function(e){return"#"+o.path()==e},e.changeMode=function(){e.$emit("reqChangeMode")},e.enable=!0,e.toggleItem=function(){e.toggleBtn="toggled"},e.closeLeft=function(){t("left").toggle()},e.logout=function(){r.logout()}}]}}),app.directive("topbarMenu",function(){return{scope:{section:"="},templateUrl:"partials/topbar-menu.html",controller:["$scope","$mdSidenav",function(e,t){e.toggleLeft=function(){t("left").toggle()}}]}}),app.directive("boxes",function(){return{scope:{section:"="},templateUrl:"partials/boxes.html"}}),app.service("user",["$localStorage","$http","$mdToast","$location","CONFIG",function(e,t,o,n,r){var i=r.host+":"+r.port+"/"+r.version+"/users/";this.config=function(){return e.dashboard},this.jwt=function(){return e.jwt},this.auth=function(o){return console.log(i),t.post(i+"auth",angular.toJson(o)).success(function(t){e.token=t.jwt,delete e.dashboard,e.dashboard=t.settings}).error(function(e,t){return console.log(e),console.log(t),e})},this.put=function(n,r){return t({url:i,method:"PUT",data:angular.toJson(n),headers:{Authorization:e.token}}).success(function(e){return r&&o.show(o.simple().textContent("User settings updated").position("top right").hideDelay(3e3).theme("success-toast")),e}).error(function(e,t){$log.error("Something went wrong sending user data"),o.show(o.simple().textContent("Something went wrong").position("top right").hideDelay(3e3).theme("error-toast"))})},this.logout=function(){e.token;return t({url:i+"logout",method:"DELETE",headers:{Authorization:e.token}}).success(function(t){n.path("/login"),delete e.token,delete e.dashboard,delete e.timestamp,o.show(o.simple().textContent("Logout successfull").position("top right").hideDelay(3e3))}).error(function(t,r){n.path("/login"),delete e.token,delete e.dashboard,delete e.timestamp,o.show(o.simple().textContent("Logout failed on server side, but you are logged out").position("top right").hideDelay(3e3))})},this.get=function(n){var r=e.token;return n?t({url:i,method:"GET",headers:{Authorization:r}}).success(function(e){return e}).error(function(e,t){o.show(o.simplet().textContent("Cannot fetch users from database").position("top right").hideDelay(3e3).theme("error-toast"))}):void 0},this.post=function(n){var r=e.token;return t({url:i,method:"POST",data:angular.toJson(n),headers:{Authorization:r}}).success(function(e){return e}).error(function(e,t){o.show(o.simplet().textContent("Cannot create user").position("top right").hideDelay(3e3).theme("error-toast"))})},this["delete"]=function(n){var r=e.token;return console.log(n),t({url:i,method:"DELETE",params:{userId:n},headers:{Authorization:r}}).success(function(e){return e}).error(function(e,t){o.show(o.simplet().textContent("Cannot delete user").position("top right").hideDelay(3e3).theme("error-toast"))})}}]);
//# sourceMappingURL=data:application/json;base64,
