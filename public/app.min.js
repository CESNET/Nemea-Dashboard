function config(t,e,o,n){t.when("/login",{controller:"loginController",templateUrl:"views/login.html"}).when("/",{controller:"homeController",templateUrl:"views/home.html"}).when("/user",{controller:"userController",templateUrl:"views/login.html"}).when("/events",{controller:"eventsController",templateUrl:"views/events.html",reloadOnSearch:!1}).when("/events/:id",{controller:"eventController",templateUrl:"views/event.html"}).when("/profile",{controller:"profileController",templateUrl:"views/profile.html"}).otherwise({redirectTo:"/login"}),e.theme("default").primaryPalette("light-blue").accentPalette("orange"),o.interceptors.push("notAllowedInterceptor"),n.setKeyPrefix("nd-")}function topBarCtrl(t,e,o){this.toggleLeft=function(){o("left").toggle()}}function topBarCtrl(t,e,o){this.user="Petr",this.toggleLeft=function(){o("left").toggle()},this.logout=function(){var o=t.confirm().title("Are you sure?").content("You are about to be logged out. All unsaved changes will be lost in the void!").ok("Log me out").cancel("Keep me here");t.show(o).then(function(){e.path("/login")})}}config.$inject=["$routeProvider","$mdThemingProvider","$httpProvider","$localStorageProvider"],topBarCtrl.$inject=["$mdDialog","$location","$mdSidenav"];var app=angular.module("gui",["ngMaterial","ngRoute","ngMessages","nvd3","ngStorage","ngMap","gridster"]);app.config(config),app.filter("nospace",function(){return function(t){return t?t.replace(/ /g,""):""}}),app.run(["user","$localStorage","$location","$rootScope","$log",function(t,e,o,n,i){n.$on("$locationChangeStart",function(t){void 0==e.token&&(i.info("no token found, redirecting to /login"),o.path("/login"))})}]),app.factory("notAllowedInterceptor",["$log","$localStorage","$location","$injector","$q",function(t,e,o,n,i){var r={responseError:function(n){return 401==n.status&&(t.error("You are not allowed to access, redirecting to /login"),delete e.token,o.path("/login")),i.reject(n)}};return r}]),app.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),app.constant("CATEGORIES",["any","Recon.Scanning","Attempt.Login","Availability.DoS"]),app.constant("PROTOCOLS",["tcp","dns","udp"]),app.constant("TYPES",["barchart","piechart","top","sum"]),app.constant("PIECHART",{options:{chart:{type:"pieChart",height:450,x:function(t){return t.key[0]},y:function(t){return t.x},showLabels:!0,donut:!0,padAngle:0,cornerRadius:1,transitionDuration:500,labelThreshold:0,legend:{margin:{top:5,right:0,bottom:0,left:0}},tooltipContent:function(t,e,o,n,i){return console.log(t),console.log(o),console.log(n),console.log(i),"Olalala!"},pie:{dispatch:{elementClick:function(t){var e=new Date;console.log(t),e.setTime(e.getTime()-864e5),e.setHours(0),e.setMinutes(0),window.location="#/events?filter&date="+e.toISOString()+"&from="+(new Date).getHours()+":"+(new Date).getMinutes()+"&category="+t.data.key[0]}},labelType:"percent",labelsOutside:!0}}}}),app.constant("AREA",{options:{chart:{type:"multiBarChart",height:450,margin:{top:30,right:20,bottom:100,left:50},x:function(t){return t.x},y:function(t){return t.Count},useVoronoi:!1,clipEdge:!0,duration:100,useInteractiveGuideline:!0,xAxis:{showMaxMin:!1,tickFormat:function(t){return d3.time.format("%m/%d %H:%M")(new Date(t))},rotateLabels:-45},yAxis:{tickFormat:function(t){return d3.format(",.0f")(t)}},zoom:{enabled:!0,useFixedDomain:!1,useNiceScale:!1,horizontalOff:!1,verticalOff:!0,unzoomEventType:"dblclick.zoom"},dispatch:{stateChange:function(t){console.log("stateChange")},changeState:function(t){console.log("changeState")},tooltipShow:function(t){console.log("tooltipShow")},tooltipHide:function(t){console.log("tooltipHide")}},multibar:{dispatch:{elementClick:function(t){var e=new Date(t.data.x);console.log(e);var o=e.getHours(),n=e.getMinutes();e.setHours(0),e.setMinutes(0),window.location="#/events?filter&date="+e.toISOString()+"&from="+("0"+o).slice(-2)+":"+("0"+n).slice(-2)+"&category="+t.data.key}}}}}}),app.constant("MENU",[{title:"Dashboard",link:"#/"},{title:"Events",link:"#/events"},{title:"Settings",items:[{title:"My profile",link:"#/profile"},{title:"Users",link:"/settings"}]}]),app.service("api",["$http","$log","$mdToast","$localStorage","PIECHART","CONFIG",function(t,e,o,n,i,r){var a=r.host+":"+r.port+"/"+r.version+"/events/";this.auth=function(){return n.token},this.config=function(){t.get("http://benefizio.liberouter.org:5555/config").success(function(t){this.addr=t.host+":"+t.port+t.events,n.config=t,alert(t)})},this.get=function(n,i,r){return t({url:a+n,method:"GET",params:i,headers:{Authorization:this.auth()}}).success(function(t){return void 0!=r&&o.show(o.simple().textContent("Data successully loaded").position("top right").hideDelay(3e3).theme("success-toast")),t}).error(function(){e.error("Cannot fetch data"),o.show(o.simple().textContent("Something went wrong").position("top right").hideDelay(3e3).theme("error-toast"))})},this.post=function(n,i,r){return t.post(a+n,JSON.stringify(i)).success(function(t){return r&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),t}).error(function(){e.error("Cannot fetch data"),o.show(o.simple().textContent("Something went wrong").position("top right").hideDelay(3e3).theme("error-toast"))})},this.put=function(n,i,r){return t.put(a+n,JSON.stringify(i)).success(function(t){return r&&o.show(o.simple().textContent("Data successfully loaded").position("top right").hideDelay(3e3).theme("success-toast")),t}).error(function(){e.error("Cannot fetch data"),o.show(o.simple().textContent("Something went wrong").position("top right").hideDelay(3e3).theme("error-toast"))})}}]),app.factory("menu",["$http",function(t){return t.get("json/menu.json").success(function(t){return t})}]),app.factory("jsondata",["$http",function(t){return t.get("json/testfile_100.json").success(function(t){return t})}]),app.directive("sidebarMenu",function(){return{scope:{section:"="},templateUrl:"partials/sidebar-menu.html",controller:["$scope","$mdSidenav","$location","MENU","user",function(t,e,o,n,i){t.menu=n,t.isActive=function(t){return o.path()==t},t.changeMode=function(){t.$emit("reqChangeMode")},t.enable=!0,t.toggleItem=function(){t.toggleBtn="toggled"},t.closeLeft=function(){e("left").toggle()},t.logout=function(){i.logout()}}]}}),app.directive("topbarMenu",function(){return{scope:{section:"="},templateUrl:"partials/topbar-menu.html",controller:["$scope","$mdSidenav",function(t,e){t.toggleLeft=function(){e("left").toggle()}}]}}),app.controller("topBar",topBarCtrl),app.directive("boxes",function(){return{scope:{section:"="},templateUrl:"partials/boxes.html"}}),app.directive("clickEdit",function(){var t='<div><h2 ng-show="view.showTitle" ng-click="editTitle()">{{box.title}}</h2><md-input-container ng-hide="showTitle"><input type="text" value="{{box.title}}" ng-blur="editTitle(box.title)" ng-model="box.title" class="focusTitle" aria-label="Edit Title"></md-input-container></div>';return{restrict:"A",replace:!0,template:t,scope:{value:"=clickEdit"},controller:["$scope","inputText","$timeout",function(t,e,o){t.view.showTitle=!0,(t.showTitle=!0)&&o(function(){angular.element(".focusTitle").trigger("focus"),console.log("trigger")},100),t.editTitle=function(){t.view.showTitle=!t.view.showTitle}}]}}),app.directive("clickToEdit",function(){var t='<div class="click-to-edit"><div ng-hide="view.editorEnabled" ng-click="enableEditor()"><a ng-click="enableEditor()"><md-icon md-svg-src="img/icons/edit.svg"></md-icon></a>{{value}} </div><md-input-container ng-show="view.editorEnabled"><div><input ng-model="view.editableValue" class="focusTitle" aria-label="Title"><span ng-click="save()">Save</span> or <a ng-click="disableEditor()">cancel</a>.</div></md-input-container></div>';return{restrict:"A",replace:!0,template:t,scope:{value:"=clickToEdit"},controller:["$scope","$timeout",function(t,e){t.view={editableValue:t.value,editorEnabled:!1},t.enableEditor=function(){t.view.editorEnabled=!0,t.view.editableValue=t.value,e(function(){angular.element(".focusTitle").trigger("focus"),console.log("trigger")},100)},t.disableEditor=function(){t.view.editorEnabled=!1},t.save=function(){t.value=t.view.editableValue,t.disableEditor()}}]}}),app.service("user",["$localStorage","$http","$mdToast","$location","CONFIG",function(t,e,o,n,i){var r=i.host+":"+i.port+"/"+i.version+"/users/";this.config=function(){return t.dashboard},this.jwt=function(){return t.jwt},this.auth=function(o){return e.post(r+"auth",angular.toJson(o)).success(function(e){t.token=e.jwt,delete t.dashboard,t.dashboard=e.settings}).error(function(t,e){return console.log(t),console.log(e),t})},this.put=function(n,i){return e({url:r,method:"PUT",data:angular.toJson(n),headers:{Authorization:t.token}}).success(function(t){return i&&o.show(o.simple().textContent("User settings updated").position("top right").hideDelay(3e3).theme("success-toast")),t}).error(function(t,e){$log.error("Something went wrong sending user data"),o.show(o.simple().textContent("Something went wrong").position("top right").hideDelay(3e3).theme("error-toast"))})},this.logout=function(){t.token;return e({url:r+"logout",method:"DELETE",headers:{Authorization:t.token}}).success(function(e){n.path("/login"),delete t.token,delete t.dashboard,o.show(o.simple().textContent("Logout successfull").position("top right").hideDelay(3e3))}).error(function(e,i){n.path("/login"),delete t.token,delete t.dashboard,o.show(o.simple().textContent("Logout failed on server side, but you are logged out").position("top right").hideDelay(3e3))})}}]),app.controller("eventController",["$scope","$routeParams","$http","api",function(t,e,o,n){t.id=e,t.geo=[],t.back=function(){window.history.back()},n.get("id/"+e.id).success(function(e){t.data=e,void 0!=t.data.Source&&void 0!=t.data.Target&&t.data.Source[0].IP4&&t.data.Target[0].IP4?(o.get("http://freegeoip.net/json/"+t.data.Target[0].IP4[0]).success(function(e){e.type="Target",t.geo.push(e)}),o.get("http://freegeoip.net/json/"+t.data.Source[0].IP4[0]).success(function(e){e.type="Source",t.geo.push(e)})):void 0==t.data.Source||void 0==t.data.Source[0].IP4?o.get("http://freegeoip.net/json/"+t.data.Target[0].IP4[0]).success(function(e){e.type="Target",t.geo.push(e)}):o.get("http://freegeoip.net/json/"+t.data.Source[0].IP4[0]).success(function(e){e.type="Source",t.geo.push(e)})})}]),app.filter("json2html",["$sce","$filter",function(t,e){return function(o){var n="";return angular.forEach(o,function(t,o){n+="<div>","object"==typeof t?("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=n+'<div class="sub">'+e("json2html")(t)+"</div>"):("number"!=typeof o&&"$date"!=o&&(n=n+"<em>"+o+"</em>: "),n=t>1e12?n+"<span>"+e("date")(t,"yyyy/MM/dd H:mm:ss")+"</span>":n+"<span>"+t+"</span>"),n+="</div>"}),t.trustAs("html",n)}}]),app.filter("idea",function(){return function(t){var e={};return angular.forEach(t,function(t,o){"_id"!=o&&(t.$date?e[o]=new Date(t.$date).toISOString().slice(0,19)+"Z":e[o]=t)}),e}}),app.controller("eventsController",["$scope","$http","$location","api",function(t,e,o,n){t.filter={category:"",src_ip:"",trt_ip:"",desc:"",flows_from:"",flows_to:"",items:100},t.query={from:"",to:"",date:new Date,description:"",category:"",limit:100},t.data=[],t.loadbtn="Load",console.log(t.query.date),t.loadItems=function(e){t.loadbtn="Loading...";var i=e.from.split(":"),r=new Date(e.date);if(r.setHours(r.getHours()+i[0]),r.setMinutes(i[1]),o.search("filter",!0),o.search("from",e.from),o.search("date",e.date),o.search("limit",e.limit),e.to){var a=e.to.split(":"),s=new Date(e.date);s.setHours(s.getHours()+a[0]),s.setMinutes(a[1]),o.search("to",e.to)}else var s=null;""!=e.description?o.search("description",e.description):e.description=null,""!=e.category?o.search("category",e.category):e.category=null;var c={from:r,to:s,category:e.category,description:e.description,limit:e.limit};n.get("query",c,!0).success(function(e){t.data=e,t.loadbtn="Load"}).error(function(){t.loadbtn="Load"})},o.search().filter?(t.query=o.search(),console.log(t.query.date),t.query.date=new Date(t.query.date),t.loadItems(t.query)):n.get("100").success(function(e){t.data=e}),t.events=function(e){var o=[];""!=t.filter.src_ip&&("Source"in e&&"IP4"in e.Source[0]&&e.Source[0].IP4[0].toLowerCase().indexOf(t.filter.src_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=t.filter.trt_ip&&("Target"in e&&"IP4"in e.Target[0]&&e.Target[0].IP4[0].toLowerCase().indexOf(t.filter.trt_ip.toLowerCase())>-1?o.push(1):o.push(0)),""!=t.filter.category&&(e.Category[0].toLowerCase().indexOf(t.filter.category.toLowerCase())>-1?o.push(1):o.push(0)),""!=t.filter.desc&&(e.Description.toLowerCase().indexOf(t.filter.desc.toLowerCase())>-1?o.push(1):o.push(0)),""!=t.filter.flows_from&&(e.FlowCount>Number(t.filter.flows_from)?o.push(1):o.push(0)),""!=t.filter.flows_to&&(e.FlowCount<Number(t.filter.flows_to)?o.push(1):o.push(0));for(var n=1,i=0;i<o.length;i++)n*=o[i];return 1==n?!0:!1}}]),app.directive("validateHours",function(){var t=[],e=[];return{require:"ngModel",link:function(o,n,i,r){r.$validators.time=function(o,n){return"query.from"==i.ngModel&&n?e=n.split(":"):n&&(t=n.split(":")),console.log(e),console.log(t),2!=t.length&&2!=e.length||!(t[0]<e[0]||t[0]<=e[0]&&t[1]<e[1]||t[0]<0||t[0]>23||t[1]<0||t[1]>59||e[0]<0||e[0]>23||e[1]<0||e[1]>59)?!0:!1}}}}),app.value("boxes_arr",[{row:0,height:"",items:[{title:"Events shares",type:"piechart",content:"",config:{metric:"category",type:"piechart",period:"24",begintime:""}},{title:"Last 24 hours",type:"barchart",data:"",timestamp:"",config:{metric:"category",type:"barchart",period:24,window:60,begintime:""}}]},{row:1,items:[{title:"Top events in 1 hour",type:"top",config:{period:1,begintime:""}},{title:"2",type:"incident"}]}]),app.controller("homeController",["$scope","$log","api","boxes_arr","$http","$localStorage","user",function(t,e,o,n,i,r,a){t.activeGrid=!1,t.openMenu=function(t,e){originatorEv=e,t(e)},t.addItem=function(){t.$broadcast("addItem")},t.enableGrid=function(){console.log("Enable grid"),t.$broadcast("enableGrid"),t.activeGrid=!t.activeGrid}}]),app.controller("topBar",topBarCtrl),app.controller("row",["$scope","$timeout",function(t,e){t.$on("requestRedraw",function(t){t.stopPropagation(),e(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},10)})}]),app.controller("box",["$scope","$log","boxes_arr","$timeout","$element","$mdDialog","PROTOCOLS","TYPES","CATEGORIES","$http","PIECHART","AREA","api","$location","user",function(t,e,o,n,i,r,a,s,c,l,u,p,d,g,f){function h(){void 0==t.box||"piechart"!=t.box.type&&"barchart"!=t.box.type&&"top"!=t.box.type&&"sum"!=t.box.type||(t.box.config.begintime=function(){var e=new Date;return e.setHours(e.getHours()-t.box.config.period),e}())}h(),t.box.loading=!0,t.openMenu=function(t,e){originatorEv=e,t(e)},t.editMode=!1,t.backupModel={},t.protocol=a,t.types=s,t.categories=c,t.edit=function(e){t.editMode=!0,t.backupModel=angular.copy(e),t.$emit("switch-drag")},t.save=function(){t.user(),"piechart"==t.box.type&&(t.box.options=u.options),"barchart"==t.box.type&&(t.box.options=p.options),t.backupModel={},t.box.config.type=t.box.type,t.editMode=!1,t.box.loading=!0,h(),t.$emit("switch-drag"),"piechart"==t.box.type||"barchart"==t.box.type?d.get("agg",t.box.config,!0).success(function(e){t.box.loading=!1,t.box.data=e}):"top"==t.box.type?d.get("top",t.box.config,!0).success(function(e){t.box.loading=!1,t.box.data=e}):"sum"==t.box.type&&d.get("count",t.box.config).success(function(e){t.box.loading=!1,t.box.data=e})},t.cancel=function(e){t.box=angular.copy(t.backupModel),t.backupModel={},t.editMode=!1,t.$emit("switch-drag")},t.top=function(){h(),d.get("top",t.box.config,!0).success(function(e){console.log(e),t.box.data=e})},void 0!=t.box&&("piechart"==t.box.type||"barchart"==t.box.type?("piechart"==t.box.type&&(t.box.options=u.options),"barchart"==t.box.type&&(t.box.options=p.options),t.box.config.type=t.box.type,d.get("agg",t.box.config).success(function(e){if(t.box.loading=!1,t.box.data=e,"piechart"==t.box.type)for(var o=0;o<t.box.data.length;o++)t.total=t.total+Number(t.box.data[o].x)})):"top"==t.box.type?d.get("top",t.box.config).success(function(e){t.box.loading=!1,t.box.data=e}):"sum"==t.box.type&&d.get("count",t.box.config).success(function(e){t.box.loading=!1,t.box.data=e})),t.user=function(){var o=angular.copy(t.items);console.log(o);for(var n=0;n<o.length;n++)delete o[n].data,delete o[n].options;var i={jwt:f.jwt(),settings:o};e.info(i),f.put(i).success(function(t){console.log("Data"),console.log(t)}).error(function(t){e.error(t)})},t.$on("saveUser",function(){t.user()}),t.$on("gridster-item-resized",function(t){n(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},100)})}]),app.controller("grid",["$scope","$timeout","$log","user",function(t,e,o,n){t.opt={outerMargin:!1,columns:6,pushing:!0,rowHeight:260,colWidth:"auto",floating:!0,swapping:!0,mobileBreakPoint:933,draggable:{enabled:!1},resizable:{enabled:!1,handles:["n","e","s","w","se","sw"],stop:function(o,n,i){console.log("resize end"),t.$emit("requestRedraw"),e(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},100)}}},console.log(n.config()),t.$on("enableGrid",function(){1==t.opt.resizable.enabled&&t.$broadcast("saveUser"),t.opt.resizable.enabled=!t.opt.resizable.enabled,t.opt.draggable.enabled=!t.opt.draggable.enabled}),t.remove=function(e){t.items.splice(t.items.indexOf(e),1)},t.items=n.config(),t.$on("addItem",function(){var e={title:"New box",loading:!1,sizeX:1,sizeY:1};t.items.push(e)})}]),app.directive("gridsterDynamicHeight",["$timeout",function(t){function e(t,e,o){t.$watch(function(){return e[0].scrollHeight},function(e,o){var n=270,i=n*t.item.sizeY;if(e>i){var r=Math.floor(e/n);t.item.sizeY=r}})}var o={scope:{item:"="},link:e,restrict:"A"};return o}]),app.controller("loginController",["$scope","$location","$log","user",function(t,e,o,n){t.title="Login to Nemea Dashboard",t.loginBtn="Login",t.submit=function(o){t.loginBtn="Authenticating...",t.loginBtnDisabled=!0,n.auth(o).success(function(t){e.path("/")}).error(function(e){t.error_mes=e,t.loginBtn="Login",t.loginBtnDisabled=!1})}}]),app.controller("profileController",["$scope","user","api",function(t,e,o){t.user=e.config(),t.editUser=function(t){console.log(t)}}]);
//# sourceMappingURL=data:application/json;base64,
