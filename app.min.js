function config(e,t,o,n){e.when("/login",{controller:"loginController",templateUrl:"views/login.html",resolve:{}}).when("/",{controller:"homeController",templateUrl:"views/home.html",resolve:{}}).when("/user",{controller:"userController",templateUrl:"views/login.html",resolve:{}}).when("/events",{controller:"eventsController",templateUrl:"views/events.html"}).otherwise({redirectTo:"/login"}),n.theme("default").primaryPalette("light-blue").accentPalette("orange")}function rotateRight(e,t){return t>>>e|t<<32-e}function choice(e,t,o){return e&t^~e&o}function majority(e,t,o){return e&t^e&o^t&o}function sha256_Sigma0(e){return rotateRight(2,e)^rotateRight(13,e)^rotateRight(22,e)}function sha256_Sigma1(e){return rotateRight(6,e)^rotateRight(11,e)^rotateRight(25,e)}function sha256_sigma0(e){return rotateRight(7,e)^rotateRight(18,e)^e>>>3}function sha256_sigma1(e){return rotateRight(17,e)^rotateRight(19,e)^e>>>10}function sha256_expand(e,t){return e[15&t]+=sha256_sigma1(e[t+14&15])+e[t+9&15]+sha256_sigma0(e[t+1&15])}function safe_add(e,t){var o=(65535&e)+(65535&t),n=(e>>16)+(t>>16)+(o>>16);return n<<16|65535&o}function sha256_init(){ihash=new Array(8),count=new Array(2),buffer=new Array(64),count[0]=count[1]=0,ihash[0]=1779033703,ihash[1]=3144134277,ihash[2]=1013904242,ihash[3]=2773480762,ihash[4]=1359893119,ihash[5]=2600822924,ihash[6]=528734635,ihash[7]=1541459225}function sha256_transform(){var e,t,o,n,i,r,a,s,l,c,u=new Array(16);e=ihash[0],t=ihash[1],o=ihash[2],n=ihash[3],i=ihash[4],r=ihash[5],a=ihash[6],s=ihash[7];for(var f=0;16>f;f++)u[f]=buffer[(f<<2)+3]|buffer[(f<<2)+2]<<8|buffer[(f<<2)+1]<<16|buffer[f<<2]<<24;for(var h=0;64>h;h++)l=s+sha256_Sigma1(i)+choice(i,r,a)+K256[h],l+=16>h?u[h]:sha256_expand(u,h),c=sha256_Sigma0(e)+majority(e,t,o),s=a,a=r,r=i,i=safe_add(n,l),n=o,o=t,t=e,e=safe_add(l,c);ihash[0]+=e,ihash[1]+=t,ihash[2]+=o,ihash[3]+=n,ihash[4]+=i,ihash[5]+=r,ihash[6]+=a,ihash[7]+=s}function sha256_update(e,t){var o,n,i=0;n=count[0]>>3&63;var r=63&t;for((count[0]+=t<<3)<t<<3&&count[1]++,count[1]+=t>>29,o=0;t>o+63;o+=64){for(var a=n;64>a;a++)buffer[a]=e.charCodeAt(i++);sha256_transform(),n=0}for(var a=0;r>a;a++)buffer[a]=e.charCodeAt(i++)}function sha256_final(){var e=count[0]>>3&63;if(buffer[e++]=128,56>=e)for(var t=e;56>t;t++)buffer[t]=0;else{for(var t=e;64>t;t++)buffer[t]=0;sha256_transform();for(var t=0;56>t;t++)buffer[t]=0}buffer[56]=count[1]>>>24&255,buffer[57]=count[1]>>>16&255,buffer[58]=count[1]>>>8&255,buffer[59]=255&count[1],buffer[60]=count[0]>>>24&255,buffer[61]=count[0]>>>16&255,buffer[62]=count[0]>>>8&255,buffer[63]=255&count[0],sha256_transform()}function sha256_encode_bytes(){for(var e=0,t=new Array(32),o=0;8>o;o++)t[e++]=ihash[o]>>>24&255,t[e++]=ihash[o]>>>16&255,t[e++]=ihash[o]>>>8&255,t[e++]=255&ihash[o];return t}function sha256_encode_hex(){for(var e=new String,t=0;8>t;t++)for(var o=28;o>=0;o-=4)e+=sha256_hex_digits.charAt(ihash[t]>>>o&15);return e}function sha256_digest(e){return sha256_init(),sha256_update(e,e.length),sha256_final(),sha256_encode_hex()}function sha256_self_test(){return"f7846f55cf23e14eebeab5b4e1550cad5b509e3348fbc4efa3a1413d393cb650"==sha256_digest("message digest")}function processData(e){var t=[];return angular.forEach(e,function(o,n){t.push({x:1e3*e[n].time_first,y:e[n].scale})}),[{values:t}]}function pieChart(e){var t=new Object;angular.forEach(e,function(o,n){var i=e[n].type;void 0!=t[i]?t[i]+=1:t[i]=1});var o=[];return angular.forEach(t,function(e,t){o.push({key:t,y:e})}),o}function topBarCtrl(e,t,o,n){this.user="Petr",this.toggleLeft=function(){n("left").toggle()},this.logout=function(){var t=e.confirm().title("Are you sure?").content("You are about to be logged out. All unsaved changes will be lost in the void!").ok("Log me out").cancel("Keep me here");e.show(t).then(function(){o.path("/login")})}}config.$inject=["$routeProvider","$locationProvider","localStorageServiceProvider","$mdThemingProvider"],topBarCtrl.$inject=["$mdDialog","confirmLogout","$location","$mdSidenav"];var app=angular.module("gui",["ngAnimate","ngMaterial","ngRoute","ngMessages","nvd3","LocalStorageModule"]);app.config(config);var loginCorrect=null;checkLogin=function(e,t,o){return o.get("loggedIn")?console.log("correct"):t.path("/login"),!1},app.filter("nospace",function(){return function(e){return e?e.replace(/ /g,""):""}}),app.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),app.constant("CATEGORIES",["Recon.Scanning","Attempt.Login","Availability.DoS"]),app.constant("PROTOCOLS",["tcp","dns","udp"]),app.constant("TYPES",["histogram","piechart"]),app.constant("PIECHART",{options:{chart:{type:"pieChart",height:500,x:function(e){return e.key[0]},y:function(e){return e.x},showLabels:!0,donut:!0,padAngle:.02,cornerRadius:3,transitionDuration:500,labelThreshold:.1,color:["#0ec4f4","#631FF6","#FFDC06","#FF8406","#b56969","#e6cf8b"],legend:{margin:{top:0,right:100,bottom:5,left:0}}}}}),app.constant("AREA",{options:{chart:{type:"stackedAreaChart",height:500,margin:{top:20,right:20,bottom:30,left:40},x:function(e){return e.x},y:function(e){return e.y},useVoronoi:!1,clipEdge:!0,duration:100,useInteractiveGuideline:!0,xAxis:{showMaxMin:!1,tickFormat:function(e){return d3.time.format("%x")(new Date(e))}},yAxis:{tickFormat:function(e){return d3.format(",.2f")(e)}},zoom:{enabled:!0,scaleExtent:[1,10],useFixedDomain:!1,useNiceScale:!1,horizontalOff:!1,verticalOff:!0,unzoomEventType:"dblclick.zoom"}}}}),app.directive("menuToggle",["$timeout",function(e){return{scope:{section:"="},templateUrl:"partials/menu-toggle.tmpl.html",link:function(e,t){var o=t.parent().controller();e.isOpen=function(){return o.isOpen(e.section)},e.toggle=function(){o.toggleOpen(e.section)};var n=t[0].parentNode.parentNode.parentNode;if(n.classList.contains("parent-list-item")){var i=n.querySelector("h2");t[0].firstChild.setAttribute("aria-describedby",i.id)}}}}]);var K256=new Array(1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298),ihash,count,buffer,sha256_hex_digits="0123456789abcdef";app.controller("eventsController",["$scope","$http",function(e,t){e.filter={category:"",proto:"",desc:"",flows_from:"",flows_to:"",items:100,btn:"Load"},e.query={from:"",to:"",date:"",limit:25},e.data=[],t.get("http://benefizio.liberouter.org:5555/v2/events/"+e.filter.items).success(function(t){e.data=t}),e.parseDate=function(t){var o=t;o.setHours(o.getHours()+1),e.foodate=o.toJSON()},e.loadItems=function(o){e.filter.btn="Loading...";var n=JSON.stringify(o.date).split("T"),i=JSON.stringify(o.from).split("T"),r=JSON.stringify(o.to).split("T"),a={from:JSON.parse(n[0]+"T"+i[1]),to:JSON.parse(n[0]+"T"+r[1]),limit:o.limit};console.log(String(n)),t.post("http://pcstehlik.fit.vutbr.cz:5555/v2/events/"+o.limit,a).success(function(t){console.log(t),e.data=t,e.filter.btn="Done"})},e.enableTable=!0,e.events=function(t){var o=[];""!=e.filter.proto&&(50==i&&(console.log("filtering proto"),i=0),"Source"in t&&"Proto"in t.Source[0]&&t.Source[0].Proto[0].toLowerCase().indexOf(e.filter.proto.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.category&&(t.Category[0].toLowerCase().indexOf(e.filter.category.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.desc&&(t.Description.toLowerCase().indexOf(e.filter.desc.toLowerCase())>-1?o.push(1):o.push(0)),""!=e.filter.flows_from&&(t.FlowCount>Number(e.filter.flows_from)?o.push(1):o.push(0)),""!=e.filter.flows_to&&(t.FlowCount<Number(e.filter.flows_to)?o.push(1):o.push(0));for(var n=1,i=0;i<o.length;i++)n*=o[i];return 1==n?!0:!1}}]),app.value("boxes_arr",[{row:0,height:"",items:[{title:"one",type:"piechart",content:"",config:{metric:"category",period:"24",begintime:""}},{title:"10 TOP SCANPORTS",type:"graph",data:"",timestamp:"",options:{chart:{type:"multiBarChart",height:300,margin:{top:0,right:0,bottom:0,left:0},x:function(e){return e.x},y:function(e){return e.y},useInteractiveGuideline:!0,dispatch:{stateChange:function(e){console.log("stateChange")},changeState:function(e){console.log("changeState")}},xAxis:{axisLabel:"Time (ms)",tickFormat:function(e){return d3.time.format("%x/%X")(new Date(e))}},yAxis:{axisLabel:"Voltage (v)",tickFormat:function(e){return d3.format(".02f")(e)},axisLabelDistance:0}},title:{enable:!0,text:"Title for Line Chart 2"}}},{title:"four",type:"incident"}]},{row:1,items:[{title:"Last 1000 events",type:"graph",options:{chart:{type:"pieChart",height:500,x:function(e){return e.key},y:function(e){return e.y},showLabels:!0,donut:!0,padAngle:.02,cornerRadius:3,transitionDuration:500,labelThreshold:.1,color:["#0ec4f4","#631FF6","#FFDC06","#FF8406","#b56969","#e6cf8b"],legend:{margin:{top:0,right:100,bottom:5,left:0}}}}},{title:"2",type:"incident"}]}]),app.controller("userController",["$scope",function(e){console.log("hello!")}]),app.controller("homeController",["$scope","$mdSidenav","$log","$sce","api","$mdDialog","$timeout","boxes_arr","$http","$rootScope",function(e,t,o,n,i,r,a,s,l,c){e.boxes_arr=s,e.title="Home sweet home",e.$on("reqChangeMode",function(t){void 0==e.editMode?e.editMode=!0:e.editMode=!e.editMode}),e.addRow=function(){o.info("adding row"),console.log(s);var e={};e.row=s.length,e.items=[{title:"aloha!"}],s.push(e)},e.showTitle=!0}]),app.constant("MENU",[{title:"Dashboard"},{title:"Events",link:"events"},{title:"Settings",items:[{title:"Users",link:"settings"},{title:"My profile",link:"profile"},{title:"My profile",link:"profile"}]}]),app.factory("confirmLogout",function(){return function(){}}),app.controller("topBar",topBarCtrl),app.controller("row",["$scope","$timeout",function(e,t){e.$on("requestRedraw",function(e){e.stopPropagation(),t(function(){console.log("request accepted"),window.dispatchEvent(new Event("resize"))},10)})}]),app.controller("box",["$scope","$log","boxes_arr","$timeout","jsondata","$element","$mdDialog","PROTOCOLS","TYPES","CATEGORIES","$http","PIECHART",function(e,t,o,n,i,r,a,s,l,c,u,f){function h(){void 0!=e.box&&"piechart"==e.box.type&&(e.box.config.begintime=function(){var t=new Date;return t.setHours(t.getHours()-e.box.config.period),console.log(t),t}())}h(),e.openMenu=function(e,t){originatorEv=t,e(t)},e.editMode=!1,e.backupModel={},e.protocol=s,e.types=l,e.categories=c,e.edit=function(t){e.editMode=!0,e.backupModel=angular.copy(t)},e.save=function(){e.backupModel={},t.info("Edit is done"),t.info(JSON.stringify(e.box)),e.editMode=!1,h(),u.post("http://benefizio.liberouter.org:5555/v2/events/agg",JSON.stringify(e.box.config)).success(function(t){console.log(t),e.box.data=t})},e.cancel=function(t){e.box=angular.copy(e.backupModel),e.backupModel={},e.editMode=!1},console.log(e.box),void 0!=e.box&&"piechart"==e.box.type&&(e.box.options=f.options,e.box.config.type="areachart",t.info(JSON.stringify(e.box.config)),u.post("http://benefizio.liberouter.org:5555/v2/events/agg",JSON.stringify(e.box.config)).success(function(t){console.log(t),e.box.data=t})),e.addElem=function(n){t.info("adding element");var i={};e.full=!1,o[n].items.length>5?e.full=!0:o[n].items.push(i),e.$emit("requestRedraw")},e.removeElem=function(n,i){t.info(n),t.info(i),o[n].items.splice(i,1);var r={};0==o[n].items.length&&(r=o[n].items[i],o.splice(n,1)),e.$emit("requestRedraw")}}]),app.controller("loginController",["$scope","$location","$log","loginAuth","$rootScope","localStorageService",function(e,t,o,n,i,r){e.title="Login!",e.loginBtn="Login",e.submit=function(e){console.log(e)},e.hitSubmit=function(i){console.log("test"),e.loginBtn="Please wait...",n.fetchUser(i).success(function(n){o.info(n),1==n.success?(e.loginBtn="Success",t.path("/"),r.set("loggedIn",!0),r.set("loggedIn.pw",sha256_digest(n.password))):(o.error("error - bad password"),e.error_mes="Bad password",e.loginBtn="Login",loginCorrect=!1,r.set("loggedIn",!1))})}}]),app.factory("menu",["$http",function(e){return e.get("json/menu.json").success(function(e){return e})}]),app.factory("jsondata",["$http",function(e){return e.get("json/testfile_100.json").success(function(e){return e})}]),app.factory("api",["$http",function(e){return function(t){var o="http://pcstehlik.fit.vutbr.cz:5555/events/"+t;return e.get(o).success(function(e){return e})}}]),app.directive("sidebarMenu",function(){return{scope:{section:"="},templateUrl:"partials/sidebar-menu.html",controller:["$scope","$mdSidenav","MENU",function(e,t,o){e.menu=o,e.changeMode=function(){e.$emit("reqChangeMode")},e.enable=!0,e.toggleItem=function(){e.toggleBtn="toggled"},e.closeLeft=function(){t("left").toggle()}}]}}),app.directive("topbarMenu",function(){return{scope:{section:"="},templateUrl:"partials/topbar-menu.html"}}),app.directive("boxes",function(){return{scope:{section:"="},templateUrl:"partials/boxes.html"}}),app.directive("clickEdit",function(){var e='<div><h2 ng-show="view.showTitle" ng-click="editTitle()">{{box.title}}</h2><md-input-container ng-hide="showTitle"><input type="text" value="{{box.title}}" ng-blur="editTitle(box.title)" ng-model="box.title" class="focusTitle" aria-label="Edit Title"></md-input-container></div>';return{restrict:"A",replace:!0,template:e,scope:{value:"=clickEdit"},controller:["$scope","inputText","$timeout",function(e,t,o){e.view.showTitle=!0,(e.showTitle=!0)&&o(function(){angular.element(".focusTitle").trigger("focus"),console.log("trigger")},100),e.editTitle=function(){e.view.showTitle=!e.view.showTitle}}]}}),app.directive("clickToEdit",function(){var e='<div class="click-to-edit"><div ng-hide="view.editorEnabled" ng-click="enableEditor()"><a ng-click="enableEditor()"><md-icon md-svg-src="img/icons/edit.svg"></md-icon></a>{{value}} </div><md-input-container ng-show="view.editorEnabled"><div><input ng-model="view.editableValue" class="focusTitle" aria-label="Title"><span ng-click="save()">Save</span> or <a ng-click="disableEditor()">cancel</a>.</div></md-input-container></div>';return{restrict:"A",replace:!0,template:e,scope:{value:"=clickToEdit"},controller:["$scope","$timeout",function(e,t){e.view={editableValue:e.value,editorEnabled:!1},e.enableEditor=function(){e.view.editorEnabled=!0,e.view.editableValue=e.value,t(function(){angular.element(".focusTitle").trigger("focus"),console.log("trigger")},100)},e.disableEditor=function(){e.view.editorEnabled=!1},e.save=function(){e.value=e.view.editableValue,e.disableEditor()}}]}});
//# sourceMappingURL=data:application/json;base64,
